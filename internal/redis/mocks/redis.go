// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/redis.go -package=redismocks -source=interface.go
//

// Package redismocks is a generated GoMock package.
package redismocks

import (
	context "context"
	reflect "reflect"
	time "time"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ACLCat mocks base method.
func (m *MockClient) ACLCat(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLCat", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLCat indicates an expected call of ACLCat.
func (mr *MockClientMockRecorder) ACLCat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLCat", reflect.TypeOf((*MockClient)(nil).ACLCat), ctx)
}

// ACLCatArgs mocks base method.
func (m *MockClient) ACLCatArgs(ctx context.Context, options *redis.ACLCatArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLCatArgs", ctx, options)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLCatArgs indicates an expected call of ACLCatArgs.
func (mr *MockClientMockRecorder) ACLCatArgs(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLCatArgs", reflect.TypeOf((*MockClient)(nil).ACLCatArgs), ctx, options)
}

// ACLDelUser mocks base method.
func (m *MockClient) ACLDelUser(ctx context.Context, username string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLDelUser", ctx, username)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ACLDelUser indicates an expected call of ACLDelUser.
func (mr *MockClientMockRecorder) ACLDelUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLDelUser", reflect.TypeOf((*MockClient)(nil).ACLDelUser), ctx, username)
}

// ACLDryRun mocks base method.
func (m *MockClient) ACLDryRun(ctx context.Context, username string, command ...any) *redis.StringCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ACLDryRun", varargs...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ACLDryRun indicates an expected call of ACLDryRun.
func (mr *MockClientMockRecorder) ACLDryRun(ctx, username any, command ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, command...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLDryRun", reflect.TypeOf((*MockClient)(nil).ACLDryRun), varargs...)
}

// ACLList mocks base method.
func (m *MockClient) ACLList(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLList", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLList indicates an expected call of ACLList.
func (mr *MockClientMockRecorder) ACLList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLList", reflect.TypeOf((*MockClient)(nil).ACLList), ctx)
}

// ACLLog mocks base method.
func (m *MockClient) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLLog", ctx, count)
	ret0, _ := ret[0].(*redis.ACLLogCmd)
	return ret0
}

// ACLLog indicates an expected call of ACLLog.
func (mr *MockClientMockRecorder) ACLLog(ctx, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLLog", reflect.TypeOf((*MockClient)(nil).ACLLog), ctx, count)
}

// ACLLogReset mocks base method.
func (m *MockClient) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLLogReset", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ACLLogReset indicates an expected call of ACLLogReset.
func (mr *MockClientMockRecorder) ACLLogReset(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLLogReset", reflect.TypeOf((*MockClient)(nil).ACLLogReset), ctx)
}

// ACLSetUser mocks base method.
func (m *MockClient) ACLSetUser(ctx context.Context, username string, rules ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range rules {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ACLSetUser", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ACLSetUser indicates an expected call of ACLSetUser.
func (mr *MockClientMockRecorder) ACLSetUser(ctx, username any, rules ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, rules...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLSetUser", reflect.TypeOf((*MockClient)(nil).ACLSetUser), varargs...)
}

// AddHook mocks base method.
func (m *MockClient) AddHook(arg0 redis.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHook", arg0)
}

// AddHook indicates an expected call of AddHook.
func (mr *MockClientMockRecorder) AddHook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHook", reflect.TypeOf((*MockClient)(nil).AddHook), arg0)
}

// Append mocks base method.
func (m *MockClient) Append(ctx context.Context, key, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockClientMockRecorder) Append(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockClient)(nil).Append), ctx, key, value)
}

// BFAdd mocks base method.
func (m *MockClient) BFAdd(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFAdd", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// BFAdd indicates an expected call of BFAdd.
func (mr *MockClientMockRecorder) BFAdd(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFAdd", reflect.TypeOf((*MockClient)(nil).BFAdd), ctx, key, element)
}

// BFCard mocks base method.
func (m *MockClient) BFCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BFCard indicates an expected call of BFCard.
func (mr *MockClientMockRecorder) BFCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFCard", reflect.TypeOf((*MockClient)(nil).BFCard), ctx, key)
}

// BFExists mocks base method.
func (m *MockClient) BFExists(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFExists", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// BFExists indicates an expected call of BFExists.
func (mr *MockClientMockRecorder) BFExists(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFExists", reflect.TypeOf((*MockClient)(nil).BFExists), ctx, key, element)
}

// BFInfo mocks base method.
func (m *MockClient) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfo", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfo indicates an expected call of BFInfo.
func (mr *MockClientMockRecorder) BFInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfo", reflect.TypeOf((*MockClient)(nil).BFInfo), ctx, key)
}

// BFInfoArg mocks base method.
func (m *MockClient) BFInfoArg(ctx context.Context, key, option string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoArg", ctx, key, option)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoArg indicates an expected call of BFInfoArg.
func (mr *MockClientMockRecorder) BFInfoArg(ctx, key, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoArg", reflect.TypeOf((*MockClient)(nil).BFInfoArg), ctx, key, option)
}

// BFInfoCapacity mocks base method.
func (m *MockClient) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoCapacity", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoCapacity indicates an expected call of BFInfoCapacity.
func (mr *MockClientMockRecorder) BFInfoCapacity(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoCapacity", reflect.TypeOf((*MockClient)(nil).BFInfoCapacity), ctx, key)
}

// BFInfoExpansion mocks base method.
func (m *MockClient) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoExpansion", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoExpansion indicates an expected call of BFInfoExpansion.
func (mr *MockClientMockRecorder) BFInfoExpansion(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoExpansion", reflect.TypeOf((*MockClient)(nil).BFInfoExpansion), ctx, key)
}

// BFInfoFilters mocks base method.
func (m *MockClient) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoFilters", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoFilters indicates an expected call of BFInfoFilters.
func (mr *MockClientMockRecorder) BFInfoFilters(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoFilters", reflect.TypeOf((*MockClient)(nil).BFInfoFilters), ctx, key)
}

// BFInfoItems mocks base method.
func (m *MockClient) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoItems", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoItems indicates an expected call of BFInfoItems.
func (mr *MockClientMockRecorder) BFInfoItems(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoItems", reflect.TypeOf((*MockClient)(nil).BFInfoItems), ctx, key)
}

// BFInfoSize mocks base method.
func (m *MockClient) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoSize", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoSize indicates an expected call of BFInfoSize.
func (mr *MockClientMockRecorder) BFInfoSize(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoSize", reflect.TypeOf((*MockClient)(nil).BFInfoSize), ctx, key)
}

// BFInsert mocks base method.
func (m *MockClient) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFInsert", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFInsert indicates an expected call of BFInsert.
func (mr *MockClientMockRecorder) BFInsert(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInsert", reflect.TypeOf((*MockClient)(nil).BFInsert), varargs...)
}

// BFLoadChunk mocks base method.
func (m *MockClient) BFLoadChunk(ctx context.Context, key string, iterator int64, data any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFLoadChunk", ctx, key, iterator, data)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFLoadChunk indicates an expected call of BFLoadChunk.
func (mr *MockClientMockRecorder) BFLoadChunk(ctx, key, iterator, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFLoadChunk", reflect.TypeOf((*MockClient)(nil).BFLoadChunk), ctx, key, iterator, data)
}

// BFMAdd mocks base method.
func (m *MockClient) BFMAdd(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFMAdd", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFMAdd indicates an expected call of BFMAdd.
func (mr *MockClientMockRecorder) BFMAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFMAdd", reflect.TypeOf((*MockClient)(nil).BFMAdd), varargs...)
}

// BFMExists mocks base method.
func (m *MockClient) BFMExists(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFMExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFMExists indicates an expected call of BFMExists.
func (mr *MockClientMockRecorder) BFMExists(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFMExists", reflect.TypeOf((*MockClient)(nil).BFMExists), varargs...)
}

// BFReserve mocks base method.
func (m *MockClient) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserve", ctx, key, errorRate, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserve indicates an expected call of BFReserve.
func (mr *MockClientMockRecorder) BFReserve(ctx, key, errorRate, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserve", reflect.TypeOf((*MockClient)(nil).BFReserve), ctx, key, errorRate, capacity)
}

// BFReserveExpansion mocks base method.
func (m *MockClient) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity, expansion int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveExpansion", ctx, key, errorRate, capacity, expansion)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveExpansion indicates an expected call of BFReserveExpansion.
func (mr *MockClientMockRecorder) BFReserveExpansion(ctx, key, errorRate, capacity, expansion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveExpansion", reflect.TypeOf((*MockClient)(nil).BFReserveExpansion), ctx, key, errorRate, capacity, expansion)
}

// BFReserveNonScaling mocks base method.
func (m *MockClient) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveNonScaling", ctx, key, errorRate, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveNonScaling indicates an expected call of BFReserveNonScaling.
func (mr *MockClientMockRecorder) BFReserveNonScaling(ctx, key, errorRate, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveNonScaling", reflect.TypeOf((*MockClient)(nil).BFReserveNonScaling), ctx, key, errorRate, capacity)
}

// BFReserveWithArgs mocks base method.
func (m *MockClient) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveWithArgs indicates an expected call of BFReserveWithArgs.
func (mr *MockClientMockRecorder) BFReserveWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveWithArgs", reflect.TypeOf((*MockClient)(nil).BFReserveWithArgs), ctx, key, options)
}

// BFScanDump mocks base method.
func (m *MockClient) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFScanDump", ctx, key, iterator)
	ret0, _ := ret[0].(*redis.ScanDumpCmd)
	return ret0
}

// BFScanDump indicates an expected call of BFScanDump.
func (mr *MockClientMockRecorder) BFScanDump(ctx, key, iterator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFScanDump", reflect.TypeOf((*MockClient)(nil).BFScanDump), ctx, key, iterator)
}

// BLMPop mocks base method.
func (m *MockClient) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout, direction, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLMPop", varargs...)
	ret0, _ := ret[0].(*redis.KeyValuesCmd)
	return ret0
}

// BLMPop indicates an expected call of BLMPop.
func (mr *MockClientMockRecorder) BLMPop(ctx, timeout, direction, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout, direction, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLMPop", reflect.TypeOf((*MockClient)(nil).BLMPop), varargs...)
}

// BLMove mocks base method.
func (m *MockClient) BLMove(ctx context.Context, source, destination, srcpos, destpos string, timeout time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BLMove", ctx, source, destination, srcpos, destpos, timeout)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// BLMove indicates an expected call of BLMove.
func (mr *MockClientMockRecorder) BLMove(ctx, source, destination, srcpos, destpos, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLMove", reflect.TypeOf((*MockClient)(nil).BLMove), ctx, source, destination, srcpos, destpos, timeout)
}

// BLPop mocks base method.
func (m *MockClient) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BLPop indicates an expected call of BLPop.
func (mr *MockClientMockRecorder) BLPop(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockClient)(nil).BLPop), varargs...)
}

// BRPop mocks base method.
func (m *MockClient) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BRPop indicates an expected call of BRPop.
func (mr *MockClientMockRecorder) BRPop(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockClient)(nil).BRPop), varargs...)
}

// BRPopLPush mocks base method.
func (m *MockClient) BRPopLPush(ctx context.Context, source, destination string, timeout time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPopLPush", ctx, source, destination, timeout)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// BRPopLPush indicates an expected call of BRPopLPush.
func (mr *MockClientMockRecorder) BRPopLPush(ctx, source, destination, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPopLPush", reflect.TypeOf((*MockClient)(nil).BRPopLPush), ctx, source, destination, timeout)
}

// BZMPop mocks base method.
func (m *MockClient) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout, order, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZMPop", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceWithKeyCmd)
	return ret0
}

// BZMPop indicates an expected call of BZMPop.
func (mr *MockClientMockRecorder) BZMPop(ctx, timeout, order, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout, order, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZMPop", reflect.TypeOf((*MockClient)(nil).BZMPop), varargs...)
}

// BZPopMax mocks base method.
func (m *MockClient) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMax indicates an expected call of BZPopMax.
func (mr *MockClientMockRecorder) BZPopMax(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMax", reflect.TypeOf((*MockClient)(nil).BZPopMax), varargs...)
}

// BZPopMin mocks base method.
func (m *MockClient) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMin indicates an expected call of BZPopMin.
func (mr *MockClientMockRecorder) BZPopMin(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMin", reflect.TypeOf((*MockClient)(nil).BZPopMin), varargs...)
}

// BgRewriteAOF mocks base method.
func (m *MockClient) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgRewriteAOF", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgRewriteAOF indicates an expected call of BgRewriteAOF.
func (mr *MockClientMockRecorder) BgRewriteAOF(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgRewriteAOF", reflect.TypeOf((*MockClient)(nil).BgRewriteAOF), ctx)
}

// BgSave mocks base method.
func (m *MockClient) BgSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgSave indicates an expected call of BgSave.
func (mr *MockClientMockRecorder) BgSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgSave", reflect.TypeOf((*MockClient)(nil).BgSave), ctx)
}

// BitCount mocks base method.
func (m *MockClient) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", ctx, key, bitCount)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitCount indicates an expected call of BitCount.
func (mr *MockClientMockRecorder) BitCount(ctx, key, bitCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockClient)(nil).BitCount), ctx, key, bitCount)
}

// BitField mocks base method.
func (m *MockClient) BitField(ctx context.Context, key string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitField", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// BitField indicates an expected call of BitField.
func (mr *MockClientMockRecorder) BitField(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitField", reflect.TypeOf((*MockClient)(nil).BitField), varargs...)
}

// BitFieldRO mocks base method.
func (m *MockClient) BitFieldRO(ctx context.Context, key string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitFieldRO", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// BitFieldRO indicates an expected call of BitFieldRO.
func (mr *MockClientMockRecorder) BitFieldRO(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitFieldRO", reflect.TypeOf((*MockClient)(nil).BitFieldRO), varargs...)
}

// BitOpAnd mocks base method.
func (m *MockClient) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpAnd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpAnd indicates an expected call of BitOpAnd.
func (mr *MockClientMockRecorder) BitOpAnd(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpAnd", reflect.TypeOf((*MockClient)(nil).BitOpAnd), varargs...)
}

// BitOpNot mocks base method.
func (m *MockClient) BitOpNot(ctx context.Context, destKey, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitOpNot", ctx, destKey, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpNot indicates an expected call of BitOpNot.
func (mr *MockClientMockRecorder) BitOpNot(ctx, destKey, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpNot", reflect.TypeOf((*MockClient)(nil).BitOpNot), ctx, destKey, key)
}

// BitOpOr mocks base method.
func (m *MockClient) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpOr", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpOr indicates an expected call of BitOpOr.
func (mr *MockClientMockRecorder) BitOpOr(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpOr", reflect.TypeOf((*MockClient)(nil).BitOpOr), varargs...)
}

// BitOpXor mocks base method.
func (m *MockClient) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpXor", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpXor indicates an expected call of BitOpXor.
func (mr *MockClientMockRecorder) BitOpXor(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpXor", reflect.TypeOf((*MockClient)(nil).BitOpXor), varargs...)
}

// BitPos mocks base method.
func (m *MockClient) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, bit}
	for _, a := range pos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitPos", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitPos indicates an expected call of BitPos.
func (mr *MockClientMockRecorder) BitPos(ctx, key, bit any, pos ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, bit}, pos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockClient)(nil).BitPos), varargs...)
}

// BitPosSpan mocks base method.
func (m *MockClient) BitPosSpan(ctx context.Context, key string, bit int8, start, end int64, span string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitPosSpan", ctx, key, bit, start, end, span)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitPosSpan indicates an expected call of BitPosSpan.
func (mr *MockClientMockRecorder) BitPosSpan(ctx, key, bit, start, end, span any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPosSpan", reflect.TypeOf((*MockClient)(nil).BitPosSpan), ctx, key, bit, start, end, span)
}

// CFAdd mocks base method.
func (m *MockClient) CFAdd(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFAdd", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFAdd indicates an expected call of CFAdd.
func (mr *MockClientMockRecorder) CFAdd(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFAdd", reflect.TypeOf((*MockClient)(nil).CFAdd), ctx, key, element)
}

// CFAddNX mocks base method.
func (m *MockClient) CFAddNX(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFAddNX", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFAddNX indicates an expected call of CFAddNX.
func (mr *MockClientMockRecorder) CFAddNX(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFAddNX", reflect.TypeOf((*MockClient)(nil).CFAddNX), ctx, key, element)
}

// CFCount mocks base method.
func (m *MockClient) CFCount(ctx context.Context, key string, element any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFCount", ctx, key, element)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// CFCount indicates an expected call of CFCount.
func (mr *MockClientMockRecorder) CFCount(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFCount", reflect.TypeOf((*MockClient)(nil).CFCount), ctx, key, element)
}

// CFDel mocks base method.
func (m *MockClient) CFDel(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFDel", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFDel indicates an expected call of CFDel.
func (mr *MockClientMockRecorder) CFDel(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFDel", reflect.TypeOf((*MockClient)(nil).CFDel), ctx, key, element)
}

// CFExists mocks base method.
func (m *MockClient) CFExists(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFExists", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFExists indicates an expected call of CFExists.
func (mr *MockClientMockRecorder) CFExists(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFExists", reflect.TypeOf((*MockClient)(nil).CFExists), ctx, key, element)
}

// CFInfo mocks base method.
func (m *MockClient) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFInfo", ctx, key)
	ret0, _ := ret[0].(*redis.CFInfoCmd)
	return ret0
}

// CFInfo indicates an expected call of CFInfo.
func (mr *MockClientMockRecorder) CFInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInfo", reflect.TypeOf((*MockClient)(nil).CFInfo), ctx, key)
}

// CFInsert mocks base method.
func (m *MockClient) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFInsert", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// CFInsert indicates an expected call of CFInsert.
func (mr *MockClientMockRecorder) CFInsert(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInsert", reflect.TypeOf((*MockClient)(nil).CFInsert), varargs...)
}

// CFInsertNX mocks base method.
func (m *MockClient) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFInsertNX", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CFInsertNX indicates an expected call of CFInsertNX.
func (mr *MockClientMockRecorder) CFInsertNX(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInsertNX", reflect.TypeOf((*MockClient)(nil).CFInsertNX), varargs...)
}

// CFLoadChunk mocks base method.
func (m *MockClient) CFLoadChunk(ctx context.Context, key string, iterator int64, data any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFLoadChunk", ctx, key, iterator, data)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFLoadChunk indicates an expected call of CFLoadChunk.
func (mr *MockClientMockRecorder) CFLoadChunk(ctx, key, iterator, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFLoadChunk", reflect.TypeOf((*MockClient)(nil).CFLoadChunk), ctx, key, iterator, data)
}

// CFMExists mocks base method.
func (m *MockClient) CFMExists(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFMExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// CFMExists indicates an expected call of CFMExists.
func (mr *MockClientMockRecorder) CFMExists(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFMExists", reflect.TypeOf((*MockClient)(nil).CFMExists), varargs...)
}

// CFReserve mocks base method.
func (m *MockClient) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserve", ctx, key, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserve indicates an expected call of CFReserve.
func (mr *MockClientMockRecorder) CFReserve(ctx, key, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserve", reflect.TypeOf((*MockClient)(nil).CFReserve), ctx, key, capacity)
}

// CFReserveBucketSize mocks base method.
func (m *MockClient) CFReserveBucketSize(ctx context.Context, key string, capacity, bucketsize int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveBucketSize", ctx, key, capacity, bucketsize)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveBucketSize indicates an expected call of CFReserveBucketSize.
func (mr *MockClientMockRecorder) CFReserveBucketSize(ctx, key, capacity, bucketsize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveBucketSize", reflect.TypeOf((*MockClient)(nil).CFReserveBucketSize), ctx, key, capacity, bucketsize)
}

// CFReserveExpansion mocks base method.
func (m *MockClient) CFReserveExpansion(ctx context.Context, key string, capacity, expansion int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveExpansion", ctx, key, capacity, expansion)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveExpansion indicates an expected call of CFReserveExpansion.
func (mr *MockClientMockRecorder) CFReserveExpansion(ctx, key, capacity, expansion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveExpansion", reflect.TypeOf((*MockClient)(nil).CFReserveExpansion), ctx, key, capacity, expansion)
}

// CFReserveMaxIterations mocks base method.
func (m *MockClient) CFReserveMaxIterations(ctx context.Context, key string, capacity, maxiterations int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveMaxIterations", ctx, key, capacity, maxiterations)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveMaxIterations indicates an expected call of CFReserveMaxIterations.
func (mr *MockClientMockRecorder) CFReserveMaxIterations(ctx, key, capacity, maxiterations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveMaxIterations", reflect.TypeOf((*MockClient)(nil).CFReserveMaxIterations), ctx, key, capacity, maxiterations)
}

// CFReserveWithArgs mocks base method.
func (m *MockClient) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveWithArgs indicates an expected call of CFReserveWithArgs.
func (mr *MockClientMockRecorder) CFReserveWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveWithArgs", reflect.TypeOf((*MockClient)(nil).CFReserveWithArgs), ctx, key, options)
}

// CFScanDump mocks base method.
func (m *MockClient) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFScanDump", ctx, key, iterator)
	ret0, _ := ret[0].(*redis.ScanDumpCmd)
	return ret0
}

// CFScanDump indicates an expected call of CFScanDump.
func (mr *MockClientMockRecorder) CFScanDump(ctx, key, iterator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFScanDump", reflect.TypeOf((*MockClient)(nil).CFScanDump), ctx, key, iterator)
}

// CMSIncrBy mocks base method.
func (m *MockClient) CMSIncrBy(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSIncrBy", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CMSIncrBy indicates an expected call of CMSIncrBy.
func (mr *MockClientMockRecorder) CMSIncrBy(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSIncrBy", reflect.TypeOf((*MockClient)(nil).CMSIncrBy), varargs...)
}

// CMSInfo mocks base method.
func (m *MockClient) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInfo", ctx, key)
	ret0, _ := ret[0].(*redis.CMSInfoCmd)
	return ret0
}

// CMSInfo indicates an expected call of CMSInfo.
func (mr *MockClientMockRecorder) CMSInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInfo", reflect.TypeOf((*MockClient)(nil).CMSInfo), ctx, key)
}

// CMSInitByDim mocks base method.
func (m *MockClient) CMSInitByDim(ctx context.Context, key string, width, height int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInitByDim", ctx, key, width, height)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSInitByDim indicates an expected call of CMSInitByDim.
func (mr *MockClientMockRecorder) CMSInitByDim(ctx, key, width, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInitByDim", reflect.TypeOf((*MockClient)(nil).CMSInitByDim), ctx, key, width, height)
}

// CMSInitByProb mocks base method.
func (m *MockClient) CMSInitByProb(ctx context.Context, key string, errorRate, probability float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInitByProb", ctx, key, errorRate, probability)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSInitByProb indicates an expected call of CMSInitByProb.
func (mr *MockClientMockRecorder) CMSInitByProb(ctx, key, errorRate, probability any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInitByProb", reflect.TypeOf((*MockClient)(nil).CMSInitByProb), ctx, key, errorRate, probability)
}

// CMSMerge mocks base method.
func (m *MockClient) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range sourceKeys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSMerge indicates an expected call of CMSMerge.
func (mr *MockClientMockRecorder) CMSMerge(ctx, destKey any, sourceKeys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, sourceKeys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSMerge", reflect.TypeOf((*MockClient)(nil).CMSMerge), varargs...)
}

// CMSMergeWithWeight mocks base method.
func (m *MockClient) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSMergeWithWeight", ctx, destKey, sourceKeys)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSMergeWithWeight indicates an expected call of CMSMergeWithWeight.
func (mr *MockClientMockRecorder) CMSMergeWithWeight(ctx, destKey, sourceKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSMergeWithWeight", reflect.TypeOf((*MockClient)(nil).CMSMergeWithWeight), ctx, destKey, sourceKeys)
}

// CMSQuery mocks base method.
func (m *MockClient) CMSQuery(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSQuery", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CMSQuery indicates an expected call of CMSQuery.
func (mr *MockClientMockRecorder) CMSQuery(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSQuery", reflect.TypeOf((*MockClient)(nil).CMSQuery), varargs...)
}

// ClientGetName mocks base method.
func (m *MockClient) ClientGetName(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientGetName", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientGetName indicates an expected call of ClientGetName.
func (mr *MockClientMockRecorder) ClientGetName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientGetName", reflect.TypeOf((*MockClient)(nil).ClientGetName), ctx)
}

// ClientID mocks base method.
func (m *MockClient) ClientID(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientID", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientID indicates an expected call of ClientID.
func (mr *MockClientMockRecorder) ClientID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientID", reflect.TypeOf((*MockClient)(nil).ClientID), ctx)
}

// ClientInfo mocks base method.
func (m *MockClient) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientInfo", ctx)
	ret0, _ := ret[0].(*redis.ClientInfoCmd)
	return ret0
}

// ClientInfo indicates an expected call of ClientInfo.
func (mr *MockClientMockRecorder) ClientInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientInfo", reflect.TypeOf((*MockClient)(nil).ClientInfo), ctx)
}

// ClientKill mocks base method.
func (m *MockClient) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientKill", ctx, ipPort)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClientKill indicates an expected call of ClientKill.
func (mr *MockClientMockRecorder) ClientKill(ctx, ipPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKill", reflect.TypeOf((*MockClient)(nil).ClientKill), ctx, ipPort)
}

// ClientKillByFilter mocks base method.
func (m *MockClient) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClientKillByFilter", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientKillByFilter indicates an expected call of ClientKillByFilter.
func (mr *MockClientMockRecorder) ClientKillByFilter(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKillByFilter", reflect.TypeOf((*MockClient)(nil).ClientKillByFilter), varargs...)
}

// ClientList mocks base method.
func (m *MockClient) ClientList(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientList", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientList indicates an expected call of ClientList.
func (mr *MockClientMockRecorder) ClientList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientList", reflect.TypeOf((*MockClient)(nil).ClientList), ctx)
}

// ClientPause mocks base method.
func (m *MockClient) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientPause", ctx, dur)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientPause indicates an expected call of ClientPause.
func (mr *MockClientMockRecorder) ClientPause(ctx, dur any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientPause", reflect.TypeOf((*MockClient)(nil).ClientPause), ctx, dur)
}

// ClientUnblock mocks base method.
func (m *MockClient) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnblock", ctx, id)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientUnblock indicates an expected call of ClientUnblock.
func (mr *MockClientMockRecorder) ClientUnblock(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnblock", reflect.TypeOf((*MockClient)(nil).ClientUnblock), ctx, id)
}

// ClientUnblockWithError mocks base method.
func (m *MockClient) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnblockWithError", ctx, id)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientUnblockWithError indicates an expected call of ClientUnblockWithError.
func (mr *MockClientMockRecorder) ClientUnblockWithError(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnblockWithError", reflect.TypeOf((*MockClient)(nil).ClientUnblockWithError), ctx, id)
}

// ClientUnpause mocks base method.
func (m *MockClient) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnpause", ctx)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientUnpause indicates an expected call of ClientUnpause.
func (mr *MockClientMockRecorder) ClientUnpause(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnpause", reflect.TypeOf((*MockClient)(nil).ClientUnpause), ctx)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ClusterAddSlots mocks base method.
func (m *MockClient) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterAddSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlots indicates an expected call of ClusterAddSlots.
func (mr *MockClientMockRecorder) ClusterAddSlots(ctx any, slots ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, slots...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlots", reflect.TypeOf((*MockClient)(nil).ClusterAddSlots), varargs...)
}

// ClusterAddSlotsRange mocks base method.
func (m *MockClient) ClusterAddSlotsRange(ctx context.Context, min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAddSlotsRange", ctx, min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlotsRange indicates an expected call of ClusterAddSlotsRange.
func (mr *MockClientMockRecorder) ClusterAddSlotsRange(ctx, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlotsRange", reflect.TypeOf((*MockClient)(nil).ClusterAddSlotsRange), ctx, min, max)
}

// ClusterCountFailureReports mocks base method.
func (m *MockClient) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountFailureReports", ctx, nodeID)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountFailureReports indicates an expected call of ClusterCountFailureReports.
func (mr *MockClientMockRecorder) ClusterCountFailureReports(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountFailureReports", reflect.TypeOf((*MockClient)(nil).ClusterCountFailureReports), ctx, nodeID)
}

// ClusterCountKeysInSlot mocks base method.
func (m *MockClient) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountKeysInSlot", ctx, slot)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountKeysInSlot indicates an expected call of ClusterCountKeysInSlot.
func (mr *MockClientMockRecorder) ClusterCountKeysInSlot(ctx, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountKeysInSlot", reflect.TypeOf((*MockClient)(nil).ClusterCountKeysInSlot), ctx, slot)
}

// ClusterDelSlots mocks base method.
func (m *MockClient) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterDelSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlots indicates an expected call of ClusterDelSlots.
func (mr *MockClientMockRecorder) ClusterDelSlots(ctx any, slots ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, slots...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlots", reflect.TypeOf((*MockClient)(nil).ClusterDelSlots), varargs...)
}

// ClusterDelSlotsRange mocks base method.
func (m *MockClient) ClusterDelSlotsRange(ctx context.Context, min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelSlotsRange", ctx, min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlotsRange indicates an expected call of ClusterDelSlotsRange.
func (mr *MockClientMockRecorder) ClusterDelSlotsRange(ctx, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlotsRange", reflect.TypeOf((*MockClient)(nil).ClusterDelSlotsRange), ctx, min, max)
}

// ClusterFailover mocks base method.
func (m *MockClient) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterFailover", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterFailover indicates an expected call of ClusterFailover.
func (mr *MockClientMockRecorder) ClusterFailover(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterFailover", reflect.TypeOf((*MockClient)(nil).ClusterFailover), ctx)
}

// ClusterForget mocks base method.
func (m *MockClient) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterForget", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterForget indicates an expected call of ClusterForget.
func (mr *MockClientMockRecorder) ClusterForget(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterForget", reflect.TypeOf((*MockClient)(nil).ClusterForget), ctx, nodeID)
}

// ClusterGetKeysInSlot mocks base method.
func (m *MockClient) ClusterGetKeysInSlot(ctx context.Context, slot, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterGetKeysInSlot", ctx, slot, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterGetKeysInSlot indicates an expected call of ClusterGetKeysInSlot.
func (mr *MockClientMockRecorder) ClusterGetKeysInSlot(ctx, slot, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGetKeysInSlot", reflect.TypeOf((*MockClient)(nil).ClusterGetKeysInSlot), ctx, slot, count)
}

// ClusterInfo mocks base method.
func (m *MockClient) ClusterInfo(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockClientMockRecorder) ClusterInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockClient)(nil).ClusterInfo), ctx)
}

// ClusterKeySlot mocks base method.
func (m *MockClient) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterKeySlot", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterKeySlot indicates an expected call of ClusterKeySlot.
func (mr *MockClientMockRecorder) ClusterKeySlot(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterKeySlot", reflect.TypeOf((*MockClient)(nil).ClusterKeySlot), ctx, key)
}

// ClusterLinks mocks base method.
func (m *MockClient) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterLinks", ctx)
	ret0, _ := ret[0].(*redis.ClusterLinksCmd)
	return ret0
}

// ClusterLinks indicates an expected call of ClusterLinks.
func (mr *MockClientMockRecorder) ClusterLinks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterLinks", reflect.TypeOf((*MockClient)(nil).ClusterLinks), ctx)
}

// ClusterMeet mocks base method.
func (m *MockClient) ClusterMeet(ctx context.Context, host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMeet", ctx, host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterMeet indicates an expected call of ClusterMeet.
func (mr *MockClientMockRecorder) ClusterMeet(ctx, host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMeet", reflect.TypeOf((*MockClient)(nil).ClusterMeet), ctx, host, port)
}

// ClusterMyID mocks base method.
func (m *MockClient) ClusterMyID(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMyID", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterMyID indicates an expected call of ClusterMyID.
func (mr *MockClientMockRecorder) ClusterMyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMyID", reflect.TypeOf((*MockClient)(nil).ClusterMyID), ctx)
}

// ClusterMyShardID mocks base method.
func (m *MockClient) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMyShardID", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterMyShardID indicates an expected call of ClusterMyShardID.
func (mr *MockClientMockRecorder) ClusterMyShardID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMyShardID", reflect.TypeOf((*MockClient)(nil).ClusterMyShardID), ctx)
}

// ClusterNodes mocks base method.
func (m *MockClient) ClusterNodes(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterNodes", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterNodes indicates an expected call of ClusterNodes.
func (mr *MockClientMockRecorder) ClusterNodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterNodes", reflect.TypeOf((*MockClient)(nil).ClusterNodes), ctx)
}

// ClusterReplicate mocks base method.
func (m *MockClient) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterReplicate", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterReplicate indicates an expected call of ClusterReplicate.
func (mr *MockClientMockRecorder) ClusterReplicate(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterReplicate", reflect.TypeOf((*MockClient)(nil).ClusterReplicate), ctx, nodeID)
}

// ClusterResetHard mocks base method.
func (m *MockClient) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetHard", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetHard indicates an expected call of ClusterResetHard.
func (mr *MockClientMockRecorder) ClusterResetHard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetHard", reflect.TypeOf((*MockClient)(nil).ClusterResetHard), ctx)
}

// ClusterResetSoft mocks base method.
func (m *MockClient) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetSoft", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetSoft indicates an expected call of ClusterResetSoft.
func (mr *MockClientMockRecorder) ClusterResetSoft(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetSoft", reflect.TypeOf((*MockClient)(nil).ClusterResetSoft), ctx)
}

// ClusterSaveConfig mocks base method.
func (m *MockClient) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSaveConfig", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterSaveConfig indicates an expected call of ClusterSaveConfig.
func (mr *MockClientMockRecorder) ClusterSaveConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSaveConfig", reflect.TypeOf((*MockClient)(nil).ClusterSaveConfig), ctx)
}

// ClusterShards mocks base method.
func (m *MockClient) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterShards", ctx)
	ret0, _ := ret[0].(*redis.ClusterShardsCmd)
	return ret0
}

// ClusterShards indicates an expected call of ClusterShards.
func (mr *MockClientMockRecorder) ClusterShards(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterShards", reflect.TypeOf((*MockClient)(nil).ClusterShards), ctx)
}

// ClusterSlaves mocks base method.
func (m *MockClient) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlaves", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterSlaves indicates an expected call of ClusterSlaves.
func (mr *MockClientMockRecorder) ClusterSlaves(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlaves", reflect.TypeOf((*MockClient)(nil).ClusterSlaves), ctx, nodeID)
}

// ClusterSlots mocks base method.
func (m *MockClient) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlots", ctx)
	ret0, _ := ret[0].(*redis.ClusterSlotsCmd)
	return ret0
}

// ClusterSlots indicates an expected call of ClusterSlots.
func (mr *MockClientMockRecorder) ClusterSlots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlots", reflect.TypeOf((*MockClient)(nil).ClusterSlots), ctx)
}

// Command mocks base method.
func (m *MockClient) Command(ctx context.Context) *redis.CommandsInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", ctx)
	ret0, _ := ret[0].(*redis.CommandsInfoCmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockClientMockRecorder) Command(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockClient)(nil).Command), ctx)
}

// CommandGetKeys mocks base method.
func (m *MockClient) CommandGetKeys(ctx context.Context, commands ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandGetKeys", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// CommandGetKeys indicates an expected call of CommandGetKeys.
func (mr *MockClientMockRecorder) CommandGetKeys(ctx any, commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, commands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetKeys", reflect.TypeOf((*MockClient)(nil).CommandGetKeys), varargs...)
}

// CommandGetKeysAndFlags mocks base method.
func (m *MockClient) CommandGetKeysAndFlags(ctx context.Context, commands ...any) *redis.KeyFlagsCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandGetKeysAndFlags", varargs...)
	ret0, _ := ret[0].(*redis.KeyFlagsCmd)
	return ret0
}

// CommandGetKeysAndFlags indicates an expected call of CommandGetKeysAndFlags.
func (mr *MockClientMockRecorder) CommandGetKeysAndFlags(ctx any, commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, commands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetKeysAndFlags", reflect.TypeOf((*MockClient)(nil).CommandGetKeysAndFlags), varargs...)
}

// CommandList mocks base method.
func (m *MockClient) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandList", ctx, filter)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// CommandList indicates an expected call of CommandList.
func (mr *MockClientMockRecorder) CommandList(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandList", reflect.TypeOf((*MockClient)(nil).CommandList), ctx, filter)
}

// ConfigGet mocks base method.
func (m *MockClient) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigGet", ctx, parameter)
	ret0, _ := ret[0].(*redis.MapStringStringCmd)
	return ret0
}

// ConfigGet indicates an expected call of ConfigGet.
func (mr *MockClientMockRecorder) ConfigGet(ctx, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigGet", reflect.TypeOf((*MockClient)(nil).ConfigGet), ctx, parameter)
}

// ConfigResetStat mocks base method.
func (m *MockClient) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigResetStat", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigResetStat indicates an expected call of ConfigResetStat.
func (mr *MockClientMockRecorder) ConfigResetStat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigResetStat", reflect.TypeOf((*MockClient)(nil).ConfigResetStat), ctx)
}

// ConfigRewrite mocks base method.
func (m *MockClient) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRewrite", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigRewrite indicates an expected call of ConfigRewrite.
func (mr *MockClientMockRecorder) ConfigRewrite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRewrite", reflect.TypeOf((*MockClient)(nil).ConfigRewrite), ctx)
}

// ConfigSet mocks base method.
func (m *MockClient) ConfigSet(ctx context.Context, parameter, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSet", ctx, parameter, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigSet indicates an expected call of ConfigSet.
func (mr *MockClientMockRecorder) ConfigSet(ctx, parameter, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSet", reflect.TypeOf((*MockClient)(nil).ConfigSet), ctx, parameter, value)
}

// Copy mocks base method.
func (m *MockClient) Copy(ctx context.Context, sourceKey, destKey string, db int, replace bool) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", ctx, sourceKey, destKey, db, replace)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockClientMockRecorder) Copy(ctx, sourceKey, destKey, db, replace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockClient)(nil).Copy), ctx, sourceKey, destKey, db, replace)
}

// DBSize mocks base method.
func (m *MockClient) DBSize(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBSize", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DBSize indicates an expected call of DBSize.
func (mr *MockClientMockRecorder) DBSize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBSize", reflect.TypeOf((*MockClient)(nil).DBSize), ctx)
}

// DebugObject mocks base method.
func (m *MockClient) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugObject", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// DebugObject indicates an expected call of DebugObject.
func (mr *MockClientMockRecorder) DebugObject(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugObject", reflect.TypeOf((*MockClient)(nil).DebugObject), ctx, key)
}

// Decr mocks base method.
func (m *MockClient) Decr(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockClientMockRecorder) Decr(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockClient)(nil).Decr), ctx, key)
}

// DecrBy mocks base method.
func (m *MockClient) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", ctx, key, decrement)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DecrBy indicates an expected call of DecrBy.
func (mr *MockClientMockRecorder) DecrBy(ctx, key, decrement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockClient)(nil).DecrBy), ctx, key, decrement)
}

// Del mocks base method.
func (m *MockClient) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockClientMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockClient)(nil).Del), varargs...)
}

// Do mocks base method.
func (m *MockClient) Do(ctx context.Context, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), varargs...)
}

// Dump mocks base method.
func (m *MockClient) Dump(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockClientMockRecorder) Dump(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockClient)(nil).Dump), ctx, key)
}

// Echo mocks base method.
func (m *MockClient) Echo(ctx context.Context, message any) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", ctx, message)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockClientMockRecorder) Echo(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockClient)(nil).Echo), ctx, message)
}

// Eval mocks base method.
func (m *MockClient) Eval(ctx context.Context, script string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Eval", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockClientMockRecorder) Eval(ctx, script, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockClient)(nil).Eval), varargs...)
}

// EvalRO mocks base method.
func (m *MockClient) EvalRO(ctx context.Context, script string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalRO indicates an expected call of EvalRO.
func (mr *MockClientMockRecorder) EvalRO(ctx, script, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalRO", reflect.TypeOf((*MockClient)(nil).EvalRO), varargs...)
}

// EvalSha mocks base method.
func (m *MockClient) EvalSha(ctx context.Context, sha1 string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalSha", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalSha indicates an expected call of EvalSha.
func (mr *MockClientMockRecorder) EvalSha(ctx, sha1, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSha", reflect.TypeOf((*MockClient)(nil).EvalSha), varargs...)
}

// EvalShaRO mocks base method.
func (m *MockClient) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalShaRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalShaRO indicates an expected call of EvalShaRO.
func (mr *MockClientMockRecorder) EvalShaRO(ctx, sha1, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalShaRO", reflect.TypeOf((*MockClient)(nil).EvalShaRO), varargs...)
}

// Exists mocks base method.
func (m *MockClient) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockClientMockRecorder) Exists(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), varargs...)
}

// Expire mocks base method.
func (m *MockClient) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockClientMockRecorder) Expire(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockClient)(nil).Expire), ctx, key, expiration)
}

// ExpireAt mocks base method.
func (m *MockClient) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", ctx, key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireAt indicates an expected call of ExpireAt.
func (mr *MockClientMockRecorder) ExpireAt(ctx, key, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockClient)(nil).ExpireAt), ctx, key, tm)
}

// ExpireGT mocks base method.
func (m *MockClient) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireGT", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireGT indicates an expected call of ExpireGT.
func (mr *MockClientMockRecorder) ExpireGT(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireGT", reflect.TypeOf((*MockClient)(nil).ExpireGT), ctx, key, expiration)
}

// ExpireLT mocks base method.
func (m *MockClient) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireLT", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireLT indicates an expected call of ExpireLT.
func (mr *MockClientMockRecorder) ExpireLT(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireLT", reflect.TypeOf((*MockClient)(nil).ExpireLT), ctx, key, expiration)
}

// ExpireNX mocks base method.
func (m *MockClient) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireNX", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireNX indicates an expected call of ExpireNX.
func (mr *MockClientMockRecorder) ExpireNX(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireNX", reflect.TypeOf((*MockClient)(nil).ExpireNX), ctx, key, expiration)
}

// ExpireTime mocks base method.
func (m *MockClient) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// ExpireTime indicates an expected call of ExpireTime.
func (mr *MockClientMockRecorder) ExpireTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireTime", reflect.TypeOf((*MockClient)(nil).ExpireTime), ctx, key)
}

// ExpireXX mocks base method.
func (m *MockClient) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireXX", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireXX indicates an expected call of ExpireXX.
func (mr *MockClientMockRecorder) ExpireXX(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireXX", reflect.TypeOf((*MockClient)(nil).ExpireXX), ctx, key, expiration)
}

// FCall mocks base method.
func (m *MockClient) FCall(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCall", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCall indicates an expected call of FCall.
func (mr *MockClientMockRecorder) FCall(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCall", reflect.TypeOf((*MockClient)(nil).FCall), varargs...)
}

// FCallRO mocks base method.
func (m *MockClient) FCallRO(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCallRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCallRO indicates an expected call of FCallRO.
func (mr *MockClientMockRecorder) FCallRO(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCallRO", reflect.TypeOf((*MockClient)(nil).FCallRO), varargs...)
}

// FCallRo mocks base method.
func (m *MockClient) FCallRo(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCallRo", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCallRo indicates an expected call of FCallRo.
func (mr *MockClientMockRecorder) FCallRo(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCallRo", reflect.TypeOf((*MockClient)(nil).FCallRo), varargs...)
}

// FTAggregate mocks base method.
func (m *MockClient) FTAggregate(ctx context.Context, index, query string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAggregate", ctx, index, query)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// FTAggregate indicates an expected call of FTAggregate.
func (mr *MockClientMockRecorder) FTAggregate(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAggregate", reflect.TypeOf((*MockClient)(nil).FTAggregate), ctx, index, query)
}

// FTAggregateWithArgs mocks base method.
func (m *MockClient) FTAggregateWithArgs(ctx context.Context, index, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAggregateWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.AggregateCmd)
	return ret0
}

// FTAggregateWithArgs indicates an expected call of FTAggregateWithArgs.
func (mr *MockClientMockRecorder) FTAggregateWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAggregateWithArgs", reflect.TypeOf((*MockClient)(nil).FTAggregateWithArgs), ctx, index, query, options)
}

// FTAliasAdd mocks base method.
func (m *MockClient) FTAliasAdd(ctx context.Context, index, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasAdd", ctx, index, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasAdd indicates an expected call of FTAliasAdd.
func (mr *MockClientMockRecorder) FTAliasAdd(ctx, index, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasAdd", reflect.TypeOf((*MockClient)(nil).FTAliasAdd), ctx, index, alias)
}

// FTAliasDel mocks base method.
func (m *MockClient) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasDel", ctx, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasDel indicates an expected call of FTAliasDel.
func (mr *MockClientMockRecorder) FTAliasDel(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasDel", reflect.TypeOf((*MockClient)(nil).FTAliasDel), ctx, alias)
}

// FTAliasUpdate mocks base method.
func (m *MockClient) FTAliasUpdate(ctx context.Context, index, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasUpdate", ctx, index, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasUpdate indicates an expected call of FTAliasUpdate.
func (mr *MockClientMockRecorder) FTAliasUpdate(ctx, index, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasUpdate", reflect.TypeOf((*MockClient)(nil).FTAliasUpdate), ctx, index, alias)
}

// FTAlter mocks base method.
func (m *MockClient) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAlter", ctx, index, skipInitialScan, definition)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAlter indicates an expected call of FTAlter.
func (mr *MockClientMockRecorder) FTAlter(ctx, index, skipInitialScan, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAlter", reflect.TypeOf((*MockClient)(nil).FTAlter), ctx, index, skipInitialScan, definition)
}

// FTConfigGet mocks base method.
func (m *MockClient) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTConfigGet", ctx, option)
	ret0, _ := ret[0].(*redis.MapMapStringInterfaceCmd)
	return ret0
}

// FTConfigGet indicates an expected call of FTConfigGet.
func (mr *MockClientMockRecorder) FTConfigGet(ctx, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTConfigGet", reflect.TypeOf((*MockClient)(nil).FTConfigGet), ctx, option)
}

// FTConfigSet mocks base method.
func (m *MockClient) FTConfigSet(ctx context.Context, option string, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTConfigSet", ctx, option, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTConfigSet indicates an expected call of FTConfigSet.
func (mr *MockClientMockRecorder) FTConfigSet(ctx, option, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTConfigSet", reflect.TypeOf((*MockClient)(nil).FTConfigSet), ctx, option, value)
}

// FTCreate mocks base method.
func (m *MockClient) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, index, options}
	for _, a := range schema {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTCreate", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTCreate indicates an expected call of FTCreate.
func (mr *MockClientMockRecorder) FTCreate(ctx, index, options any, schema ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, index, options}, schema...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCreate", reflect.TypeOf((*MockClient)(nil).FTCreate), varargs...)
}

// FTCursorDel mocks base method.
func (m *MockClient) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTCursorDel", ctx, index, cursorId)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTCursorDel indicates an expected call of FTCursorDel.
func (mr *MockClientMockRecorder) FTCursorDel(ctx, index, cursorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCursorDel", reflect.TypeOf((*MockClient)(nil).FTCursorDel), ctx, index, cursorId)
}

// FTCursorRead mocks base method.
func (m *MockClient) FTCursorRead(ctx context.Context, index string, cursorId, count int) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTCursorRead", ctx, index, cursorId, count)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// FTCursorRead indicates an expected call of FTCursorRead.
func (mr *MockClientMockRecorder) FTCursorRead(ctx, index, cursorId, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCursorRead", reflect.TypeOf((*MockClient)(nil).FTCursorRead), ctx, index, cursorId, count)
}

// FTDictAdd mocks base method.
func (m *MockClient) FTDictAdd(ctx context.Context, dict string, term ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dict}
	for _, a := range term {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTDictAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// FTDictAdd indicates an expected call of FTDictAdd.
func (mr *MockClientMockRecorder) FTDictAdd(ctx, dict any, term ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dict}, term...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictAdd", reflect.TypeOf((*MockClient)(nil).FTDictAdd), varargs...)
}

// FTDictDel mocks base method.
func (m *MockClient) FTDictDel(ctx context.Context, dict string, term ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dict}
	for _, a := range term {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTDictDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// FTDictDel indicates an expected call of FTDictDel.
func (mr *MockClientMockRecorder) FTDictDel(ctx, dict any, term ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dict}, term...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictDel", reflect.TypeOf((*MockClient)(nil).FTDictDel), varargs...)
}

// FTDictDump mocks base method.
func (m *MockClient) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDictDump", ctx, dict)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FTDictDump indicates an expected call of FTDictDump.
func (mr *MockClientMockRecorder) FTDictDump(ctx, dict any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictDump", reflect.TypeOf((*MockClient)(nil).FTDictDump), ctx, dict)
}

// FTDropIndex mocks base method.
func (m *MockClient) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDropIndex", ctx, index)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTDropIndex indicates an expected call of FTDropIndex.
func (mr *MockClientMockRecorder) FTDropIndex(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDropIndex", reflect.TypeOf((*MockClient)(nil).FTDropIndex), ctx, index)
}

// FTDropIndexWithArgs mocks base method.
func (m *MockClient) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDropIndexWithArgs", ctx, index, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTDropIndexWithArgs indicates an expected call of FTDropIndexWithArgs.
func (mr *MockClientMockRecorder) FTDropIndexWithArgs(ctx, index, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDropIndexWithArgs", reflect.TypeOf((*MockClient)(nil).FTDropIndexWithArgs), ctx, index, options)
}

// FTExplain mocks base method.
func (m *MockClient) FTExplain(ctx context.Context, index, query string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTExplain", ctx, index, query)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FTExplain indicates an expected call of FTExplain.
func (mr *MockClientMockRecorder) FTExplain(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTExplain", reflect.TypeOf((*MockClient)(nil).FTExplain), ctx, index, query)
}

// FTExplainWithArgs mocks base method.
func (m *MockClient) FTExplainWithArgs(ctx context.Context, index, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTExplainWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FTExplainWithArgs indicates an expected call of FTExplainWithArgs.
func (mr *MockClientMockRecorder) FTExplainWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTExplainWithArgs", reflect.TypeOf((*MockClient)(nil).FTExplainWithArgs), ctx, index, query, options)
}

// FTInfo mocks base method.
func (m *MockClient) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTInfo", ctx, index)
	ret0, _ := ret[0].(*redis.FTInfoCmd)
	return ret0
}

// FTInfo indicates an expected call of FTInfo.
func (mr *MockClientMockRecorder) FTInfo(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTInfo", reflect.TypeOf((*MockClient)(nil).FTInfo), ctx, index)
}

// FTSearch mocks base method.
func (m *MockClient) FTSearch(ctx context.Context, index, query string) *redis.FTSearchCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSearch", ctx, index, query)
	ret0, _ := ret[0].(*redis.FTSearchCmd)
	return ret0
}

// FTSearch indicates an expected call of FTSearch.
func (mr *MockClientMockRecorder) FTSearch(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSearch", reflect.TypeOf((*MockClient)(nil).FTSearch), ctx, index, query)
}

// FTSearchWithArgs mocks base method.
func (m *MockClient) FTSearchWithArgs(ctx context.Context, index, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSearchWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.FTSearchCmd)
	return ret0
}

// FTSearchWithArgs indicates an expected call of FTSearchWithArgs.
func (mr *MockClientMockRecorder) FTSearchWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSearchWithArgs", reflect.TypeOf((*MockClient)(nil).FTSearchWithArgs), ctx, index, query, options)
}

// FTSpellCheck mocks base method.
func (m *MockClient) FTSpellCheck(ctx context.Context, index, query string) *redis.FTSpellCheckCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSpellCheck", ctx, index, query)
	ret0, _ := ret[0].(*redis.FTSpellCheckCmd)
	return ret0
}

// FTSpellCheck indicates an expected call of FTSpellCheck.
func (mr *MockClientMockRecorder) FTSpellCheck(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSpellCheck", reflect.TypeOf((*MockClient)(nil).FTSpellCheck), ctx, index, query)
}

// FTSpellCheckWithArgs mocks base method.
func (m *MockClient) FTSpellCheckWithArgs(ctx context.Context, index, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSpellCheckWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.FTSpellCheckCmd)
	return ret0
}

// FTSpellCheckWithArgs indicates an expected call of FTSpellCheckWithArgs.
func (mr *MockClientMockRecorder) FTSpellCheckWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSpellCheckWithArgs", reflect.TypeOf((*MockClient)(nil).FTSpellCheckWithArgs), ctx, index, query, options)
}

// FTSynDump mocks base method.
func (m *MockClient) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynDump", ctx, index)
	ret0, _ := ret[0].(*redis.FTSynDumpCmd)
	return ret0
}

// FTSynDump indicates an expected call of FTSynDump.
func (mr *MockClientMockRecorder) FTSynDump(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynDump", reflect.TypeOf((*MockClient)(nil).FTSynDump), ctx, index)
}

// FTSynUpdate mocks base method.
func (m *MockClient) FTSynUpdate(ctx context.Context, index string, synGroupId any, terms []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynUpdate", ctx, index, synGroupId, terms)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTSynUpdate indicates an expected call of FTSynUpdate.
func (mr *MockClientMockRecorder) FTSynUpdate(ctx, index, synGroupId, terms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynUpdate", reflect.TypeOf((*MockClient)(nil).FTSynUpdate), ctx, index, synGroupId, terms)
}

// FTSynUpdateWithArgs mocks base method.
func (m *MockClient) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId any, options *redis.FTSynUpdateOptions, terms []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynUpdateWithArgs", ctx, index, synGroupId, options, terms)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTSynUpdateWithArgs indicates an expected call of FTSynUpdateWithArgs.
func (mr *MockClientMockRecorder) FTSynUpdateWithArgs(ctx, index, synGroupId, options, terms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynUpdateWithArgs", reflect.TypeOf((*MockClient)(nil).FTSynUpdateWithArgs), ctx, index, synGroupId, options, terms)
}

// FTTagVals mocks base method.
func (m *MockClient) FTTagVals(ctx context.Context, index, field string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTTagVals", ctx, index, field)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FTTagVals indicates an expected call of FTTagVals.
func (mr *MockClientMockRecorder) FTTagVals(ctx, index, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTTagVals", reflect.TypeOf((*MockClient)(nil).FTTagVals), ctx, index, field)
}

// FT_List mocks base method.
func (m *MockClient) FT_List(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FT_List", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FT_List indicates an expected call of FT_List.
func (mr *MockClientMockRecorder) FT_List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FT_List", reflect.TypeOf((*MockClient)(nil).FT_List), ctx)
}

// FlushAll mocks base method.
func (m *MockClient) FlushAll(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockClientMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockClient)(nil).FlushAll), ctx)
}

// FlushAllAsync mocks base method.
func (m *MockClient) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllAsync", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAllAsync indicates an expected call of FlushAllAsync.
func (mr *MockClientMockRecorder) FlushAllAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllAsync", reflect.TypeOf((*MockClient)(nil).FlushAllAsync), ctx)
}

// FlushDB mocks base method.
func (m *MockClient) FlushDB(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDB", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDB indicates an expected call of FlushDB.
func (mr *MockClientMockRecorder) FlushDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDB", reflect.TypeOf((*MockClient)(nil).FlushDB), ctx)
}

// FlushDBAsync mocks base method.
func (m *MockClient) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDBAsync", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDBAsync indicates an expected call of FlushDBAsync.
func (mr *MockClientMockRecorder) FlushDBAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDBAsync", reflect.TypeOf((*MockClient)(nil).FlushDBAsync), ctx)
}

// FunctionDelete mocks base method.
func (m *MockClient) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionDelete", ctx, libName)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionDelete indicates an expected call of FunctionDelete.
func (mr *MockClientMockRecorder) FunctionDelete(ctx, libName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionDelete", reflect.TypeOf((*MockClient)(nil).FunctionDelete), ctx, libName)
}

// FunctionDump mocks base method.
func (m *MockClient) FunctionDump(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionDump", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionDump indicates an expected call of FunctionDump.
func (mr *MockClientMockRecorder) FunctionDump(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionDump", reflect.TypeOf((*MockClient)(nil).FunctionDump), ctx)
}

// FunctionFlush mocks base method.
func (m *MockClient) FunctionFlush(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionFlush", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionFlush indicates an expected call of FunctionFlush.
func (mr *MockClientMockRecorder) FunctionFlush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionFlush", reflect.TypeOf((*MockClient)(nil).FunctionFlush), ctx)
}

// FunctionFlushAsync mocks base method.
func (m *MockClient) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionFlushAsync", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionFlushAsync indicates an expected call of FunctionFlushAsync.
func (mr *MockClientMockRecorder) FunctionFlushAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionFlushAsync", reflect.TypeOf((*MockClient)(nil).FunctionFlushAsync), ctx)
}

// FunctionKill mocks base method.
func (m *MockClient) FunctionKill(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionKill", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionKill indicates an expected call of FunctionKill.
func (mr *MockClientMockRecorder) FunctionKill(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionKill", reflect.TypeOf((*MockClient)(nil).FunctionKill), ctx)
}

// FunctionList mocks base method.
func (m *MockClient) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionList", ctx, q)
	ret0, _ := ret[0].(*redis.FunctionListCmd)
	return ret0
}

// FunctionList indicates an expected call of FunctionList.
func (mr *MockClientMockRecorder) FunctionList(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionList", reflect.TypeOf((*MockClient)(nil).FunctionList), ctx, q)
}

// FunctionLoad mocks base method.
func (m *MockClient) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionLoad", ctx, code)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionLoad indicates an expected call of FunctionLoad.
func (mr *MockClientMockRecorder) FunctionLoad(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionLoad", reflect.TypeOf((*MockClient)(nil).FunctionLoad), ctx, code)
}

// FunctionLoadReplace mocks base method.
func (m *MockClient) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionLoadReplace", ctx, code)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionLoadReplace indicates an expected call of FunctionLoadReplace.
func (mr *MockClientMockRecorder) FunctionLoadReplace(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionLoadReplace", reflect.TypeOf((*MockClient)(nil).FunctionLoadReplace), ctx, code)
}

// FunctionRestore mocks base method.
func (m *MockClient) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionRestore", ctx, libDump)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionRestore indicates an expected call of FunctionRestore.
func (mr *MockClientMockRecorder) FunctionRestore(ctx, libDump any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionRestore", reflect.TypeOf((*MockClient)(nil).FunctionRestore), ctx, libDump)
}

// FunctionStats mocks base method.
func (m *MockClient) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionStats", ctx)
	ret0, _ := ret[0].(*redis.FunctionStatsCmd)
	return ret0
}

// FunctionStats indicates an expected call of FunctionStats.
func (mr *MockClientMockRecorder) FunctionStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionStats", reflect.TypeOf((*MockClient)(nil).FunctionStats), ctx)
}

// GeoAdd mocks base method.
func (m *MockClient) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range geoLocation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoAdd indicates an expected call of GeoAdd.
func (mr *MockClientMockRecorder) GeoAdd(ctx, key any, geoLocation ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, geoLocation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockClient)(nil).GeoAdd), varargs...)
}

// GeoDist mocks base method.
func (m *MockClient) GeoDist(ctx context.Context, key, member1, member2, unit string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", ctx, key, member1, member2, unit)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// GeoDist indicates an expected call of GeoDist.
func (mr *MockClientMockRecorder) GeoDist(ctx, key, member1, member2, unit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockClient)(nil).GeoDist), ctx, key, member1, member2, unit)
}

// GeoHash mocks base method.
func (m *MockClient) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// GeoHash indicates an expected call of GeoHash.
func (mr *MockClientMockRecorder) GeoHash(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockClient)(nil).GeoHash), varargs...)
}

// GeoPos mocks base method.
func (m *MockClient) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].(*redis.GeoPosCmd)
	return ret0
}

// GeoPos indicates an expected call of GeoPos.
func (mr *MockClientMockRecorder) GeoPos(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockClient)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method.
func (m *MockClient) GeoRadius(ctx context.Context, key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", ctx, key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadius indicates an expected call of GeoRadius.
func (mr *MockClientMockRecorder) GeoRadius(ctx, key, longitude, latitude, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockClient)(nil).GeoRadius), ctx, key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method.
func (m *MockClient) GeoRadiusByMember(ctx context.Context, key, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", ctx, key, member, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember.
func (mr *MockClientMockRecorder) GeoRadiusByMember(ctx, key, member, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockClient)(nil).GeoRadiusByMember), ctx, key, member, query)
}

// GeoRadiusByMemberStore mocks base method.
func (m *MockClient) GeoRadiusByMemberStore(ctx context.Context, key, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMemberStore", ctx, key, member, query)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoRadiusByMemberStore indicates an expected call of GeoRadiusByMemberStore.
func (mr *MockClientMockRecorder) GeoRadiusByMemberStore(ctx, key, member, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMemberStore", reflect.TypeOf((*MockClient)(nil).GeoRadiusByMemberStore), ctx, key, member, query)
}

// GeoRadiusStore mocks base method.
func (m *MockClient) GeoRadiusStore(ctx context.Context, key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusStore", ctx, key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoRadiusStore indicates an expected call of GeoRadiusStore.
func (mr *MockClientMockRecorder) GeoRadiusStore(ctx, key, longitude, latitude, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusStore", reflect.TypeOf((*MockClient)(nil).GeoRadiusStore), ctx, key, longitude, latitude, query)
}

// GeoSearch mocks base method.
func (m *MockClient) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearch", ctx, key, q)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// GeoSearch indicates an expected call of GeoSearch.
func (mr *MockClientMockRecorder) GeoSearch(ctx, key, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearch", reflect.TypeOf((*MockClient)(nil).GeoSearch), ctx, key, q)
}

// GeoSearchLocation mocks base method.
func (m *MockClient) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearchLocation", ctx, key, q)
	ret0, _ := ret[0].(*redis.GeoSearchLocationCmd)
	return ret0
}

// GeoSearchLocation indicates an expected call of GeoSearchLocation.
func (mr *MockClientMockRecorder) GeoSearchLocation(ctx, key, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearchLocation", reflect.TypeOf((*MockClient)(nil).GeoSearchLocation), ctx, key, q)
}

// GeoSearchStore mocks base method.
func (m *MockClient) GeoSearchStore(ctx context.Context, key, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearchStore", ctx, key, store, q)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoSearchStore indicates an expected call of GeoSearchStore.
func (mr *MockClientMockRecorder) GeoSearchStore(ctx, key, store, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearchStore", reflect.TypeOf((*MockClient)(nil).GeoSearchStore), ctx, key, store, q)
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, key)
}

// GetBit mocks base method.
func (m *MockClient) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", ctx, key, offset)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GetBit indicates an expected call of GetBit.
func (mr *MockClientMockRecorder) GetBit(ctx, key, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockClient)(nil).GetBit), ctx, key, offset)
}

// GetDel mocks base method.
func (m *MockClient) GetDel(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDel", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetDel indicates an expected call of GetDel.
func (mr *MockClientMockRecorder) GetDel(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDel", reflect.TypeOf((*MockClient)(nil).GetDel), ctx, key)
}

// GetEx mocks base method.
func (m *MockClient) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEx", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetEx indicates an expected call of GetEx.
func (mr *MockClientMockRecorder) GetEx(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEx", reflect.TypeOf((*MockClient)(nil).GetEx), ctx, key, expiration)
}

// GetRange mocks base method.
func (m *MockClient) GetRange(ctx context.Context, key string, start, end int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", ctx, key, start, end)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetRange indicates an expected call of GetRange.
func (mr *MockClientMockRecorder) GetRange(ctx, key, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockClient)(nil).GetRange), ctx, key, start, end)
}

// GetSet mocks base method.
func (m *MockClient) GetSet(ctx context.Context, key string, value any) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", ctx, key, value)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetSet indicates an expected call of GetSet.
func (mr *MockClientMockRecorder) GetSet(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockClient)(nil).GetSet), ctx, key, value)
}

// HDel mocks base method.
func (m *MockClient) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockClientMockRecorder) HDel(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockClient)(nil).HDel), varargs...)
}

// HExists mocks base method.
func (m *MockClient) HExists(ctx context.Context, key, field string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", ctx, key, field)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HExists indicates an expected call of HExists.
func (mr *MockClientMockRecorder) HExists(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockClient)(nil).HExists), ctx, key, field)
}

// HExpire mocks base method.
func (m *MockClient) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpire", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpire indicates an expected call of HExpire.
func (mr *MockClientMockRecorder) HExpire(ctx, key, expiration any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpire", reflect.TypeOf((*MockClient)(nil).HExpire), varargs...)
}

// HExpireAt mocks base method.
func (m *MockClient) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireAt", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireAt indicates an expected call of HExpireAt.
func (mr *MockClientMockRecorder) HExpireAt(ctx, key, tm any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireAt", reflect.TypeOf((*MockClient)(nil).HExpireAt), varargs...)
}

// HExpireAtWithArgs mocks base method.
func (m *MockClient) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireAtWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireAtWithArgs indicates an expected call of HExpireAtWithArgs.
func (mr *MockClientMockRecorder) HExpireAtWithArgs(ctx, key, tm, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireAtWithArgs", reflect.TypeOf((*MockClient)(nil).HExpireAtWithArgs), varargs...)
}

// HExpireTime mocks base method.
func (m *MockClient) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireTime", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireTime indicates an expected call of HExpireTime.
func (mr *MockClientMockRecorder) HExpireTime(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireTime", reflect.TypeOf((*MockClient)(nil).HExpireTime), varargs...)
}

// HExpireWithArgs mocks base method.
func (m *MockClient) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireWithArgs indicates an expected call of HExpireWithArgs.
func (mr *MockClientMockRecorder) HExpireWithArgs(ctx, key, expiration, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireWithArgs", reflect.TypeOf((*MockClient)(nil).HExpireWithArgs), varargs...)
}

// HGet mocks base method.
func (m *MockClient) HGet(ctx context.Context, key, field string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// HGet indicates an expected call of HGet.
func (mr *MockClientMockRecorder) HGet(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockClient)(nil).HGet), ctx, key, field)
}

// HGetAll mocks base method.
func (m *MockClient) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringStringCmd)
	return ret0
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockClientMockRecorder) HGetAll(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockClient)(nil).HGetAll), ctx, key)
}

// HGetDel mocks base method.
func (m *MockClient) HGetDel(ctx context.Context, key string, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetDel", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetDel indicates an expected call of HGetDel.
func (mr *MockClientMockRecorder) HGetDel(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetDel", reflect.TypeOf((*MockClient)(nil).HGetDel), varargs...)
}

// HGetEX mocks base method.
func (m *MockClient) HGetEX(ctx context.Context, key string, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetEX", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetEX indicates an expected call of HGetEX.
func (mr *MockClientMockRecorder) HGetEX(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetEX", reflect.TypeOf((*MockClient)(nil).HGetEX), varargs...)
}

// HGetEXWithArgs mocks base method.
func (m *MockClient) HGetEXWithArgs(ctx context.Context, key string, options *redis.HGetEXOptions, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetEXWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetEXWithArgs indicates an expected call of HGetEXWithArgs.
func (mr *MockClientMockRecorder) HGetEXWithArgs(ctx, key, options any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetEXWithArgs", reflect.TypeOf((*MockClient)(nil).HGetEXWithArgs), varargs...)
}

// HIncrBy mocks base method.
func (m *MockClient) HIncrBy(ctx context.Context, key, field string, incr int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", ctx, key, field, incr)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HIncrBy indicates an expected call of HIncrBy.
func (mr *MockClientMockRecorder) HIncrBy(ctx, key, field, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockClient)(nil).HIncrBy), ctx, key, field, incr)
}

// HIncrByFloat mocks base method.
func (m *MockClient) HIncrByFloat(ctx context.Context, key, field string, incr float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", ctx, key, field, incr)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// HIncrByFloat indicates an expected call of HIncrByFloat.
func (mr *MockClientMockRecorder) HIncrByFloat(ctx, key, field, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockClient)(nil).HIncrByFloat), ctx, key, field, incr)
}

// HKeys mocks base method.
func (m *MockClient) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HKeys indicates an expected call of HKeys.
func (mr *MockClientMockRecorder) HKeys(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockClient)(nil).HKeys), ctx, key)
}

// HLen mocks base method.
func (m *MockClient) HLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HLen indicates an expected call of HLen.
func (mr *MockClientMockRecorder) HLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockClient)(nil).HLen), ctx, key)
}

// HMGet mocks base method.
func (m *MockClient) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// HMGet indicates an expected call of HMGet.
func (mr *MockClientMockRecorder) HMGet(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockClient)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockClient) HMSet(ctx context.Context, key string, values ...any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMSet", varargs...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockClientMockRecorder) HMSet(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockClient)(nil).HMSet), varargs...)
}

// HPExpire mocks base method.
func (m *MockClient) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpire", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpire indicates an expected call of HPExpire.
func (mr *MockClientMockRecorder) HPExpire(ctx, key, expiration any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpire", reflect.TypeOf((*MockClient)(nil).HPExpire), varargs...)
}

// HPExpireAt mocks base method.
func (m *MockClient) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireAt", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireAt indicates an expected call of HPExpireAt.
func (mr *MockClientMockRecorder) HPExpireAt(ctx, key, tm any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireAt", reflect.TypeOf((*MockClient)(nil).HPExpireAt), varargs...)
}

// HPExpireAtWithArgs mocks base method.
func (m *MockClient) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireAtWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireAtWithArgs indicates an expected call of HPExpireAtWithArgs.
func (mr *MockClientMockRecorder) HPExpireAtWithArgs(ctx, key, tm, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireAtWithArgs", reflect.TypeOf((*MockClient)(nil).HPExpireAtWithArgs), varargs...)
}

// HPExpireTime mocks base method.
func (m *MockClient) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireTime", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireTime indicates an expected call of HPExpireTime.
func (mr *MockClientMockRecorder) HPExpireTime(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireTime", reflect.TypeOf((*MockClient)(nil).HPExpireTime), varargs...)
}

// HPExpireWithArgs mocks base method.
func (m *MockClient) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireWithArgs indicates an expected call of HPExpireWithArgs.
func (mr *MockClientMockRecorder) HPExpireWithArgs(ctx, key, expiration, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireWithArgs", reflect.TypeOf((*MockClient)(nil).HPExpireWithArgs), varargs...)
}

// HPTTL mocks base method.
func (m *MockClient) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPTTL", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPTTL indicates an expected call of HPTTL.
func (mr *MockClientMockRecorder) HPTTL(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPTTL", reflect.TypeOf((*MockClient)(nil).HPTTL), varargs...)
}

// HPersist mocks base method.
func (m *MockClient) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPersist", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPersist indicates an expected call of HPersist.
func (mr *MockClientMockRecorder) HPersist(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPersist", reflect.TypeOf((*MockClient)(nil).HPersist), varargs...)
}

// HRandField mocks base method.
func (m *MockClient) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HRandField", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HRandField indicates an expected call of HRandField.
func (mr *MockClientMockRecorder) HRandField(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HRandField", reflect.TypeOf((*MockClient)(nil).HRandField), ctx, key, count)
}

// HRandFieldWithValues mocks base method.
func (m *MockClient) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HRandFieldWithValues", ctx, key, count)
	ret0, _ := ret[0].(*redis.KeyValueSliceCmd)
	return ret0
}

// HRandFieldWithValues indicates an expected call of HRandFieldWithValues.
func (mr *MockClientMockRecorder) HRandFieldWithValues(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HRandFieldWithValues", reflect.TypeOf((*MockClient)(nil).HRandFieldWithValues), ctx, key, count)
}

// HScan mocks base method.
func (m *MockClient) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// HScan indicates an expected call of HScan.
func (mr *MockClientMockRecorder) HScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockClient)(nil).HScan), ctx, key, cursor, match, count)
}

// HScanNoValues mocks base method.
func (m *MockClient) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScanNoValues", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// HScanNoValues indicates an expected call of HScanNoValues.
func (mr *MockClientMockRecorder) HScanNoValues(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScanNoValues", reflect.TypeOf((*MockClient)(nil).HScanNoValues), ctx, key, cursor, match, count)
}

// HSet mocks base method.
func (m *MockClient) HSet(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSet", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockClientMockRecorder) HSet(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockClient)(nil).HSet), varargs...)
}

// HSetEX mocks base method.
func (m *MockClient) HSetEX(ctx context.Context, key string, fieldsAndValues ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fieldsAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSetEX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSetEX indicates an expected call of HSetEX.
func (mr *MockClientMockRecorder) HSetEX(ctx, key any, fieldsAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fieldsAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetEX", reflect.TypeOf((*MockClient)(nil).HSetEX), varargs...)
}

// HSetEXWithArgs mocks base method.
func (m *MockClient) HSetEXWithArgs(ctx context.Context, key string, options *redis.HSetEXOptions, fieldsAndValues ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range fieldsAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSetEXWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSetEXWithArgs indicates an expected call of HSetEXWithArgs.
func (mr *MockClientMockRecorder) HSetEXWithArgs(ctx, key, options any, fieldsAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, fieldsAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetEXWithArgs", reflect.TypeOf((*MockClient)(nil).HSetEXWithArgs), varargs...)
}

// HSetNX mocks base method.
func (m *MockClient) HSetNX(ctx context.Context, key, field string, value any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", ctx, key, field, value)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HSetNX indicates an expected call of HSetNX.
func (mr *MockClientMockRecorder) HSetNX(ctx, key, field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockClient)(nil).HSetNX), ctx, key, field, value)
}

// HStrLen mocks base method.
func (m *MockClient) HStrLen(ctx context.Context, key, field string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HStrLen", ctx, key, field)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HStrLen indicates an expected call of HStrLen.
func (mr *MockClientMockRecorder) HStrLen(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HStrLen", reflect.TypeOf((*MockClient)(nil).HStrLen), ctx, key, field)
}

// HTTL mocks base method.
func (m *MockClient) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HTTL", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HTTL indicates an expected call of HTTL.
func (mr *MockClientMockRecorder) HTTL(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTL", reflect.TypeOf((*MockClient)(nil).HTTL), varargs...)
}

// HVals mocks base method.
func (m *MockClient) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HVals indicates an expected call of HVals.
func (mr *MockClientMockRecorder) HVals(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockClient)(nil).HVals), ctx, key)
}

// Incr mocks base method.
func (m *MockClient) Incr(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockClientMockRecorder) Incr(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockClient)(nil).Incr), ctx, key)
}

// IncrBy mocks base method.
func (m *MockClient) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", ctx, key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockClientMockRecorder) IncrBy(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockClient)(nil).IncrBy), ctx, key, value)
}

// IncrByFloat mocks base method.
func (m *MockClient) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", ctx, key, value)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// IncrByFloat indicates an expected call of IncrByFloat.
func (mr *MockClientMockRecorder) IncrByFloat(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockClient)(nil).IncrByFloat), ctx, key, value)
}

// Info mocks base method.
func (m *MockClient) Info(ctx context.Context, section ...string) *redis.StringCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range section {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockClientMockRecorder) Info(ctx any, section ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, section...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info), varargs...)
}

// JSONArrAppend mocks base method.
func (m *MockClient) JSONArrAppend(ctx context.Context, key, path string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrAppend", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrAppend indicates an expected call of JSONArrAppend.
func (mr *MockClientMockRecorder) JSONArrAppend(ctx, key, path any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrAppend", reflect.TypeOf((*MockClient)(nil).JSONArrAppend), varargs...)
}

// JSONArrIndex mocks base method.
func (m *MockClient) JSONArrIndex(ctx context.Context, key, path string, value ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrIndex", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrIndex indicates an expected call of JSONArrIndex.
func (mr *MockClientMockRecorder) JSONArrIndex(ctx, key, path any, value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrIndex", reflect.TypeOf((*MockClient)(nil).JSONArrIndex), varargs...)
}

// JSONArrIndexWithArgs mocks base method.
func (m *MockClient) JSONArrIndexWithArgs(ctx context.Context, key, path string, options *redis.JSONArrIndexArgs, value ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path, options}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrIndexWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrIndexWithArgs indicates an expected call of JSONArrIndexWithArgs.
func (mr *MockClientMockRecorder) JSONArrIndexWithArgs(ctx, key, path, options any, value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path, options}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrIndexWithArgs", reflect.TypeOf((*MockClient)(nil).JSONArrIndexWithArgs), varargs...)
}

// JSONArrInsert mocks base method.
func (m *MockClient) JSONArrInsert(ctx context.Context, key, path string, index int64, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path, index}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrInsert", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrInsert indicates an expected call of JSONArrInsert.
func (mr *MockClientMockRecorder) JSONArrInsert(ctx, key, path, index any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path, index}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrInsert", reflect.TypeOf((*MockClient)(nil).JSONArrInsert), varargs...)
}

// JSONArrLen mocks base method.
func (m *MockClient) JSONArrLen(ctx context.Context, key, path string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrLen indicates an expected call of JSONArrLen.
func (mr *MockClientMockRecorder) JSONArrLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrLen", reflect.TypeOf((*MockClient)(nil).JSONArrLen), ctx, key, path)
}

// JSONArrPop mocks base method.
func (m *MockClient) JSONArrPop(ctx context.Context, key, path string, index int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrPop", ctx, key, path, index)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// JSONArrPop indicates an expected call of JSONArrPop.
func (mr *MockClientMockRecorder) JSONArrPop(ctx, key, path, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrPop", reflect.TypeOf((*MockClient)(nil).JSONArrPop), ctx, key, path, index)
}

// JSONArrTrim mocks base method.
func (m *MockClient) JSONArrTrim(ctx context.Context, key, path string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrTrim", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrTrim indicates an expected call of JSONArrTrim.
func (mr *MockClientMockRecorder) JSONArrTrim(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrTrim", reflect.TypeOf((*MockClient)(nil).JSONArrTrim), ctx, key, path)
}

// JSONArrTrimWithArgs mocks base method.
func (m *MockClient) JSONArrTrimWithArgs(ctx context.Context, key, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrTrimWithArgs", ctx, key, path, options)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrTrimWithArgs indicates an expected call of JSONArrTrimWithArgs.
func (mr *MockClientMockRecorder) JSONArrTrimWithArgs(ctx, key, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrTrimWithArgs", reflect.TypeOf((*MockClient)(nil).JSONArrTrimWithArgs), ctx, key, path, options)
}

// JSONClear mocks base method.
func (m *MockClient) JSONClear(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONClear", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONClear indicates an expected call of JSONClear.
func (mr *MockClientMockRecorder) JSONClear(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONClear", reflect.TypeOf((*MockClient)(nil).JSONClear), ctx, key, path)
}

// JSONDebugMemory mocks base method.
func (m *MockClient) JSONDebugMemory(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONDebugMemory", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONDebugMemory indicates an expected call of JSONDebugMemory.
func (mr *MockClientMockRecorder) JSONDebugMemory(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONDebugMemory", reflect.TypeOf((*MockClient)(nil).JSONDebugMemory), ctx, key, path)
}

// JSONDel mocks base method.
func (m *MockClient) JSONDel(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONDel", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONDel indicates an expected call of JSONDel.
func (mr *MockClientMockRecorder) JSONDel(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONDel", reflect.TypeOf((*MockClient)(nil).JSONDel), ctx, key, path)
}

// JSONForget mocks base method.
func (m *MockClient) JSONForget(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONForget", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONForget indicates an expected call of JSONForget.
func (mr *MockClientMockRecorder) JSONForget(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONForget", reflect.TypeOf((*MockClient)(nil).JSONForget), ctx, key, path)
}

// JSONGet mocks base method.
func (m *MockClient) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONGet", varargs...)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONGet indicates an expected call of JSONGet.
func (mr *MockClientMockRecorder) JSONGet(ctx, key any, paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, paths...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONGet", reflect.TypeOf((*MockClient)(nil).JSONGet), varargs...)
}

// JSONGetWithArgs mocks base method.
func (m *MockClient) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONGetWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONGetWithArgs indicates an expected call of JSONGetWithArgs.
func (mr *MockClientMockRecorder) JSONGetWithArgs(ctx, key, options any, paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, paths...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONGetWithArgs", reflect.TypeOf((*MockClient)(nil).JSONGetWithArgs), varargs...)
}

// JSONMGet mocks base method.
func (m *MockClient) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, path}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONMGet", varargs...)
	ret0, _ := ret[0].(*redis.JSONSliceCmd)
	return ret0
}

// JSONMGet indicates an expected call of JSONMGet.
func (mr *MockClientMockRecorder) JSONMGet(ctx, path any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, path}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMGet", reflect.TypeOf((*MockClient)(nil).JSONMGet), varargs...)
}

// JSONMSet mocks base method.
func (m *MockClient) JSONMSet(ctx context.Context, params ...any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONMSet", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMSet indicates an expected call of JSONMSet.
func (mr *MockClientMockRecorder) JSONMSet(ctx any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMSet", reflect.TypeOf((*MockClient)(nil).JSONMSet), varargs...)
}

// JSONMSetArgs mocks base method.
func (m *MockClient) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMSetArgs", ctx, docs)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMSetArgs indicates an expected call of JSONMSetArgs.
func (mr *MockClientMockRecorder) JSONMSetArgs(ctx, docs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMSetArgs", reflect.TypeOf((*MockClient)(nil).JSONMSetArgs), ctx, docs)
}

// JSONMerge mocks base method.
func (m *MockClient) JSONMerge(ctx context.Context, key, path, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMerge", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMerge indicates an expected call of JSONMerge.
func (mr *MockClientMockRecorder) JSONMerge(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMerge", reflect.TypeOf((*MockClient)(nil).JSONMerge), ctx, key, path, value)
}

// JSONNumIncrBy mocks base method.
func (m *MockClient) JSONNumIncrBy(ctx context.Context, key, path string, value float64) *redis.JSONCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONNumIncrBy", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONNumIncrBy indicates an expected call of JSONNumIncrBy.
func (mr *MockClientMockRecorder) JSONNumIncrBy(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONNumIncrBy", reflect.TypeOf((*MockClient)(nil).JSONNumIncrBy), ctx, key, path, value)
}

// JSONObjKeys mocks base method.
func (m *MockClient) JSONObjKeys(ctx context.Context, key, path string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONObjKeys", ctx, key, path)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// JSONObjKeys indicates an expected call of JSONObjKeys.
func (mr *MockClientMockRecorder) JSONObjKeys(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONObjKeys", reflect.TypeOf((*MockClient)(nil).JSONObjKeys), ctx, key, path)
}

// JSONObjLen mocks base method.
func (m *MockClient) JSONObjLen(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONObjLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONObjLen indicates an expected call of JSONObjLen.
func (mr *MockClientMockRecorder) JSONObjLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONObjLen", reflect.TypeOf((*MockClient)(nil).JSONObjLen), ctx, key, path)
}

// JSONSet mocks base method.
func (m *MockClient) JSONSet(ctx context.Context, key, path string, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONSet", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONSet indicates an expected call of JSONSet.
func (mr *MockClientMockRecorder) JSONSet(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONSet", reflect.TypeOf((*MockClient)(nil).JSONSet), ctx, key, path, value)
}

// JSONSetMode mocks base method.
func (m *MockClient) JSONSetMode(ctx context.Context, key, path string, value any, mode string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONSetMode", ctx, key, path, value, mode)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONSetMode indicates an expected call of JSONSetMode.
func (mr *MockClientMockRecorder) JSONSetMode(ctx, key, path, value, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONSetMode", reflect.TypeOf((*MockClient)(nil).JSONSetMode), ctx, key, path, value, mode)
}

// JSONStrAppend mocks base method.
func (m *MockClient) JSONStrAppend(ctx context.Context, key, path, value string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONStrAppend", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONStrAppend indicates an expected call of JSONStrAppend.
func (mr *MockClientMockRecorder) JSONStrAppend(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONStrAppend", reflect.TypeOf((*MockClient)(nil).JSONStrAppend), ctx, key, path, value)
}

// JSONStrLen mocks base method.
func (m *MockClient) JSONStrLen(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONStrLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONStrLen indicates an expected call of JSONStrLen.
func (mr *MockClientMockRecorder) JSONStrLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONStrLen", reflect.TypeOf((*MockClient)(nil).JSONStrLen), ctx, key, path)
}

// JSONToggle mocks base method.
func (m *MockClient) JSONToggle(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONToggle", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONToggle indicates an expected call of JSONToggle.
func (mr *MockClientMockRecorder) JSONToggle(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONToggle", reflect.TypeOf((*MockClient)(nil).JSONToggle), ctx, key, path)
}

// JSONType mocks base method.
func (m *MockClient) JSONType(ctx context.Context, key, path string) *redis.JSONSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONType", ctx, key, path)
	ret0, _ := ret[0].(*redis.JSONSliceCmd)
	return ret0
}

// JSONType indicates an expected call of JSONType.
func (mr *MockClientMockRecorder) JSONType(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONType", reflect.TypeOf((*MockClient)(nil).JSONType), ctx, key, path)
}

// Keys mocks base method.
func (m *MockClient) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockClientMockRecorder) Keys(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockClient)(nil).Keys), ctx, pattern)
}

// LCS mocks base method.
func (m *MockClient) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LCS", ctx, q)
	ret0, _ := ret[0].(*redis.LCSCmd)
	return ret0
}

// LCS indicates an expected call of LCS.
func (mr *MockClientMockRecorder) LCS(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LCS", reflect.TypeOf((*MockClient)(nil).LCS), ctx, q)
}

// LIndex mocks base method.
func (m *MockClient) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", ctx, key, index)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LIndex indicates an expected call of LIndex.
func (mr *MockClientMockRecorder) LIndex(ctx, key, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockClient)(nil).LIndex), ctx, key, index)
}

// LInsert mocks base method.
func (m *MockClient) LInsert(ctx context.Context, key, op string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsert", ctx, key, op, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsert indicates an expected call of LInsert.
func (mr *MockClientMockRecorder) LInsert(ctx, key, op, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsert", reflect.TypeOf((*MockClient)(nil).LInsert), ctx, key, op, pivot, value)
}

// LInsertAfter mocks base method.
func (m *MockClient) LInsertAfter(ctx context.Context, key string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertAfter", ctx, key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertAfter indicates an expected call of LInsertAfter.
func (mr *MockClientMockRecorder) LInsertAfter(ctx, key, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertAfter", reflect.TypeOf((*MockClient)(nil).LInsertAfter), ctx, key, pivot, value)
}

// LInsertBefore mocks base method.
func (m *MockClient) LInsertBefore(ctx context.Context, key string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertBefore", ctx, key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertBefore indicates an expected call of LInsertBefore.
func (mr *MockClientMockRecorder) LInsertBefore(ctx, key, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertBefore", reflect.TypeOf((*MockClient)(nil).LInsertBefore), ctx, key, pivot, value)
}

// LLen mocks base method.
func (m *MockClient) LLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LLen indicates an expected call of LLen.
func (mr *MockClientMockRecorder) LLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockClient)(nil).LLen), ctx, key)
}

// LMPop mocks base method.
func (m *MockClient) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, direction, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LMPop", varargs...)
	ret0, _ := ret[0].(*redis.KeyValuesCmd)
	return ret0
}

// LMPop indicates an expected call of LMPop.
func (mr *MockClientMockRecorder) LMPop(ctx, direction, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, direction, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LMPop", reflect.TypeOf((*MockClient)(nil).LMPop), varargs...)
}

// LMove mocks base method.
func (m *MockClient) LMove(ctx context.Context, source, destination, srcpos, destpos string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LMove", ctx, source, destination, srcpos, destpos)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LMove indicates an expected call of LMove.
func (mr *MockClientMockRecorder) LMove(ctx, source, destination, srcpos, destpos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LMove", reflect.TypeOf((*MockClient)(nil).LMove), ctx, source, destination, srcpos, destpos)
}

// LPop mocks base method.
func (m *MockClient) LPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LPop indicates an expected call of LPop.
func (mr *MockClientMockRecorder) LPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockClient)(nil).LPop), ctx, key)
}

// LPopCount mocks base method.
func (m *MockClient) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPopCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// LPopCount indicates an expected call of LPopCount.
func (mr *MockClientMockRecorder) LPopCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPopCount", reflect.TypeOf((*MockClient)(nil).LPopCount), ctx, key, count)
}

// LPos mocks base method.
func (m *MockClient) LPos(ctx context.Context, key, value string, args redis.LPosArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPos", ctx, key, value, args)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPos indicates an expected call of LPos.
func (mr *MockClientMockRecorder) LPos(ctx, key, value, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPos", reflect.TypeOf((*MockClient)(nil).LPos), ctx, key, value, args)
}

// LPosCount mocks base method.
func (m *MockClient) LPosCount(ctx context.Context, key, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPosCount", ctx, key, value, count, args)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// LPosCount indicates an expected call of LPosCount.
func (mr *MockClientMockRecorder) LPosCount(ctx, key, value, count, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPosCount", reflect.TypeOf((*MockClient)(nil).LPosCount), ctx, key, value, count, args)
}

// LPush mocks base method.
func (m *MockClient) LPush(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockClientMockRecorder) LPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockClient)(nil).LPush), varargs...)
}

// LPushX mocks base method.
func (m *MockClient) LPushX(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPushX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPushX indicates an expected call of LPushX.
func (mr *MockClientMockRecorder) LPushX(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockClient)(nil).LPushX), varargs...)
}

// LRange mocks base method.
func (m *MockClient) LRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// LRange indicates an expected call of LRange.
func (mr *MockClientMockRecorder) LRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockClient)(nil).LRange), ctx, key, start, stop)
}

// LRem mocks base method.
func (m *MockClient) LRem(ctx context.Context, key string, count int64, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", ctx, key, count, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LRem indicates an expected call of LRem.
func (mr *MockClientMockRecorder) LRem(ctx, key, count, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockClient)(nil).LRem), ctx, key, count, value)
}

// LSet mocks base method.
func (m *MockClient) LSet(ctx context.Context, key string, index int64, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", ctx, key, index, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LSet indicates an expected call of LSet.
func (mr *MockClientMockRecorder) LSet(ctx, key, index, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockClient)(nil).LSet), ctx, key, index, value)
}

// LTrim mocks base method.
func (m *MockClient) LTrim(ctx context.Context, key string, start, stop int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LTrim indicates an expected call of LTrim.
func (mr *MockClientMockRecorder) LTrim(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockClient)(nil).LTrim), ctx, key, start, stop)
}

// LastSave mocks base method.
func (m *MockClient) LastSave(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSave", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LastSave indicates an expected call of LastSave.
func (mr *MockClientMockRecorder) LastSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSave", reflect.TypeOf((*MockClient)(nil).LastSave), ctx)
}

// MGet mocks base method.
func (m *MockClient) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// MGet indicates an expected call of MGet.
func (mr *MockClientMockRecorder) MGet(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockClient)(nil).MGet), varargs...)
}

// MSet mocks base method.
func (m *MockClient) MSet(ctx context.Context, values ...any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockClientMockRecorder) MSet(ctx any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockClient)(nil).MSet), varargs...)
}

// MSetNX mocks base method.
func (m *MockClient) MSetNX(ctx context.Context, values ...any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSetNX", varargs...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// MSetNX indicates an expected call of MSetNX.
func (mr *MockClientMockRecorder) MSetNX(ctx any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetNX", reflect.TypeOf((*MockClient)(nil).MSetNX), varargs...)
}

// MemoryUsage mocks base method.
func (m *MockClient) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range samples {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryUsage", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// MemoryUsage indicates an expected call of MemoryUsage.
func (mr *MockClientMockRecorder) MemoryUsage(ctx, key any, samples ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, samples...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUsage", reflect.TypeOf((*MockClient)(nil).MemoryUsage), varargs...)
}

// Migrate mocks base method.
func (m *MockClient) Migrate(ctx context.Context, host, port, key string, db int, timeout time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, host, port, key, db, timeout)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockClientMockRecorder) Migrate(ctx, host, port, key, db, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockClient)(nil).Migrate), ctx, host, port, key, db, timeout)
}

// ModuleLoadex mocks base method.
func (m *MockClient) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleLoadex", ctx, conf)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ModuleLoadex indicates an expected call of ModuleLoadex.
func (mr *MockClientMockRecorder) ModuleLoadex(ctx, conf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleLoadex", reflect.TypeOf((*MockClient)(nil).ModuleLoadex), ctx, conf)
}

// Move mocks base method.
func (m *MockClient) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, key, db)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockClientMockRecorder) Move(ctx, key, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockClient)(nil).Move), ctx, key, db)
}

// ObjectEncoding mocks base method.
func (m *MockClient) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEncoding", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ObjectEncoding indicates an expected call of ObjectEncoding.
func (mr *MockClientMockRecorder) ObjectEncoding(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEncoding", reflect.TypeOf((*MockClient)(nil).ObjectEncoding), ctx, key)
}

// ObjectFreq mocks base method.
func (m *MockClient) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectFreq", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ObjectFreq indicates an expected call of ObjectFreq.
func (mr *MockClientMockRecorder) ObjectFreq(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectFreq", reflect.TypeOf((*MockClient)(nil).ObjectFreq), ctx, key)
}

// ObjectIdleTime mocks base method.
func (m *MockClient) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectIdleTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// ObjectIdleTime indicates an expected call of ObjectIdleTime.
func (mr *MockClientMockRecorder) ObjectIdleTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectIdleTime", reflect.TypeOf((*MockClient)(nil).ObjectIdleTime), ctx, key)
}

// ObjectRefCount mocks base method.
func (m *MockClient) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRefCount", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ObjectRefCount indicates an expected call of ObjectRefCount.
func (mr *MockClientMockRecorder) ObjectRefCount(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRefCount", reflect.TypeOf((*MockClient)(nil).ObjectRefCount), ctx, key)
}

// PExpire mocks base method.
func (m *MockClient) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpire", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpire indicates an expected call of PExpire.
func (mr *MockClientMockRecorder) PExpire(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpire", reflect.TypeOf((*MockClient)(nil).PExpire), ctx, key, expiration)
}

// PExpireAt mocks base method.
func (m *MockClient) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireAt", ctx, key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpireAt indicates an expected call of PExpireAt.
func (mr *MockClientMockRecorder) PExpireAt(ctx, key, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireAt", reflect.TypeOf((*MockClient)(nil).PExpireAt), ctx, key, tm)
}

// PExpireTime mocks base method.
func (m *MockClient) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// PExpireTime indicates an expected call of PExpireTime.
func (mr *MockClientMockRecorder) PExpireTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireTime", reflect.TypeOf((*MockClient)(nil).PExpireTime), ctx, key)
}

// PFAdd mocks base method.
func (m *MockClient) PFAdd(ctx context.Context, key string, els ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range els {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFAdd indicates an expected call of PFAdd.
func (mr *MockClientMockRecorder) PFAdd(ctx, key any, els ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, els...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFAdd", reflect.TypeOf((*MockClient)(nil).PFAdd), varargs...)
}

// PFCount mocks base method.
func (m *MockClient) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFCount", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFCount indicates an expected call of PFCount.
func (mr *MockClientMockRecorder) PFCount(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFCount", reflect.TypeOf((*MockClient)(nil).PFCount), varargs...)
}

// PFMerge mocks base method.
func (m *MockClient) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// PFMerge indicates an expected call of PFMerge.
func (mr *MockClientMockRecorder) PFMerge(ctx, dest any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFMerge", reflect.TypeOf((*MockClient)(nil).PFMerge), varargs...)
}

// PSubscribe mocks base method.
func (m *MockClient) PSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PSubscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// PSubscribe indicates an expected call of PSubscribe.
func (mr *MockClientMockRecorder) PSubscribe(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSubscribe", reflect.TypeOf((*MockClient)(nil).PSubscribe), varargs...)
}

// PTTL mocks base method.
func (m *MockClient) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTTL", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// PTTL indicates an expected call of PTTL.
func (mr *MockClientMockRecorder) PTTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTTL", reflect.TypeOf((*MockClient)(nil).PTTL), ctx, key)
}

// Persist mocks base method.
func (m *MockClient) Persist(ctx context.Context, key string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, key)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockClientMockRecorder) Persist(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockClient)(nil).Persist), ctx, key)
}

// Ping mocks base method.
func (m *MockClient) Ping(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), ctx)
}

// Pipeline mocks base method.
func (m *MockClient) Pipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockClientMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockClient)(nil).Pipeline))
}

// Pipelined mocks base method.
func (m *MockClient) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipelined", ctx, fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipelined indicates an expected call of Pipelined.
func (mr *MockClientMockRecorder) Pipelined(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipelined", reflect.TypeOf((*MockClient)(nil).Pipelined), ctx, fn)
}

// PoolStats mocks base method.
func (m *MockClient) PoolStats() *redis.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolStats")
	ret0, _ := ret[0].(*redis.PoolStats)
	return ret0
}

// PoolStats indicates an expected call of PoolStats.
func (mr *MockClientMockRecorder) PoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolStats", reflect.TypeOf((*MockClient)(nil).PoolStats))
}

// Process mocks base method.
func (m *MockClient) Process(ctx context.Context, cmd redis.Cmder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockClientMockRecorder) Process(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockClient)(nil).Process), ctx, cmd)
}

// PubSubChannels mocks base method.
func (m *MockClient) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubChannels", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// PubSubChannels indicates an expected call of PubSubChannels.
func (mr *MockClientMockRecorder) PubSubChannels(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubChannels", reflect.TypeOf((*MockClient)(nil).PubSubChannels), ctx, pattern)
}

// PubSubNumPat mocks base method.
func (m *MockClient) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubNumPat", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PubSubNumPat indicates an expected call of PubSubNumPat.
func (mr *MockClientMockRecorder) PubSubNumPat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumPat", reflect.TypeOf((*MockClient)(nil).PubSubNumPat), ctx)
}

// PubSubNumSub mocks base method.
func (m *MockClient) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubNumSub", varargs...)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// PubSubNumSub indicates an expected call of PubSubNumSub.
func (mr *MockClientMockRecorder) PubSubNumSub(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumSub", reflect.TypeOf((*MockClient)(nil).PubSubNumSub), varargs...)
}

// PubSubShardChannels mocks base method.
func (m *MockClient) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubShardChannels", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// PubSubShardChannels indicates an expected call of PubSubShardChannels.
func (mr *MockClientMockRecorder) PubSubShardChannels(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubShardChannels", reflect.TypeOf((*MockClient)(nil).PubSubShardChannels), ctx, pattern)
}

// PubSubShardNumSub mocks base method.
func (m *MockClient) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubShardNumSub", varargs...)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// PubSubShardNumSub indicates an expected call of PubSubShardNumSub.
func (mr *MockClientMockRecorder) PubSubShardNumSub(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubShardNumSub", reflect.TypeOf((*MockClient)(nil).PubSubShardNumSub), varargs...)
}

// Publish mocks base method.
func (m *MockClient) Publish(ctx context.Context, channel string, message any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(ctx, channel, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), ctx, channel, message)
}

// Quit mocks base method.
func (m *MockClient) Quit(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockClientMockRecorder) Quit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockClient)(nil).Quit), ctx)
}

// RPop mocks base method.
func (m *MockClient) RPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPop indicates an expected call of RPop.
func (mr *MockClientMockRecorder) RPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockClient)(nil).RPop), ctx, key)
}

// RPopCount mocks base method.
func (m *MockClient) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// RPopCount indicates an expected call of RPopCount.
func (mr *MockClientMockRecorder) RPopCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopCount", reflect.TypeOf((*MockClient)(nil).RPopCount), ctx, key, count)
}

// RPopLPush mocks base method.
func (m *MockClient) RPopLPush(ctx context.Context, source, destination string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", ctx, source, destination)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPopLPush indicates an expected call of RPopLPush.
func (mr *MockClientMockRecorder) RPopLPush(ctx, source, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockClient)(nil).RPopLPush), ctx, source, destination)
}

// RPush mocks base method.
func (m *MockClient) RPush(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPush indicates an expected call of RPush.
func (mr *MockClientMockRecorder) RPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockClient)(nil).RPush), varargs...)
}

// RPushX mocks base method.
func (m *MockClient) RPushX(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPushX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPushX indicates an expected call of RPushX.
func (mr *MockClientMockRecorder) RPushX(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockClient)(nil).RPushX), varargs...)
}

// RandomKey mocks base method.
func (m *MockClient) RandomKey(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RandomKey indicates an expected call of RandomKey.
func (mr *MockClientMockRecorder) RandomKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockClient)(nil).RandomKey), ctx)
}

// ReadOnly mocks base method.
func (m *MockClient) ReadOnly(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnly", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadOnly indicates an expected call of ReadOnly.
func (mr *MockClientMockRecorder) ReadOnly(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnly", reflect.TypeOf((*MockClient)(nil).ReadOnly), ctx)
}

// ReadWrite mocks base method.
func (m *MockClient) ReadWrite(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWrite", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadWrite indicates an expected call of ReadWrite.
func (mr *MockClientMockRecorder) ReadWrite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWrite", reflect.TypeOf((*MockClient)(nil).ReadWrite), ctx)
}

// Rename mocks base method.
func (m *MockClient) Rename(ctx context.Context, key, newkey string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, key, newkey)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockClientMockRecorder) Rename(ctx, key, newkey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockClient)(nil).Rename), ctx, key, newkey)
}

// RenameNX mocks base method.
func (m *MockClient) RenameNX(ctx context.Context, key, newkey string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNX", ctx, key, newkey)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// RenameNX indicates an expected call of RenameNX.
func (mr *MockClientMockRecorder) RenameNX(ctx, key, newkey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNX", reflect.TypeOf((*MockClient)(nil).RenameNX), ctx, key, newkey)
}

// Restore mocks base method.
func (m *MockClient) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockClientMockRecorder) Restore(ctx, key, ttl, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockClient)(nil).Restore), ctx, key, ttl, value)
}

// RestoreReplace mocks base method.
func (m *MockClient) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreReplace", ctx, key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// RestoreReplace indicates an expected call of RestoreReplace.
func (mr *MockClientMockRecorder) RestoreReplace(ctx, key, ttl, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReplace", reflect.TypeOf((*MockClient)(nil).RestoreReplace), ctx, key, ttl, value)
}

// SAdd mocks base method.
func (m *MockClient) SAdd(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockClientMockRecorder) SAdd(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockClient)(nil).SAdd), varargs...)
}

// SCard mocks base method.
func (m *MockClient) SCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SCard indicates an expected call of SCard.
func (mr *MockClientMockRecorder) SCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockClient)(nil).SCard), ctx, key)
}

// SDiff mocks base method.
func (m *MockClient) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SDiff indicates an expected call of SDiff.
func (mr *MockClientMockRecorder) SDiff(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockClient)(nil).SDiff), varargs...)
}

// SDiffStore mocks base method.
func (m *MockClient) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SDiffStore indicates an expected call of SDiffStore.
func (mr *MockClientMockRecorder) SDiffStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockClient)(nil).SDiffStore), varargs...)
}

// SInter mocks base method.
func (m *MockClient) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SInter indicates an expected call of SInter.
func (mr *MockClientMockRecorder) SInter(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockClient)(nil).SInter), varargs...)
}

// SInterCard mocks base method.
func (m *MockClient) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, limit}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterCard", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SInterCard indicates an expected call of SInterCard.
func (mr *MockClientMockRecorder) SInterCard(ctx, limit any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, limit}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterCard", reflect.TypeOf((*MockClient)(nil).SInterCard), varargs...)
}

// SInterStore mocks base method.
func (m *MockClient) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SInterStore indicates an expected call of SInterStore.
func (mr *MockClientMockRecorder) SInterStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockClient)(nil).SInterStore), varargs...)
}

// SIsMember mocks base method.
func (m *MockClient) SIsMember(ctx context.Context, key string, member any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", ctx, key, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SIsMember indicates an expected call of SIsMember.
func (mr *MockClientMockRecorder) SIsMember(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockClient)(nil).SIsMember), ctx, key, member)
}

// SMIsMember mocks base method.
func (m *MockClient) SMIsMember(ctx context.Context, key string, members ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SMIsMember", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// SMIsMember indicates an expected call of SMIsMember.
func (mr *MockClientMockRecorder) SMIsMember(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMIsMember", reflect.TypeOf((*MockClient)(nil).SMIsMember), varargs...)
}

// SMembers mocks base method.
func (m *MockClient) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SMembers indicates an expected call of SMembers.
func (mr *MockClientMockRecorder) SMembers(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockClient)(nil).SMembers), ctx, key)
}

// SMembersMap mocks base method.
func (m *MockClient) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembersMap", ctx, key)
	ret0, _ := ret[0].(*redis.StringStructMapCmd)
	return ret0
}

// SMembersMap indicates an expected call of SMembersMap.
func (mr *MockClientMockRecorder) SMembersMap(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembersMap", reflect.TypeOf((*MockClient)(nil).SMembersMap), ctx, key)
}

// SMove mocks base method.
func (m *MockClient) SMove(ctx context.Context, source, destination string, member any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", ctx, source, destination, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SMove indicates an expected call of SMove.
func (mr *MockClientMockRecorder) SMove(ctx, source, destination, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockClient)(nil).SMove), ctx, source, destination, member)
}

// SPop mocks base method.
func (m *MockClient) SPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SPop indicates an expected call of SPop.
func (mr *MockClientMockRecorder) SPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockClient)(nil).SPop), ctx, key)
}

// SPopN mocks base method.
func (m *MockClient) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPopN", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SPopN indicates an expected call of SPopN.
func (mr *MockClientMockRecorder) SPopN(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPopN", reflect.TypeOf((*MockClient)(nil).SPopN), ctx, key, count)
}

// SPublish mocks base method.
func (m *MockClient) SPublish(ctx context.Context, channel string, message any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPublish", ctx, channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SPublish indicates an expected call of SPublish.
func (mr *MockClientMockRecorder) SPublish(ctx, channel, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPublish", reflect.TypeOf((*MockClient)(nil).SPublish), ctx, channel, message)
}

// SRandMember mocks base method.
func (m *MockClient) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SRandMember indicates an expected call of SRandMember.
func (mr *MockClientMockRecorder) SRandMember(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockClient)(nil).SRandMember), ctx, key)
}

// SRandMemberN mocks base method.
func (m *MockClient) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMemberN", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SRandMemberN indicates an expected call of SRandMemberN.
func (mr *MockClientMockRecorder) SRandMemberN(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMemberN", reflect.TypeOf((*MockClient)(nil).SRandMemberN), ctx, key, count)
}

// SRem mocks base method.
func (m *MockClient) SRem(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SRem indicates an expected call of SRem.
func (mr *MockClientMockRecorder) SRem(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockClient)(nil).SRem), varargs...)
}

// SScan mocks base method.
func (m *MockClient) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// SScan indicates an expected call of SScan.
func (mr *MockClientMockRecorder) SScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SScan", reflect.TypeOf((*MockClient)(nil).SScan), ctx, key, cursor, match, count)
}

// SSubscribe mocks base method.
func (m *MockClient) SSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSubscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// SSubscribe indicates an expected call of SSubscribe.
func (mr *MockClientMockRecorder) SSubscribe(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSubscribe", reflect.TypeOf((*MockClient)(nil).SSubscribe), varargs...)
}

// SUnion mocks base method.
func (m *MockClient) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SUnion indicates an expected call of SUnion.
func (mr *MockClientMockRecorder) SUnion(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockClient)(nil).SUnion), varargs...)
}

// SUnionStore mocks base method.
func (m *MockClient) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SUnionStore indicates an expected call of SUnionStore.
func (mr *MockClientMockRecorder) SUnionStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockClient)(nil).SUnionStore), varargs...)
}

// Save mocks base method.
func (m *MockClient) Save(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClientMockRecorder) Save(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClient)(nil).Save), ctx)
}

// Scan mocks base method.
func (m *MockClient) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockClientMockRecorder) Scan(ctx, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockClient)(nil).Scan), ctx, cursor, match, count)
}

// ScanType mocks base method.
func (m *MockClient) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanType", ctx, cursor, match, count, keyType)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// ScanType indicates an expected call of ScanType.
func (mr *MockClientMockRecorder) ScanType(ctx, cursor, match, count, keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockClient)(nil).ScanType), ctx, cursor, match, count, keyType)
}

// ScriptExists mocks base method.
func (m *MockClient) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range hashes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScriptExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// ScriptExists indicates an expected call of ScriptExists.
func (mr *MockClientMockRecorder) ScriptExists(ctx any, hashes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, hashes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptExists", reflect.TypeOf((*MockClient)(nil).ScriptExists), varargs...)
}

// ScriptFlush mocks base method.
func (m *MockClient) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptFlush", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptFlush indicates an expected call of ScriptFlush.
func (mr *MockClientMockRecorder) ScriptFlush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptFlush", reflect.TypeOf((*MockClient)(nil).ScriptFlush), ctx)
}

// ScriptKill mocks base method.
func (m *MockClient) ScriptKill(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptKill", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptKill indicates an expected call of ScriptKill.
func (mr *MockClientMockRecorder) ScriptKill(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptKill", reflect.TypeOf((*MockClient)(nil).ScriptKill), ctx)
}

// ScriptLoad mocks base method.
func (m *MockClient) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptLoad", ctx, script)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ScriptLoad indicates an expected call of ScriptLoad.
func (mr *MockClientMockRecorder) ScriptLoad(ctx, script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptLoad", reflect.TypeOf((*MockClient)(nil).ScriptLoad), ctx, script)
}

// Set mocks base method.
func (m *MockClient) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClient)(nil).Set), ctx, key, value, expiration)
}

// SetArgs mocks base method.
func (m *MockClient) SetArgs(ctx context.Context, key string, value any, a redis.SetArgs) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArgs", ctx, key, value, a)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockClientMockRecorder) SetArgs(ctx, key, value, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockClient)(nil).SetArgs), ctx, key, value, a)
}

// SetBit mocks base method.
func (m *MockClient) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", ctx, key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetBit indicates an expected call of SetBit.
func (mr *MockClientMockRecorder) SetBit(ctx, key, offset, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockClient)(nil).SetBit), ctx, key, offset, value)
}

// SetEx mocks base method.
func (m *MockClient) SetEx(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockClientMockRecorder) SetEx(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockClient)(nil).SetEx), ctx, key, value, expiration)
}

// SetNX mocks base method.
func (m *MockClient) SetNX(ctx context.Context, key string, value any, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetNX indicates an expected call of SetNX.
func (mr *MockClientMockRecorder) SetNX(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockClient)(nil).SetNX), ctx, key, value, expiration)
}

// SetRange mocks base method.
func (m *MockClient) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRange", ctx, key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetRange indicates an expected call of SetRange.
func (mr *MockClientMockRecorder) SetRange(ctx, key, offset, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRange", reflect.TypeOf((*MockClient)(nil).SetRange), ctx, key, offset, value)
}

// SetXX mocks base method.
func (m *MockClient) SetXX(ctx context.Context, key string, value any, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXX", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetXX indicates an expected call of SetXX.
func (mr *MockClientMockRecorder) SetXX(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXX", reflect.TypeOf((*MockClient)(nil).SetXX), ctx, key, value, expiration)
}

// Shutdown mocks base method.
func (m *MockClient) Shutdown(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClient)(nil).Shutdown), ctx)
}

// ShutdownNoSave mocks base method.
func (m *MockClient) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownNoSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownNoSave indicates an expected call of ShutdownNoSave.
func (mr *MockClientMockRecorder) ShutdownNoSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownNoSave", reflect.TypeOf((*MockClient)(nil).ShutdownNoSave), ctx)
}

// ShutdownSave mocks base method.
func (m *MockClient) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownSave indicates an expected call of ShutdownSave.
func (mr *MockClientMockRecorder) ShutdownSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownSave", reflect.TypeOf((*MockClient)(nil).ShutdownSave), ctx)
}

// SlaveOf mocks base method.
func (m *MockClient) SlaveOf(ctx context.Context, host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlaveOf", ctx, host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SlaveOf indicates an expected call of SlaveOf.
func (mr *MockClientMockRecorder) SlaveOf(ctx, host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlaveOf", reflect.TypeOf((*MockClient)(nil).SlaveOf), ctx, host, port)
}

// SlowLogGet mocks base method.
func (m *MockClient) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlowLogGet", ctx, num)
	ret0, _ := ret[0].(*redis.SlowLogCmd)
	return ret0
}

// SlowLogGet indicates an expected call of SlowLogGet.
func (mr *MockClientMockRecorder) SlowLogGet(ctx, num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlowLogGet", reflect.TypeOf((*MockClient)(nil).SlowLogGet), ctx, num)
}

// Sort mocks base method.
func (m *MockClient) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", ctx, key, sort)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockClientMockRecorder) Sort(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockClient)(nil).Sort), ctx, key, sort)
}

// SortInterfaces mocks base method.
func (m *MockClient) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortInterfaces", ctx, key, sort)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// SortInterfaces indicates an expected call of SortInterfaces.
func (mr *MockClientMockRecorder) SortInterfaces(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortInterfaces", reflect.TypeOf((*MockClient)(nil).SortInterfaces), ctx, key, sort)
}

// SortRO mocks base method.
func (m *MockClient) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortRO", ctx, key, sort)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SortRO indicates an expected call of SortRO.
func (mr *MockClientMockRecorder) SortRO(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortRO", reflect.TypeOf((*MockClient)(nil).SortRO), ctx, key, sort)
}

// SortStore mocks base method.
func (m *MockClient) SortStore(ctx context.Context, key, store string, sort *redis.Sort) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortStore", ctx, key, store, sort)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SortStore indicates an expected call of SortStore.
func (mr *MockClientMockRecorder) SortStore(ctx, key, store, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortStore", reflect.TypeOf((*MockClient)(nil).SortStore), ctx, key, store, sort)
}

// StrLen mocks base method.
func (m *MockClient) StrLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// StrLen indicates an expected call of StrLen.
func (mr *MockClientMockRecorder) StrLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrLen", reflect.TypeOf((*MockClient)(nil).StrLen), ctx, key)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(ctx context.Context, channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), varargs...)
}

// TDigestAdd mocks base method.
func (m *MockClient) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestAdd", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestAdd indicates an expected call of TDigestAdd.
func (mr *MockClientMockRecorder) TDigestAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestAdd", reflect.TypeOf((*MockClient)(nil).TDigestAdd), varargs...)
}

// TDigestByRank mocks base method.
func (m *MockClient) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range rank {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestByRank", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestByRank indicates an expected call of TDigestByRank.
func (mr *MockClientMockRecorder) TDigestByRank(ctx, key any, rank ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, rank...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestByRank", reflect.TypeOf((*MockClient)(nil).TDigestByRank), varargs...)
}

// TDigestByRevRank mocks base method.
func (m *MockClient) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range rank {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestByRevRank", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestByRevRank indicates an expected call of TDigestByRevRank.
func (mr *MockClientMockRecorder) TDigestByRevRank(ctx, key any, rank ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, rank...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestByRevRank", reflect.TypeOf((*MockClient)(nil).TDigestByRevRank), varargs...)
}

// TDigestCDF mocks base method.
func (m *MockClient) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestCDF", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestCDF indicates an expected call of TDigestCDF.
func (mr *MockClientMockRecorder) TDigestCDF(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCDF", reflect.TypeOf((*MockClient)(nil).TDigestCDF), varargs...)
}

// TDigestCreate mocks base method.
func (m *MockClient) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestCreate", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestCreate indicates an expected call of TDigestCreate.
func (mr *MockClientMockRecorder) TDigestCreate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCreate", reflect.TypeOf((*MockClient)(nil).TDigestCreate), ctx, key)
}

// TDigestCreateWithCompression mocks base method.
func (m *MockClient) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestCreateWithCompression", ctx, key, compression)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestCreateWithCompression indicates an expected call of TDigestCreateWithCompression.
func (mr *MockClientMockRecorder) TDigestCreateWithCompression(ctx, key, compression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCreateWithCompression", reflect.TypeOf((*MockClient)(nil).TDigestCreateWithCompression), ctx, key, compression)
}

// TDigestInfo mocks base method.
func (m *MockClient) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestInfo", ctx, key)
	ret0, _ := ret[0].(*redis.TDigestInfoCmd)
	return ret0
}

// TDigestInfo indicates an expected call of TDigestInfo.
func (mr *MockClientMockRecorder) TDigestInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestInfo", reflect.TypeOf((*MockClient)(nil).TDigestInfo), ctx, key)
}

// TDigestMax mocks base method.
func (m *MockClient) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestMax", ctx, key)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestMax indicates an expected call of TDigestMax.
func (mr *MockClientMockRecorder) TDigestMax(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMax", reflect.TypeOf((*MockClient)(nil).TDigestMax), ctx, key)
}

// TDigestMerge mocks base method.
func (m *MockClient) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey, options}
	for _, a := range sourceKeys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestMerge indicates an expected call of TDigestMerge.
func (mr *MockClientMockRecorder) TDigestMerge(ctx, destKey, options any, sourceKeys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey, options}, sourceKeys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMerge", reflect.TypeOf((*MockClient)(nil).TDigestMerge), varargs...)
}

// TDigestMin mocks base method.
func (m *MockClient) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestMin", ctx, key)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestMin indicates an expected call of TDigestMin.
func (mr *MockClientMockRecorder) TDigestMin(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMin", reflect.TypeOf((*MockClient)(nil).TDigestMin), ctx, key)
}

// TDigestQuantile mocks base method.
func (m *MockClient) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestQuantile", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestQuantile indicates an expected call of TDigestQuantile.
func (mr *MockClientMockRecorder) TDigestQuantile(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestQuantile", reflect.TypeOf((*MockClient)(nil).TDigestQuantile), varargs...)
}

// TDigestRank mocks base method.
func (m *MockClient) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestRank", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TDigestRank indicates an expected call of TDigestRank.
func (mr *MockClientMockRecorder) TDigestRank(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestRank", reflect.TypeOf((*MockClient)(nil).TDigestRank), varargs...)
}

// TDigestReset mocks base method.
func (m *MockClient) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestReset", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestReset indicates an expected call of TDigestReset.
func (mr *MockClientMockRecorder) TDigestReset(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestReset", reflect.TypeOf((*MockClient)(nil).TDigestReset), ctx, key)
}

// TDigestRevRank mocks base method.
func (m *MockClient) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestRevRank", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TDigestRevRank indicates an expected call of TDigestRevRank.
func (mr *MockClientMockRecorder) TDigestRevRank(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestRevRank", reflect.TypeOf((*MockClient)(nil).TDigestRevRank), varargs...)
}

// TDigestTrimmedMean mocks base method.
func (m *MockClient) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile, highCutQuantile float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestTrimmedMean", ctx, key, lowCutQuantile, highCutQuantile)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestTrimmedMean indicates an expected call of TDigestTrimmedMean.
func (mr *MockClientMockRecorder) TDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestTrimmedMean", reflect.TypeOf((*MockClient)(nil).TDigestTrimmedMean), ctx, key, lowCutQuantile, highCutQuantile)
}

// TSAdd mocks base method.
func (m *MockClient) TSAdd(ctx context.Context, key string, timestamp any, value float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAdd", ctx, key, timestamp, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSAdd indicates an expected call of TSAdd.
func (mr *MockClientMockRecorder) TSAdd(ctx, key, timestamp, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAdd", reflect.TypeOf((*MockClient)(nil).TSAdd), ctx, key, timestamp, value)
}

// TSAddWithArgs mocks base method.
func (m *MockClient) TSAddWithArgs(ctx context.Context, key string, timestamp any, value float64, options *redis.TSOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAddWithArgs", ctx, key, timestamp, value, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSAddWithArgs indicates an expected call of TSAddWithArgs.
func (mr *MockClientMockRecorder) TSAddWithArgs(ctx, key, timestamp, value, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAddWithArgs", reflect.TypeOf((*MockClient)(nil).TSAddWithArgs), ctx, key, timestamp, value, options)
}

// TSAlter mocks base method.
func (m *MockClient) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAlter", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSAlter indicates an expected call of TSAlter.
func (mr *MockClientMockRecorder) TSAlter(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAlter", reflect.TypeOf((*MockClient)(nil).TSAlter), ctx, key, options)
}

// TSCreate mocks base method.
func (m *MockClient) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreate", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreate indicates an expected call of TSCreate.
func (mr *MockClientMockRecorder) TSCreate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreate", reflect.TypeOf((*MockClient)(nil).TSCreate), ctx, key)
}

// TSCreateRule mocks base method.
func (m *MockClient) TSCreateRule(ctx context.Context, sourceKey, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateRule", ctx, sourceKey, destKey, aggregator, bucketDuration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateRule indicates an expected call of TSCreateRule.
func (mr *MockClientMockRecorder) TSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateRule", reflect.TypeOf((*MockClient)(nil).TSCreateRule), ctx, sourceKey, destKey, aggregator, bucketDuration)
}

// TSCreateRuleWithArgs mocks base method.
func (m *MockClient) TSCreateRuleWithArgs(ctx context.Context, sourceKey, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateRuleWithArgs", ctx, sourceKey, destKey, aggregator, bucketDuration, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateRuleWithArgs indicates an expected call of TSCreateRuleWithArgs.
func (mr *MockClientMockRecorder) TSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateRuleWithArgs", reflect.TypeOf((*MockClient)(nil).TSCreateRuleWithArgs), ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}

// TSCreateWithArgs mocks base method.
func (m *MockClient) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateWithArgs indicates an expected call of TSCreateWithArgs.
func (mr *MockClientMockRecorder) TSCreateWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateWithArgs", reflect.TypeOf((*MockClient)(nil).TSCreateWithArgs), ctx, key, options)
}

// TSDecrBy mocks base method.
func (m *MockClient) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDecrBy", ctx, Key, timestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDecrBy indicates an expected call of TSDecrBy.
func (mr *MockClientMockRecorder) TSDecrBy(ctx, Key, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDecrBy", reflect.TypeOf((*MockClient)(nil).TSDecrBy), ctx, Key, timestamp)
}

// TSDecrByWithArgs mocks base method.
func (m *MockClient) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDecrByWithArgs", ctx, key, timestamp, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDecrByWithArgs indicates an expected call of TSDecrByWithArgs.
func (mr *MockClientMockRecorder) TSDecrByWithArgs(ctx, key, timestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDecrByWithArgs", reflect.TypeOf((*MockClient)(nil).TSDecrByWithArgs), ctx, key, timestamp, options)
}

// TSDel mocks base method.
func (m *MockClient) TSDel(ctx context.Context, Key string, fromTimestamp, toTimestamp int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDel", ctx, Key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDel indicates an expected call of TSDel.
func (mr *MockClientMockRecorder) TSDel(ctx, Key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDel", reflect.TypeOf((*MockClient)(nil).TSDel), ctx, Key, fromTimestamp, toTimestamp)
}

// TSDeleteRule mocks base method.
func (m *MockClient) TSDeleteRule(ctx context.Context, sourceKey, destKey string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDeleteRule", ctx, sourceKey, destKey)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSDeleteRule indicates an expected call of TSDeleteRule.
func (mr *MockClientMockRecorder) TSDeleteRule(ctx, sourceKey, destKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDeleteRule", reflect.TypeOf((*MockClient)(nil).TSDeleteRule), ctx, sourceKey, destKey)
}

// TSGet mocks base method.
func (m *MockClient) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSGet", ctx, key)
	ret0, _ := ret[0].(*redis.TSTimestampValueCmd)
	return ret0
}

// TSGet indicates an expected call of TSGet.
func (mr *MockClientMockRecorder) TSGet(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSGet", reflect.TypeOf((*MockClient)(nil).TSGet), ctx, key)
}

// TSGetWithArgs mocks base method.
func (m *MockClient) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSGetWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueCmd)
	return ret0
}

// TSGetWithArgs indicates an expected call of TSGetWithArgs.
func (mr *MockClientMockRecorder) TSGetWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSGetWithArgs", reflect.TypeOf((*MockClient)(nil).TSGetWithArgs), ctx, key, options)
}

// TSIncrBy mocks base method.
func (m *MockClient) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSIncrBy", ctx, Key, timestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSIncrBy indicates an expected call of TSIncrBy.
func (mr *MockClientMockRecorder) TSIncrBy(ctx, Key, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSIncrBy", reflect.TypeOf((*MockClient)(nil).TSIncrBy), ctx, Key, timestamp)
}

// TSIncrByWithArgs mocks base method.
func (m *MockClient) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSIncrByWithArgs", ctx, key, timestamp, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSIncrByWithArgs indicates an expected call of TSIncrByWithArgs.
func (mr *MockClientMockRecorder) TSIncrByWithArgs(ctx, key, timestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSIncrByWithArgs", reflect.TypeOf((*MockClient)(nil).TSIncrByWithArgs), ctx, key, timestamp, options)
}

// TSInfo mocks base method.
func (m *MockClient) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSInfo", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// TSInfo indicates an expected call of TSInfo.
func (mr *MockClientMockRecorder) TSInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSInfo", reflect.TypeOf((*MockClient)(nil).TSInfo), ctx, key)
}

// TSInfoWithArgs mocks base method.
func (m *MockClient) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSInfoWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// TSInfoWithArgs indicates an expected call of TSInfoWithArgs.
func (mr *MockClientMockRecorder) TSInfoWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSInfoWithArgs", reflect.TypeOf((*MockClient)(nil).TSInfoWithArgs), ctx, key, options)
}

// TSMAdd mocks base method.
func (m *MockClient) TSMAdd(ctx context.Context, ktvSlices [][]any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMAdd", ctx, ktvSlices)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TSMAdd indicates an expected call of TSMAdd.
func (mr *MockClientMockRecorder) TSMAdd(ctx, ktvSlices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMAdd", reflect.TypeOf((*MockClient)(nil).TSMAdd), ctx, ktvSlices)
}

// TSMGet mocks base method.
func (m *MockClient) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMGet", ctx, filters)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMGet indicates an expected call of TSMGet.
func (mr *MockClientMockRecorder) TSMGet(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMGet", reflect.TypeOf((*MockClient)(nil).TSMGet), ctx, filters)
}

// TSMGetWithArgs mocks base method.
func (m *MockClient) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMGetWithArgs", ctx, filters, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMGetWithArgs indicates an expected call of TSMGetWithArgs.
func (mr *MockClientMockRecorder) TSMGetWithArgs(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMGetWithArgs", reflect.TypeOf((*MockClient)(nil).TSMGetWithArgs), ctx, filters, options)
}

// TSMRange mocks base method.
func (m *MockClient) TSMRange(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRange", ctx, fromTimestamp, toTimestamp, filterExpr)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRange indicates an expected call of TSMRange.
func (mr *MockClientMockRecorder) TSMRange(ctx, fromTimestamp, toTimestamp, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRange", reflect.TypeOf((*MockClient)(nil).TSMRange), ctx, fromTimestamp, toTimestamp, filterExpr)
}

// TSMRangeWithArgs mocks base method.
func (m *MockClient) TSMRangeWithArgs(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRangeWithArgs indicates an expected call of TSMRangeWithArgs.
func (mr *MockClientMockRecorder) TSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRangeWithArgs", reflect.TypeOf((*MockClient)(nil).TSMRangeWithArgs), ctx, fromTimestamp, toTimestamp, filterExpr, options)
}

// TSMRevRange mocks base method.
func (m *MockClient) TSMRevRange(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRevRange", ctx, fromTimestamp, toTimestamp, filterExpr)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRevRange indicates an expected call of TSMRevRange.
func (mr *MockClientMockRecorder) TSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRevRange", reflect.TypeOf((*MockClient)(nil).TSMRevRange), ctx, fromTimestamp, toTimestamp, filterExpr)
}

// TSMRevRangeWithArgs mocks base method.
func (m *MockClient) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRevRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRevRangeWithArgs indicates an expected call of TSMRevRangeWithArgs.
func (mr *MockClientMockRecorder) TSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRevRangeWithArgs", reflect.TypeOf((*MockClient)(nil).TSMRevRangeWithArgs), ctx, fromTimestamp, toTimestamp, filterExpr, options)
}

// TSQueryIndex mocks base method.
func (m *MockClient) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSQueryIndex", ctx, filterExpr)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TSQueryIndex indicates an expected call of TSQueryIndex.
func (mr *MockClientMockRecorder) TSQueryIndex(ctx, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSQueryIndex", reflect.TypeOf((*MockClient)(nil).TSQueryIndex), ctx, filterExpr)
}

// TSRange mocks base method.
func (m *MockClient) TSRange(ctx context.Context, key string, fromTimestamp, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRange", ctx, key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRange indicates an expected call of TSRange.
func (mr *MockClientMockRecorder) TSRange(ctx, key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRange", reflect.TypeOf((*MockClient)(nil).TSRange), ctx, key, fromTimestamp, toTimestamp)
}

// TSRangeWithArgs mocks base method.
func (m *MockClient) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRangeWithArgs indicates an expected call of TSRangeWithArgs.
func (mr *MockClientMockRecorder) TSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRangeWithArgs", reflect.TypeOf((*MockClient)(nil).TSRangeWithArgs), ctx, key, fromTimestamp, toTimestamp, options)
}

// TSRevRange mocks base method.
func (m *MockClient) TSRevRange(ctx context.Context, key string, fromTimestamp, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRevRange", ctx, key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRevRange indicates an expected call of TSRevRange.
func (mr *MockClientMockRecorder) TSRevRange(ctx, key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRevRange", reflect.TypeOf((*MockClient)(nil).TSRevRange), ctx, key, fromTimestamp, toTimestamp)
}

// TSRevRangeWithArgs mocks base method.
func (m *MockClient) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRevRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRevRangeWithArgs indicates an expected call of TSRevRangeWithArgs.
func (mr *MockClientMockRecorder) TSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRevRangeWithArgs", reflect.TypeOf((*MockClient)(nil).TSRevRangeWithArgs), ctx, key, fromTimestamp, toTimestamp, options)
}

// TTL mocks base method.
func (m *MockClient) TTL(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockClientMockRecorder) TTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockClient)(nil).TTL), ctx, key)
}

// Time mocks base method.
func (m *MockClient) Time(ctx context.Context) *redis.TimeCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time", ctx)
	ret0, _ := ret[0].(*redis.TimeCmd)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockClientMockRecorder) Time(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockClient)(nil).Time), ctx)
}

// TopKAdd mocks base method.
func (m *MockClient) TopKAdd(ctx context.Context, key string, elements ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKAdd", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKAdd indicates an expected call of TopKAdd.
func (mr *MockClientMockRecorder) TopKAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKAdd", reflect.TypeOf((*MockClient)(nil).TopKAdd), varargs...)
}

// TopKCount mocks base method.
func (m *MockClient) TopKCount(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKCount", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TopKCount indicates an expected call of TopKCount.
func (mr *MockClientMockRecorder) TopKCount(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKCount", reflect.TypeOf((*MockClient)(nil).TopKCount), varargs...)
}

// TopKIncrBy mocks base method.
func (m *MockClient) TopKIncrBy(ctx context.Context, key string, elements ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKIncrBy", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKIncrBy indicates an expected call of TopKIncrBy.
func (mr *MockClientMockRecorder) TopKIncrBy(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKIncrBy", reflect.TypeOf((*MockClient)(nil).TopKIncrBy), varargs...)
}

// TopKInfo mocks base method.
func (m *MockClient) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKInfo", ctx, key)
	ret0, _ := ret[0].(*redis.TopKInfoCmd)
	return ret0
}

// TopKInfo indicates an expected call of TopKInfo.
func (mr *MockClientMockRecorder) TopKInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKInfo", reflect.TypeOf((*MockClient)(nil).TopKInfo), ctx, key)
}

// TopKList mocks base method.
func (m *MockClient) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKList", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKList indicates an expected call of TopKList.
func (mr *MockClientMockRecorder) TopKList(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKList", reflect.TypeOf((*MockClient)(nil).TopKList), ctx, key)
}

// TopKListWithCount mocks base method.
func (m *MockClient) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKListWithCount", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// TopKListWithCount indicates an expected call of TopKListWithCount.
func (mr *MockClientMockRecorder) TopKListWithCount(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKListWithCount", reflect.TypeOf((*MockClient)(nil).TopKListWithCount), ctx, key)
}

// TopKQuery mocks base method.
func (m *MockClient) TopKQuery(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKQuery", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// TopKQuery indicates an expected call of TopKQuery.
func (mr *MockClientMockRecorder) TopKQuery(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKQuery", reflect.TypeOf((*MockClient)(nil).TopKQuery), varargs...)
}

// TopKReserve mocks base method.
func (m *MockClient) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKReserve", ctx, key, k)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TopKReserve indicates an expected call of TopKReserve.
func (mr *MockClientMockRecorder) TopKReserve(ctx, key, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKReserve", reflect.TypeOf((*MockClient)(nil).TopKReserve), ctx, key, k)
}

// TopKReserveWithOptions mocks base method.
func (m *MockClient) TopKReserveWithOptions(ctx context.Context, key string, k, width, depth int64, decay float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKReserveWithOptions", ctx, key, k, width, depth, decay)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TopKReserveWithOptions indicates an expected call of TopKReserveWithOptions.
func (mr *MockClientMockRecorder) TopKReserveWithOptions(ctx, key, k, width, depth, decay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKReserveWithOptions", reflect.TypeOf((*MockClient)(nil).TopKReserveWithOptions), ctx, key, k, width, depth, decay)
}

// Touch mocks base method.
func (m *MockClient) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Touch", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockClientMockRecorder) Touch(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockClient)(nil).Touch), varargs...)
}

// TxPipeline mocks base method.
func (m *MockClient) TxPipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// TxPipeline indicates an expected call of TxPipeline.
func (mr *MockClientMockRecorder) TxPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipeline", reflect.TypeOf((*MockClient)(nil).TxPipeline))
}

// TxPipelined mocks base method.
func (m *MockClient) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipelined", ctx, fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxPipelined indicates an expected call of TxPipelined.
func (mr *MockClientMockRecorder) TxPipelined(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipelined", reflect.TypeOf((*MockClient)(nil).TxPipelined), ctx, fn)
}

// Type mocks base method.
func (m *MockClient) Type(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockClientMockRecorder) Type(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockClient)(nil).Type), ctx, key)
}

// Unlink mocks base method.
func (m *MockClient) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockClientMockRecorder) Unlink(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockClient)(nil).Unlink), varargs...)
}

// VAdd mocks base method.
func (m *MockClient) VAdd(ctx context.Context, key, element string, val redis.Vector) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VAdd", ctx, key, element, val)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VAdd indicates an expected call of VAdd.
func (mr *MockClientMockRecorder) VAdd(ctx, key, element, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VAdd", reflect.TypeOf((*MockClient)(nil).VAdd), ctx, key, element, val)
}

// VAddWithArgs mocks base method.
func (m *MockClient) VAddWithArgs(ctx context.Context, key, element string, val redis.Vector, addArgs *redis.VAddArgs) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VAddWithArgs", ctx, key, element, val, addArgs)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VAddWithArgs indicates an expected call of VAddWithArgs.
func (mr *MockClientMockRecorder) VAddWithArgs(ctx, key, element, val, addArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VAddWithArgs", reflect.TypeOf((*MockClient)(nil).VAddWithArgs), ctx, key, element, val, addArgs)
}

// VCard mocks base method.
func (m *MockClient) VCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// VCard indicates an expected call of VCard.
func (mr *MockClientMockRecorder) VCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCard", reflect.TypeOf((*MockClient)(nil).VCard), ctx, key)
}

// VClearAttributes mocks base method.
func (m *MockClient) VClearAttributes(ctx context.Context, key, element string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VClearAttributes", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VClearAttributes indicates an expected call of VClearAttributes.
func (mr *MockClientMockRecorder) VClearAttributes(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VClearAttributes", reflect.TypeOf((*MockClient)(nil).VClearAttributes), ctx, key, element)
}

// VDim mocks base method.
func (m *MockClient) VDim(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VDim", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// VDim indicates an expected call of VDim.
func (mr *MockClientMockRecorder) VDim(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VDim", reflect.TypeOf((*MockClient)(nil).VDim), ctx, key)
}

// VEmb mocks base method.
func (m *MockClient) VEmb(ctx context.Context, key, element string, raw bool) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VEmb", ctx, key, element, raw)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// VEmb indicates an expected call of VEmb.
func (mr *MockClientMockRecorder) VEmb(ctx, key, element, raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VEmb", reflect.TypeOf((*MockClient)(nil).VEmb), ctx, key, element, raw)
}

// VGetAttr mocks base method.
func (m *MockClient) VGetAttr(ctx context.Context, key, element string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGetAttr", ctx, key, element)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// VGetAttr indicates an expected call of VGetAttr.
func (mr *MockClientMockRecorder) VGetAttr(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGetAttr", reflect.TypeOf((*MockClient)(nil).VGetAttr), ctx, key, element)
}

// VInfo mocks base method.
func (m *MockClient) VInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VInfo", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// VInfo indicates an expected call of VInfo.
func (mr *MockClientMockRecorder) VInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VInfo", reflect.TypeOf((*MockClient)(nil).VInfo), ctx, key)
}

// VLinks mocks base method.
func (m *MockClient) VLinks(ctx context.Context, key, element string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VLinks", ctx, key, element)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VLinks indicates an expected call of VLinks.
func (mr *MockClientMockRecorder) VLinks(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VLinks", reflect.TypeOf((*MockClient)(nil).VLinks), ctx, key, element)
}

// VLinksWithScores mocks base method.
func (m *MockClient) VLinksWithScores(ctx context.Context, key, element string) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VLinksWithScores", ctx, key, element)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VLinksWithScores indicates an expected call of VLinksWithScores.
func (mr *MockClientMockRecorder) VLinksWithScores(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VLinksWithScores", reflect.TypeOf((*MockClient)(nil).VLinksWithScores), ctx, key, element)
}

// VRandMember mocks base method.
func (m *MockClient) VRandMember(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRandMember", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// VRandMember indicates an expected call of VRandMember.
func (mr *MockClientMockRecorder) VRandMember(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRandMember", reflect.TypeOf((*MockClient)(nil).VRandMember), ctx, key)
}

// VRandMemberCount mocks base method.
func (m *MockClient) VRandMemberCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRandMemberCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VRandMemberCount indicates an expected call of VRandMemberCount.
func (mr *MockClientMockRecorder) VRandMemberCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRandMemberCount", reflect.TypeOf((*MockClient)(nil).VRandMemberCount), ctx, key, count)
}

// VRem mocks base method.
func (m *MockClient) VRem(ctx context.Context, key, element string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRem", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VRem indicates an expected call of VRem.
func (mr *MockClientMockRecorder) VRem(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRem", reflect.TypeOf((*MockClient)(nil).VRem), ctx, key, element)
}

// VSetAttr mocks base method.
func (m *MockClient) VSetAttr(ctx context.Context, key, element string, attr any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSetAttr", ctx, key, element, attr)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VSetAttr indicates an expected call of VSetAttr.
func (mr *MockClientMockRecorder) VSetAttr(ctx, key, element, attr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSetAttr", reflect.TypeOf((*MockClient)(nil).VSetAttr), ctx, key, element, attr)
}

// VSim mocks base method.
func (m *MockClient) VSim(ctx context.Context, key string, val redis.Vector) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSim", ctx, key, val)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VSim indicates an expected call of VSim.
func (mr *MockClientMockRecorder) VSim(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSim", reflect.TypeOf((*MockClient)(nil).VSim), ctx, key, val)
}

// VSimWithArgs mocks base method.
func (m *MockClient) VSimWithArgs(ctx context.Context, key string, val redis.Vector, args *redis.VSimArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithArgs", ctx, key, val, args)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VSimWithArgs indicates an expected call of VSimWithArgs.
func (mr *MockClientMockRecorder) VSimWithArgs(ctx, key, val, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithArgs", reflect.TypeOf((*MockClient)(nil).VSimWithArgs), ctx, key, val, args)
}

// VSimWithArgsWithScores mocks base method.
func (m *MockClient) VSimWithArgsWithScores(ctx context.Context, key string, val redis.Vector, args *redis.VSimArgs) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithArgsWithScores", ctx, key, val, args)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VSimWithArgsWithScores indicates an expected call of VSimWithArgsWithScores.
func (mr *MockClientMockRecorder) VSimWithArgsWithScores(ctx, key, val, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithArgsWithScores", reflect.TypeOf((*MockClient)(nil).VSimWithArgsWithScores), ctx, key, val, args)
}

// VSimWithScores mocks base method.
func (m *MockClient) VSimWithScores(ctx context.Context, key string, val redis.Vector) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithScores", ctx, key, val)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VSimWithScores indicates an expected call of VSimWithScores.
func (mr *MockClientMockRecorder) VSimWithScores(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithScores", reflect.TypeOf((*MockClient)(nil).VSimWithScores), ctx, key, val)
}

// Watch mocks base method.
func (m *MockClient) Watch(ctx context.Context, fn func(*redis.Tx) error, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fn}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockClientMockRecorder) Watch(ctx, fn any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fn}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), varargs...)
}

// XAck mocks base method.
func (m *MockClient) XAck(ctx context.Context, stream, group string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stream, group}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XAck", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XAck indicates an expected call of XAck.
func (mr *MockClientMockRecorder) XAck(ctx, stream, group any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stream, group}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAck", reflect.TypeOf((*MockClient)(nil).XAck), varargs...)
}

// XAdd mocks base method.
func (m *MockClient) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAdd", ctx, a)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// XAdd indicates an expected call of XAdd.
func (mr *MockClientMockRecorder) XAdd(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAdd", reflect.TypeOf((*MockClient)(nil).XAdd), ctx, a)
}

// XAutoClaim mocks base method.
func (m *MockClient) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAutoClaim", ctx, a)
	ret0, _ := ret[0].(*redis.XAutoClaimCmd)
	return ret0
}

// XAutoClaim indicates an expected call of XAutoClaim.
func (mr *MockClientMockRecorder) XAutoClaim(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAutoClaim", reflect.TypeOf((*MockClient)(nil).XAutoClaim), ctx, a)
}

// XAutoClaimJustID mocks base method.
func (m *MockClient) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAutoClaimJustID", ctx, a)
	ret0, _ := ret[0].(*redis.XAutoClaimJustIDCmd)
	return ret0
}

// XAutoClaimJustID indicates an expected call of XAutoClaimJustID.
func (mr *MockClientMockRecorder) XAutoClaimJustID(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAutoClaimJustID", reflect.TypeOf((*MockClient)(nil).XAutoClaimJustID), ctx, a)
}

// XClaim mocks base method.
func (m *MockClient) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaim", ctx, a)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XClaim indicates an expected call of XClaim.
func (mr *MockClientMockRecorder) XClaim(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaim", reflect.TypeOf((*MockClient)(nil).XClaim), ctx, a)
}

// XClaimJustID mocks base method.
func (m *MockClient) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaimJustID", ctx, a)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// XClaimJustID indicates an expected call of XClaimJustID.
func (mr *MockClientMockRecorder) XClaimJustID(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaimJustID", reflect.TypeOf((*MockClient)(nil).XClaimJustID), ctx, a)
}

// XDel mocks base method.
func (m *MockClient) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stream}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XDel indicates an expected call of XDel.
func (mr *MockClientMockRecorder) XDel(ctx, stream any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stream}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XDel", reflect.TypeOf((*MockClient)(nil).XDel), varargs...)
}

// XGroupCreate mocks base method.
func (m *MockClient) XGroupCreate(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreate", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreate indicates an expected call of XGroupCreate.
func (mr *MockClientMockRecorder) XGroupCreate(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreate", reflect.TypeOf((*MockClient)(nil).XGroupCreate), ctx, stream, group, start)
}

// XGroupCreateConsumer mocks base method.
func (m *MockClient) XGroupCreateConsumer(ctx context.Context, stream, group, consumer string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreateConsumer", ctx, stream, group, consumer)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupCreateConsumer indicates an expected call of XGroupCreateConsumer.
func (mr *MockClientMockRecorder) XGroupCreateConsumer(ctx, stream, group, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreateConsumer", reflect.TypeOf((*MockClient)(nil).XGroupCreateConsumer), ctx, stream, group, consumer)
}

// XGroupCreateMkStream mocks base method.
func (m *MockClient) XGroupCreateMkStream(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreateMkStream", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreateMkStream indicates an expected call of XGroupCreateMkStream.
func (mr *MockClientMockRecorder) XGroupCreateMkStream(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreateMkStream", reflect.TypeOf((*MockClient)(nil).XGroupCreateMkStream), ctx, stream, group, start)
}

// XGroupDelConsumer mocks base method.
func (m *MockClient) XGroupDelConsumer(ctx context.Context, stream, group, consumer string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDelConsumer", ctx, stream, group, consumer)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDelConsumer indicates an expected call of XGroupDelConsumer.
func (mr *MockClientMockRecorder) XGroupDelConsumer(ctx, stream, group, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDelConsumer", reflect.TypeOf((*MockClient)(nil).XGroupDelConsumer), ctx, stream, group, consumer)
}

// XGroupDestroy mocks base method.
func (m *MockClient) XGroupDestroy(ctx context.Context, stream, group string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDestroy", ctx, stream, group)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDestroy indicates an expected call of XGroupDestroy.
func (mr *MockClientMockRecorder) XGroupDestroy(ctx, stream, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDestroy", reflect.TypeOf((*MockClient)(nil).XGroupDestroy), ctx, stream, group)
}

// XGroupSetID mocks base method.
func (m *MockClient) XGroupSetID(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupSetID", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupSetID indicates an expected call of XGroupSetID.
func (mr *MockClientMockRecorder) XGroupSetID(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupSetID", reflect.TypeOf((*MockClient)(nil).XGroupSetID), ctx, stream, group, start)
}

// XInfoConsumers mocks base method.
func (m *MockClient) XInfoConsumers(ctx context.Context, key, group string) *redis.XInfoConsumersCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoConsumers", ctx, key, group)
	ret0, _ := ret[0].(*redis.XInfoConsumersCmd)
	return ret0
}

// XInfoConsumers indicates an expected call of XInfoConsumers.
func (mr *MockClientMockRecorder) XInfoConsumers(ctx, key, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoConsumers", reflect.TypeOf((*MockClient)(nil).XInfoConsumers), ctx, key, group)
}

// XInfoGroups mocks base method.
func (m *MockClient) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoGroups", ctx, key)
	ret0, _ := ret[0].(*redis.XInfoGroupsCmd)
	return ret0
}

// XInfoGroups indicates an expected call of XInfoGroups.
func (mr *MockClientMockRecorder) XInfoGroups(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoGroups", reflect.TypeOf((*MockClient)(nil).XInfoGroups), ctx, key)
}

// XInfoStream mocks base method.
func (m *MockClient) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoStream", ctx, key)
	ret0, _ := ret[0].(*redis.XInfoStreamCmd)
	return ret0
}

// XInfoStream indicates an expected call of XInfoStream.
func (mr *MockClientMockRecorder) XInfoStream(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoStream", reflect.TypeOf((*MockClient)(nil).XInfoStream), ctx, key)
}

// XInfoStreamFull mocks base method.
func (m *MockClient) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoStreamFull", ctx, key, count)
	ret0, _ := ret[0].(*redis.XInfoStreamFullCmd)
	return ret0
}

// XInfoStreamFull indicates an expected call of XInfoStreamFull.
func (mr *MockClientMockRecorder) XInfoStreamFull(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoStreamFull", reflect.TypeOf((*MockClient)(nil).XInfoStreamFull), ctx, key, count)
}

// XLen mocks base method.
func (m *MockClient) XLen(ctx context.Context, stream string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XLen", ctx, stream)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XLen indicates an expected call of XLen.
func (mr *MockClientMockRecorder) XLen(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XLen", reflect.TypeOf((*MockClient)(nil).XLen), ctx, stream)
}

// XPending mocks base method.
func (m *MockClient) XPending(ctx context.Context, stream, group string) *redis.XPendingCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPending", ctx, stream, group)
	ret0, _ := ret[0].(*redis.XPendingCmd)
	return ret0
}

// XPending indicates an expected call of XPending.
func (mr *MockClientMockRecorder) XPending(ctx, stream, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPending", reflect.TypeOf((*MockClient)(nil).XPending), ctx, stream, group)
}

// XPendingExt mocks base method.
func (m *MockClient) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPendingExt", ctx, a)
	ret0, _ := ret[0].(*redis.XPendingExtCmd)
	return ret0
}

// XPendingExt indicates an expected call of XPendingExt.
func (mr *MockClientMockRecorder) XPendingExt(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPendingExt", reflect.TypeOf((*MockClient)(nil).XPendingExt), ctx, a)
}

// XRange mocks base method.
func (m *MockClient) XRange(ctx context.Context, stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRange", ctx, stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRange indicates an expected call of XRange.
func (mr *MockClientMockRecorder) XRange(ctx, stream, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRange", reflect.TypeOf((*MockClient)(nil).XRange), ctx, stream, start, stop)
}

// XRangeN mocks base method.
func (m *MockClient) XRangeN(ctx context.Context, stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRangeN", ctx, stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRangeN indicates an expected call of XRangeN.
func (mr *MockClientMockRecorder) XRangeN(ctx, stream, start, stop, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRangeN", reflect.TypeOf((*MockClient)(nil).XRangeN), ctx, stream, start, stop, count)
}

// XRead mocks base method.
func (m *MockClient) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRead", ctx, a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XRead indicates an expected call of XRead.
func (mr *MockClientMockRecorder) XRead(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRead", reflect.TypeOf((*MockClient)(nil).XRead), ctx, a)
}

// XReadGroup mocks base method.
func (m *MockClient) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XReadGroup", ctx, a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadGroup indicates an expected call of XReadGroup.
func (mr *MockClientMockRecorder) XReadGroup(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadGroup", reflect.TypeOf((*MockClient)(nil).XReadGroup), ctx, a)
}

// XReadStreams mocks base method.
func (m *MockClient) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range streams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XReadStreams", varargs...)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadStreams indicates an expected call of XReadStreams.
func (mr *MockClientMockRecorder) XReadStreams(ctx any, streams ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, streams...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadStreams", reflect.TypeOf((*MockClient)(nil).XReadStreams), varargs...)
}

// XRevRange mocks base method.
func (m *MockClient) XRevRange(ctx context.Context, stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRange", ctx, stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRange indicates an expected call of XRevRange.
func (mr *MockClientMockRecorder) XRevRange(ctx, stream, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRange", reflect.TypeOf((*MockClient)(nil).XRevRange), ctx, stream, start, stop)
}

// XRevRangeN mocks base method.
func (m *MockClient) XRevRangeN(ctx context.Context, stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRangeN", ctx, stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRangeN indicates an expected call of XRevRangeN.
func (mr *MockClientMockRecorder) XRevRangeN(ctx, stream, start, stop, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRangeN", reflect.TypeOf((*MockClient)(nil).XRevRangeN), ctx, stream, start, stop, count)
}

// XTrimMaxLen mocks base method.
func (m *MockClient) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMaxLen", ctx, key, maxLen)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMaxLen indicates an expected call of XTrimMaxLen.
func (mr *MockClientMockRecorder) XTrimMaxLen(ctx, key, maxLen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMaxLen", reflect.TypeOf((*MockClient)(nil).XTrimMaxLen), ctx, key, maxLen)
}

// XTrimMaxLenApprox mocks base method.
func (m *MockClient) XTrimMaxLenApprox(ctx context.Context, key string, maxLen, limit int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMaxLenApprox", ctx, key, maxLen, limit)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMaxLenApprox indicates an expected call of XTrimMaxLenApprox.
func (mr *MockClientMockRecorder) XTrimMaxLenApprox(ctx, key, maxLen, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMaxLenApprox", reflect.TypeOf((*MockClient)(nil).XTrimMaxLenApprox), ctx, key, maxLen, limit)
}

// XTrimMinID mocks base method.
func (m *MockClient) XTrimMinID(ctx context.Context, key, minID string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMinID", ctx, key, minID)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMinID indicates an expected call of XTrimMinID.
func (mr *MockClientMockRecorder) XTrimMinID(ctx, key, minID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMinID", reflect.TypeOf((*MockClient)(nil).XTrimMinID), ctx, key, minID)
}

// XTrimMinIDApprox mocks base method.
func (m *MockClient) XTrimMinIDApprox(ctx context.Context, key, minID string, limit int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMinIDApprox", ctx, key, minID, limit)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMinIDApprox indicates an expected call of XTrimMinIDApprox.
func (mr *MockClientMockRecorder) XTrimMinIDApprox(ctx, key, minID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMinIDApprox", reflect.TypeOf((*MockClient)(nil).XTrimMinIDApprox), ctx, key, minID, limit)
}

// ZAdd mocks base method.
func (m *MockClient) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockClientMockRecorder) ZAdd(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockClient)(nil).ZAdd), varargs...)
}

// ZAddArgs mocks base method.
func (m *MockClient) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddArgs", ctx, key, args)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddArgs indicates an expected call of ZAddArgs.
func (mr *MockClientMockRecorder) ZAddArgs(ctx, key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddArgs", reflect.TypeOf((*MockClient)(nil).ZAddArgs), ctx, key, args)
}

// ZAddArgsIncr mocks base method.
func (m *MockClient) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddArgsIncr", ctx, key, args)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZAddArgsIncr indicates an expected call of ZAddArgsIncr.
func (mr *MockClientMockRecorder) ZAddArgsIncr(ctx, key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddArgsIncr", reflect.TypeOf((*MockClient)(nil).ZAddArgsIncr), ctx, key, args)
}

// ZAddGT mocks base method.
func (m *MockClient) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddGT", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddGT indicates an expected call of ZAddGT.
func (mr *MockClientMockRecorder) ZAddGT(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddGT", reflect.TypeOf((*MockClient)(nil).ZAddGT), varargs...)
}

// ZAddLT mocks base method.
func (m *MockClient) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddLT", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddLT indicates an expected call of ZAddLT.
func (mr *MockClientMockRecorder) ZAddLT(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddLT", reflect.TypeOf((*MockClient)(nil).ZAddLT), varargs...)
}

// ZAddNX mocks base method.
func (m *MockClient) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddNX indicates an expected call of ZAddNX.
func (mr *MockClientMockRecorder) ZAddNX(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockClient)(nil).ZAddNX), varargs...)
}

// ZAddXX mocks base method.
func (m *MockClient) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddXX indicates an expected call of ZAddXX.
func (mr *MockClientMockRecorder) ZAddXX(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockClient)(nil).ZAddXX), varargs...)
}

// ZCard mocks base method.
func (m *MockClient) ZCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCard indicates an expected call of ZCard.
func (mr *MockClientMockRecorder) ZCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockClient)(nil).ZCard), ctx, key)
}

// ZCount mocks base method.
func (m *MockClient) ZCount(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCount indicates an expected call of ZCount.
func (mr *MockClientMockRecorder) ZCount(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockClient)(nil).ZCount), ctx, key, min, max)
}

// ZDiff mocks base method.
func (m *MockClient) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiff", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZDiff indicates an expected call of ZDiff.
func (mr *MockClientMockRecorder) ZDiff(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiff", reflect.TypeOf((*MockClient)(nil).ZDiff), varargs...)
}

// ZDiffStore mocks base method.
func (m *MockClient) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiffStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZDiffStore indicates an expected call of ZDiffStore.
func (mr *MockClientMockRecorder) ZDiffStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiffStore", reflect.TypeOf((*MockClient)(nil).ZDiffStore), varargs...)
}

// ZDiffWithScores mocks base method.
func (m *MockClient) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiffWithScores", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZDiffWithScores indicates an expected call of ZDiffWithScores.
func (mr *MockClientMockRecorder) ZDiffWithScores(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiffWithScores", reflect.TypeOf((*MockClient)(nil).ZDiffWithScores), varargs...)
}

// ZIncrBy mocks base method.
func (m *MockClient) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", ctx, key, increment, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncrBy indicates an expected call of ZIncrBy.
func (mr *MockClientMockRecorder) ZIncrBy(ctx, key, increment, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockClient)(nil).ZIncrBy), ctx, key, increment, member)
}

// ZInter mocks base method.
func (m *MockClient) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInter", ctx, store)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZInter indicates an expected call of ZInter.
func (mr *MockClientMockRecorder) ZInter(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInter", reflect.TypeOf((*MockClient)(nil).ZInter), ctx, store)
}

// ZInterCard mocks base method.
func (m *MockClient) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, limit}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZInterCard", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZInterCard indicates an expected call of ZInterCard.
func (mr *MockClientMockRecorder) ZInterCard(ctx, limit any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, limit}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterCard", reflect.TypeOf((*MockClient)(nil).ZInterCard), varargs...)
}

// ZInterStore mocks base method.
func (m *MockClient) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInterStore", ctx, destination, store)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZInterStore indicates an expected call of ZInterStore.
func (mr *MockClientMockRecorder) ZInterStore(ctx, destination, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterStore", reflect.TypeOf((*MockClient)(nil).ZInterStore), ctx, destination, store)
}

// ZInterWithScores mocks base method.
func (m *MockClient) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInterWithScores", ctx, store)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZInterWithScores indicates an expected call of ZInterWithScores.
func (mr *MockClientMockRecorder) ZInterWithScores(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterWithScores", reflect.TypeOf((*MockClient)(nil).ZInterWithScores), ctx, store)
}

// ZLexCount mocks base method.
func (m *MockClient) ZLexCount(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZLexCount", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZLexCount indicates an expected call of ZLexCount.
func (mr *MockClientMockRecorder) ZLexCount(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZLexCount", reflect.TypeOf((*MockClient)(nil).ZLexCount), ctx, key, min, max)
}

// ZMPop mocks base method.
func (m *MockClient) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, order, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZMPop", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceWithKeyCmd)
	return ret0
}

// ZMPop indicates an expected call of ZMPop.
func (mr *MockClientMockRecorder) ZMPop(ctx, order, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, order, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZMPop", reflect.TypeOf((*MockClient)(nil).ZMPop), varargs...)
}

// ZMScore mocks base method.
func (m *MockClient) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZMScore", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// ZMScore indicates an expected call of ZMScore.
func (mr *MockClientMockRecorder) ZMScore(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZMScore", reflect.TypeOf((*MockClient)(nil).ZMScore), varargs...)
}

// ZPopMax mocks base method.
func (m *MockClient) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMax indicates an expected call of ZPopMax.
func (mr *MockClientMockRecorder) ZPopMax(ctx, key any, count ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMax", reflect.TypeOf((*MockClient)(nil).ZPopMax), varargs...)
}

// ZPopMin mocks base method.
func (m *MockClient) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMin indicates an expected call of ZPopMin.
func (mr *MockClientMockRecorder) ZPopMin(ctx, key any, count ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMin", reflect.TypeOf((*MockClient)(nil).ZPopMin), varargs...)
}

// ZRandMember mocks base method.
func (m *MockClient) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRandMember", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRandMember indicates an expected call of ZRandMember.
func (mr *MockClientMockRecorder) ZRandMember(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRandMember", reflect.TypeOf((*MockClient)(nil).ZRandMember), ctx, key, count)
}

// ZRandMemberWithScores mocks base method.
func (m *MockClient) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRandMemberWithScores", ctx, key, count)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRandMemberWithScores indicates an expected call of ZRandMemberWithScores.
func (mr *MockClientMockRecorder) ZRandMemberWithScores(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRandMemberWithScores", reflect.TypeOf((*MockClient)(nil).ZRandMemberWithScores), ctx, key, count)
}

// ZRange mocks base method.
func (m *MockClient) ZRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRange indicates an expected call of ZRange.
func (mr *MockClientMockRecorder) ZRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockClient)(nil).ZRange), ctx, key, start, stop)
}

// ZRangeArgs mocks base method.
func (m *MockClient) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeArgs", ctx, z)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeArgs indicates an expected call of ZRangeArgs.
func (mr *MockClientMockRecorder) ZRangeArgs(ctx, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeArgs", reflect.TypeOf((*MockClient)(nil).ZRangeArgs), ctx, z)
}

// ZRangeArgsWithScores mocks base method.
func (m *MockClient) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeArgsWithScores", ctx, z)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeArgsWithScores indicates an expected call of ZRangeArgsWithScores.
func (mr *MockClientMockRecorder) ZRangeArgsWithScores(ctx, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeArgsWithScores", reflect.TypeOf((*MockClient)(nil).ZRangeArgsWithScores), ctx, z)
}

// ZRangeByLex mocks base method.
func (m *MockClient) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByLex", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByLex indicates an expected call of ZRangeByLex.
func (mr *MockClientMockRecorder) ZRangeByLex(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByLex", reflect.TypeOf((*MockClient)(nil).ZRangeByLex), ctx, key, opt)
}

// ZRangeByScore mocks base method.
func (m *MockClient) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByScore indicates an expected call of ZRangeByScore.
func (mr *MockClientMockRecorder) ZRangeByScore(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockClient)(nil).ZRangeByScore), ctx, key, opt)
}

// ZRangeByScoreWithScores mocks base method.
func (m *MockClient) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScoreWithScores", ctx, key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores.
func (mr *MockClientMockRecorder) ZRangeByScoreWithScores(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockClient)(nil).ZRangeByScoreWithScores), ctx, key, opt)
}

// ZRangeStore mocks base method.
func (m *MockClient) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeStore", ctx, dst, z)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRangeStore indicates an expected call of ZRangeStore.
func (mr *MockClientMockRecorder) ZRangeStore(ctx, dst, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeStore", reflect.TypeOf((*MockClient)(nil).ZRangeStore), ctx, dst, z)
}

// ZRangeWithScores mocks base method.
func (m *MockClient) ZRangeWithScores(ctx context.Context, key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeWithScores", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores.
func (mr *MockClientMockRecorder) ZRangeWithScores(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockClient)(nil).ZRangeWithScores), ctx, key, start, stop)
}

// ZRank mocks base method.
func (m *MockClient) ZRank(ctx context.Context, key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", ctx, key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRank indicates an expected call of ZRank.
func (mr *MockClientMockRecorder) ZRank(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockClient)(nil).ZRank), ctx, key, member)
}

// ZRankWithScore mocks base method.
func (m *MockClient) ZRankWithScore(ctx context.Context, key, member string) *redis.RankWithScoreCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRankWithScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.RankWithScoreCmd)
	return ret0
}

// ZRankWithScore indicates an expected call of ZRankWithScore.
func (mr *MockClientMockRecorder) ZRankWithScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRankWithScore", reflect.TypeOf((*MockClient)(nil).ZRankWithScore), ctx, key, member)
}

// ZRem mocks base method.
func (m *MockClient) ZRem(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockClientMockRecorder) ZRem(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockClient)(nil).ZRem), varargs...)
}

// ZRemRangeByLex mocks base method.
func (m *MockClient) ZRemRangeByLex(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByLex", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByLex indicates an expected call of ZRemRangeByLex.
func (mr *MockClientMockRecorder) ZRemRangeByLex(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByLex", reflect.TypeOf((*MockClient)(nil).ZRemRangeByLex), ctx, key, min, max)
}

// ZRemRangeByRank mocks base method.
func (m *MockClient) ZRemRangeByRank(ctx context.Context, key string, start, stop int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank.
func (mr *MockClientMockRecorder) ZRemRangeByRank(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockClient)(nil).ZRemRangeByRank), ctx, key, start, stop)
}

// ZRemRangeByScore mocks base method.
func (m *MockClient) ZRemRangeByScore(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore.
func (mr *MockClientMockRecorder) ZRemRangeByScore(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockClient)(nil).ZRemRangeByScore), ctx, key, min, max)
}

// ZRevRange mocks base method.
func (m *MockClient) ZRevRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRange indicates an expected call of ZRevRange.
func (mr *MockClientMockRecorder) ZRevRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockClient)(nil).ZRevRange), ctx, key, start, stop)
}

// ZRevRangeByLex mocks base method.
func (m *MockClient) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByLex", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByLex indicates an expected call of ZRevRangeByLex.
func (mr *MockClientMockRecorder) ZRevRangeByLex(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByLex", reflect.TypeOf((*MockClient)(nil).ZRevRangeByLex), ctx, key, opt)
}

// ZRevRangeByScore mocks base method.
func (m *MockClient) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore.
func (mr *MockClientMockRecorder) ZRevRangeByScore(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockClient)(nil).ZRevRangeByScore), ctx, key, opt)
}

// ZRevRangeByScoreWithScores mocks base method.
func (m *MockClient) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScoreWithScores", ctx, key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores.
func (mr *MockClientMockRecorder) ZRevRangeByScoreWithScores(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockClient)(nil).ZRevRangeByScoreWithScores), ctx, key, opt)
}

// ZRevRangeWithScores mocks base method.
func (m *MockClient) ZRevRangeWithScores(ctx context.Context, key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScores", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores.
func (mr *MockClientMockRecorder) ZRevRangeWithScores(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockClient)(nil).ZRevRangeWithScores), ctx, key, start, stop)
}

// ZRevRank mocks base method.
func (m *MockClient) ZRevRank(ctx context.Context, key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", ctx, key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRevRank indicates an expected call of ZRevRank.
func (mr *MockClientMockRecorder) ZRevRank(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockClient)(nil).ZRevRank), ctx, key, member)
}

// ZRevRankWithScore mocks base method.
func (m *MockClient) ZRevRankWithScore(ctx context.Context, key, member string) *redis.RankWithScoreCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRankWithScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.RankWithScoreCmd)
	return ret0
}

// ZRevRankWithScore indicates an expected call of ZRevRankWithScore.
func (mr *MockClientMockRecorder) ZRevRankWithScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRankWithScore", reflect.TypeOf((*MockClient)(nil).ZRevRankWithScore), ctx, key, member)
}

// ZScan mocks base method.
func (m *MockClient) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// ZScan indicates an expected call of ZScan.
func (mr *MockClientMockRecorder) ZScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockClient)(nil).ZScan), ctx, key, cursor, match, count)
}

// ZScore mocks base method.
func (m *MockClient) ZScore(ctx context.Context, key, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZScore indicates an expected call of ZScore.
func (mr *MockClientMockRecorder) ZScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockClient)(nil).ZScore), ctx, key, member)
}

// ZUnion mocks base method.
func (m *MockClient) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnion", ctx, store)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZUnion indicates an expected call of ZUnion.
func (mr *MockClientMockRecorder) ZUnion(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnion", reflect.TypeOf((*MockClient)(nil).ZUnion), ctx, store)
}

// ZUnionStore mocks base method.
func (m *MockClient) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnionStore", ctx, dest, store)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZUnionStore indicates an expected call of ZUnionStore.
func (mr *MockClientMockRecorder) ZUnionStore(ctx, dest, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionStore", reflect.TypeOf((*MockClient)(nil).ZUnionStore), ctx, dest, store)
}

// ZUnionWithScores mocks base method.
func (m *MockClient) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnionWithScores", ctx, store)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZUnionWithScores indicates an expected call of ZUnionWithScores.
func (mr *MockClientMockRecorder) ZUnionWithScores(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionWithScores", reflect.TypeOf((*MockClient)(nil).ZUnionWithScores), ctx, store)
}

// MockPipeliner is a mock of Pipeliner interface.
type MockPipeliner struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinerMockRecorder
	isgomock struct{}
}

// MockPipelinerMockRecorder is the mock recorder for MockPipeliner.
type MockPipelinerMockRecorder struct {
	mock *MockPipeliner
}

// NewMockPipeliner creates a new mock instance.
func NewMockPipeliner(ctrl *gomock.Controller) *MockPipeliner {
	mock := &MockPipeliner{ctrl: ctrl}
	mock.recorder = &MockPipelinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeliner) EXPECT() *MockPipelinerMockRecorder {
	return m.recorder
}

// ACLCat mocks base method.
func (m *MockPipeliner) ACLCat(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLCat", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLCat indicates an expected call of ACLCat.
func (mr *MockPipelinerMockRecorder) ACLCat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLCat", reflect.TypeOf((*MockPipeliner)(nil).ACLCat), ctx)
}

// ACLCatArgs mocks base method.
func (m *MockPipeliner) ACLCatArgs(ctx context.Context, options *redis.ACLCatArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLCatArgs", ctx, options)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLCatArgs indicates an expected call of ACLCatArgs.
func (mr *MockPipelinerMockRecorder) ACLCatArgs(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLCatArgs", reflect.TypeOf((*MockPipeliner)(nil).ACLCatArgs), ctx, options)
}

// ACLDelUser mocks base method.
func (m *MockPipeliner) ACLDelUser(ctx context.Context, username string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLDelUser", ctx, username)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ACLDelUser indicates an expected call of ACLDelUser.
func (mr *MockPipelinerMockRecorder) ACLDelUser(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLDelUser", reflect.TypeOf((*MockPipeliner)(nil).ACLDelUser), ctx, username)
}

// ACLDryRun mocks base method.
func (m *MockPipeliner) ACLDryRun(ctx context.Context, username string, command ...any) *redis.StringCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ACLDryRun", varargs...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ACLDryRun indicates an expected call of ACLDryRun.
func (mr *MockPipelinerMockRecorder) ACLDryRun(ctx, username any, command ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, command...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLDryRun", reflect.TypeOf((*MockPipeliner)(nil).ACLDryRun), varargs...)
}

// ACLList mocks base method.
func (m *MockPipeliner) ACLList(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLList", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ACLList indicates an expected call of ACLList.
func (mr *MockPipelinerMockRecorder) ACLList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLList", reflect.TypeOf((*MockPipeliner)(nil).ACLList), ctx)
}

// ACLLog mocks base method.
func (m *MockPipeliner) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLLog", ctx, count)
	ret0, _ := ret[0].(*redis.ACLLogCmd)
	return ret0
}

// ACLLog indicates an expected call of ACLLog.
func (mr *MockPipelinerMockRecorder) ACLLog(ctx, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLLog", reflect.TypeOf((*MockPipeliner)(nil).ACLLog), ctx, count)
}

// ACLLogReset mocks base method.
func (m *MockPipeliner) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACLLogReset", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ACLLogReset indicates an expected call of ACLLogReset.
func (mr *MockPipelinerMockRecorder) ACLLogReset(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLLogReset", reflect.TypeOf((*MockPipeliner)(nil).ACLLogReset), ctx)
}

// ACLSetUser mocks base method.
func (m *MockPipeliner) ACLSetUser(ctx context.Context, username string, rules ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range rules {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ACLSetUser", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ACLSetUser indicates an expected call of ACLSetUser.
func (mr *MockPipelinerMockRecorder) ACLSetUser(ctx, username any, rules ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, rules...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACLSetUser", reflect.TypeOf((*MockPipeliner)(nil).ACLSetUser), varargs...)
}

// Append mocks base method.
func (m *MockPipeliner) Append(ctx context.Context, key, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockPipelinerMockRecorder) Append(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockPipeliner)(nil).Append), ctx, key, value)
}

// Auth mocks base method.
func (m *MockPipeliner) Auth(ctx context.Context, password string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, password)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockPipelinerMockRecorder) Auth(ctx, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockPipeliner)(nil).Auth), ctx, password)
}

// AuthACL mocks base method.
func (m *MockPipeliner) AuthACL(ctx context.Context, username, password string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthACL", ctx, username, password)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// AuthACL indicates an expected call of AuthACL.
func (mr *MockPipelinerMockRecorder) AuthACL(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthACL", reflect.TypeOf((*MockPipeliner)(nil).AuthACL), ctx, username, password)
}

// BFAdd mocks base method.
func (m *MockPipeliner) BFAdd(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFAdd", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// BFAdd indicates an expected call of BFAdd.
func (mr *MockPipelinerMockRecorder) BFAdd(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFAdd", reflect.TypeOf((*MockPipeliner)(nil).BFAdd), ctx, key, element)
}

// BFCard mocks base method.
func (m *MockPipeliner) BFCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BFCard indicates an expected call of BFCard.
func (mr *MockPipelinerMockRecorder) BFCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFCard", reflect.TypeOf((*MockPipeliner)(nil).BFCard), ctx, key)
}

// BFExists mocks base method.
func (m *MockPipeliner) BFExists(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFExists", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// BFExists indicates an expected call of BFExists.
func (mr *MockPipelinerMockRecorder) BFExists(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFExists", reflect.TypeOf((*MockPipeliner)(nil).BFExists), ctx, key, element)
}

// BFInfo mocks base method.
func (m *MockPipeliner) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfo", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfo indicates an expected call of BFInfo.
func (mr *MockPipelinerMockRecorder) BFInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfo", reflect.TypeOf((*MockPipeliner)(nil).BFInfo), ctx, key)
}

// BFInfoArg mocks base method.
func (m *MockPipeliner) BFInfoArg(ctx context.Context, key, option string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoArg", ctx, key, option)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoArg indicates an expected call of BFInfoArg.
func (mr *MockPipelinerMockRecorder) BFInfoArg(ctx, key, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoArg", reflect.TypeOf((*MockPipeliner)(nil).BFInfoArg), ctx, key, option)
}

// BFInfoCapacity mocks base method.
func (m *MockPipeliner) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoCapacity", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoCapacity indicates an expected call of BFInfoCapacity.
func (mr *MockPipelinerMockRecorder) BFInfoCapacity(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoCapacity", reflect.TypeOf((*MockPipeliner)(nil).BFInfoCapacity), ctx, key)
}

// BFInfoExpansion mocks base method.
func (m *MockPipeliner) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoExpansion", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoExpansion indicates an expected call of BFInfoExpansion.
func (mr *MockPipelinerMockRecorder) BFInfoExpansion(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoExpansion", reflect.TypeOf((*MockPipeliner)(nil).BFInfoExpansion), ctx, key)
}

// BFInfoFilters mocks base method.
func (m *MockPipeliner) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoFilters", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoFilters indicates an expected call of BFInfoFilters.
func (mr *MockPipelinerMockRecorder) BFInfoFilters(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoFilters", reflect.TypeOf((*MockPipeliner)(nil).BFInfoFilters), ctx, key)
}

// BFInfoItems mocks base method.
func (m *MockPipeliner) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoItems", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoItems indicates an expected call of BFInfoItems.
func (mr *MockPipelinerMockRecorder) BFInfoItems(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoItems", reflect.TypeOf((*MockPipeliner)(nil).BFInfoItems), ctx, key)
}

// BFInfoSize mocks base method.
func (m *MockPipeliner) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFInfoSize", ctx, key)
	ret0, _ := ret[0].(*redis.BFInfoCmd)
	return ret0
}

// BFInfoSize indicates an expected call of BFInfoSize.
func (mr *MockPipelinerMockRecorder) BFInfoSize(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInfoSize", reflect.TypeOf((*MockPipeliner)(nil).BFInfoSize), ctx, key)
}

// BFInsert mocks base method.
func (m *MockPipeliner) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFInsert", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFInsert indicates an expected call of BFInsert.
func (mr *MockPipelinerMockRecorder) BFInsert(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFInsert", reflect.TypeOf((*MockPipeliner)(nil).BFInsert), varargs...)
}

// BFLoadChunk mocks base method.
func (m *MockPipeliner) BFLoadChunk(ctx context.Context, key string, iterator int64, data any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFLoadChunk", ctx, key, iterator, data)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFLoadChunk indicates an expected call of BFLoadChunk.
func (mr *MockPipelinerMockRecorder) BFLoadChunk(ctx, key, iterator, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFLoadChunk", reflect.TypeOf((*MockPipeliner)(nil).BFLoadChunk), ctx, key, iterator, data)
}

// BFMAdd mocks base method.
func (m *MockPipeliner) BFMAdd(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFMAdd", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFMAdd indicates an expected call of BFMAdd.
func (mr *MockPipelinerMockRecorder) BFMAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFMAdd", reflect.TypeOf((*MockPipeliner)(nil).BFMAdd), varargs...)
}

// BFMExists mocks base method.
func (m *MockPipeliner) BFMExists(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BFMExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// BFMExists indicates an expected call of BFMExists.
func (mr *MockPipelinerMockRecorder) BFMExists(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFMExists", reflect.TypeOf((*MockPipeliner)(nil).BFMExists), varargs...)
}

// BFReserve mocks base method.
func (m *MockPipeliner) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserve", ctx, key, errorRate, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserve indicates an expected call of BFReserve.
func (mr *MockPipelinerMockRecorder) BFReserve(ctx, key, errorRate, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserve", reflect.TypeOf((*MockPipeliner)(nil).BFReserve), ctx, key, errorRate, capacity)
}

// BFReserveExpansion mocks base method.
func (m *MockPipeliner) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity, expansion int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveExpansion", ctx, key, errorRate, capacity, expansion)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveExpansion indicates an expected call of BFReserveExpansion.
func (mr *MockPipelinerMockRecorder) BFReserveExpansion(ctx, key, errorRate, capacity, expansion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveExpansion", reflect.TypeOf((*MockPipeliner)(nil).BFReserveExpansion), ctx, key, errorRate, capacity, expansion)
}

// BFReserveNonScaling mocks base method.
func (m *MockPipeliner) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveNonScaling", ctx, key, errorRate, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveNonScaling indicates an expected call of BFReserveNonScaling.
func (mr *MockPipelinerMockRecorder) BFReserveNonScaling(ctx, key, errorRate, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveNonScaling", reflect.TypeOf((*MockPipeliner)(nil).BFReserveNonScaling), ctx, key, errorRate, capacity)
}

// BFReserveWithArgs mocks base method.
func (m *MockPipeliner) BFReserveWithArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFReserveWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BFReserveWithArgs indicates an expected call of BFReserveWithArgs.
func (mr *MockPipelinerMockRecorder) BFReserveWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFReserveWithArgs", reflect.TypeOf((*MockPipeliner)(nil).BFReserveWithArgs), ctx, key, options)
}

// BFScanDump mocks base method.
func (m *MockPipeliner) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BFScanDump", ctx, key, iterator)
	ret0, _ := ret[0].(*redis.ScanDumpCmd)
	return ret0
}

// BFScanDump indicates an expected call of BFScanDump.
func (mr *MockPipelinerMockRecorder) BFScanDump(ctx, key, iterator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BFScanDump", reflect.TypeOf((*MockPipeliner)(nil).BFScanDump), ctx, key, iterator)
}

// BLMPop mocks base method.
func (m *MockPipeliner) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout, direction, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLMPop", varargs...)
	ret0, _ := ret[0].(*redis.KeyValuesCmd)
	return ret0
}

// BLMPop indicates an expected call of BLMPop.
func (mr *MockPipelinerMockRecorder) BLMPop(ctx, timeout, direction, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout, direction, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLMPop", reflect.TypeOf((*MockPipeliner)(nil).BLMPop), varargs...)
}

// BLMove mocks base method.
func (m *MockPipeliner) BLMove(ctx context.Context, source, destination, srcpos, destpos string, timeout time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BLMove", ctx, source, destination, srcpos, destpos, timeout)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// BLMove indicates an expected call of BLMove.
func (mr *MockPipelinerMockRecorder) BLMove(ctx, source, destination, srcpos, destpos, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLMove", reflect.TypeOf((*MockPipeliner)(nil).BLMove), ctx, source, destination, srcpos, destpos, timeout)
}

// BLPop mocks base method.
func (m *MockPipeliner) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BLPop indicates an expected call of BLPop.
func (mr *MockPipelinerMockRecorder) BLPop(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockPipeliner)(nil).BLPop), varargs...)
}

// BRPop mocks base method.
func (m *MockPipeliner) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BRPop indicates an expected call of BRPop.
func (mr *MockPipelinerMockRecorder) BRPop(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockPipeliner)(nil).BRPop), varargs...)
}

// BRPopLPush mocks base method.
func (m *MockPipeliner) BRPopLPush(ctx context.Context, source, destination string, timeout time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPopLPush", ctx, source, destination, timeout)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// BRPopLPush indicates an expected call of BRPopLPush.
func (mr *MockPipelinerMockRecorder) BRPopLPush(ctx, source, destination, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPopLPush", reflect.TypeOf((*MockPipeliner)(nil).BRPopLPush), ctx, source, destination, timeout)
}

// BZMPop mocks base method.
func (m *MockPipeliner) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout, order, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZMPop", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceWithKeyCmd)
	return ret0
}

// BZMPop indicates an expected call of BZMPop.
func (mr *MockPipelinerMockRecorder) BZMPop(ctx, timeout, order, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout, order, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZMPop", reflect.TypeOf((*MockPipeliner)(nil).BZMPop), varargs...)
}

// BZPopMax mocks base method.
func (m *MockPipeliner) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMax indicates an expected call of BZPopMax.
func (mr *MockPipelinerMockRecorder) BZPopMax(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMax", reflect.TypeOf((*MockPipeliner)(nil).BZPopMax), varargs...)
}

// BZPopMin mocks base method.
func (m *MockPipeliner) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMin indicates an expected call of BZPopMin.
func (mr *MockPipelinerMockRecorder) BZPopMin(ctx, timeout any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMin", reflect.TypeOf((*MockPipeliner)(nil).BZPopMin), varargs...)
}

// BgRewriteAOF mocks base method.
func (m *MockPipeliner) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgRewriteAOF", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgRewriteAOF indicates an expected call of BgRewriteAOF.
func (mr *MockPipelinerMockRecorder) BgRewriteAOF(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgRewriteAOF", reflect.TypeOf((*MockPipeliner)(nil).BgRewriteAOF), ctx)
}

// BgSave mocks base method.
func (m *MockPipeliner) BgSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgSave indicates an expected call of BgSave.
func (mr *MockPipelinerMockRecorder) BgSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgSave", reflect.TypeOf((*MockPipeliner)(nil).BgSave), ctx)
}

// BitCount mocks base method.
func (m *MockPipeliner) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", ctx, key, bitCount)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitCount indicates an expected call of BitCount.
func (mr *MockPipelinerMockRecorder) BitCount(ctx, key, bitCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockPipeliner)(nil).BitCount), ctx, key, bitCount)
}

// BitField mocks base method.
func (m *MockPipeliner) BitField(ctx context.Context, key string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitField", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// BitField indicates an expected call of BitField.
func (mr *MockPipelinerMockRecorder) BitField(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitField", reflect.TypeOf((*MockPipeliner)(nil).BitField), varargs...)
}

// BitFieldRO mocks base method.
func (m *MockPipeliner) BitFieldRO(ctx context.Context, key string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitFieldRO", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// BitFieldRO indicates an expected call of BitFieldRO.
func (mr *MockPipelinerMockRecorder) BitFieldRO(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitFieldRO", reflect.TypeOf((*MockPipeliner)(nil).BitFieldRO), varargs...)
}

// BitOpAnd mocks base method.
func (m *MockPipeliner) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpAnd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpAnd indicates an expected call of BitOpAnd.
func (mr *MockPipelinerMockRecorder) BitOpAnd(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpAnd", reflect.TypeOf((*MockPipeliner)(nil).BitOpAnd), varargs...)
}

// BitOpNot mocks base method.
func (m *MockPipeliner) BitOpNot(ctx context.Context, destKey, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitOpNot", ctx, destKey, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpNot indicates an expected call of BitOpNot.
func (mr *MockPipelinerMockRecorder) BitOpNot(ctx, destKey, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpNot", reflect.TypeOf((*MockPipeliner)(nil).BitOpNot), ctx, destKey, key)
}

// BitOpOr mocks base method.
func (m *MockPipeliner) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpOr", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpOr indicates an expected call of BitOpOr.
func (mr *MockPipelinerMockRecorder) BitOpOr(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpOr", reflect.TypeOf((*MockPipeliner)(nil).BitOpOr), varargs...)
}

// BitOpXor mocks base method.
func (m *MockPipeliner) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpXor", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpXor indicates an expected call of BitOpXor.
func (mr *MockPipelinerMockRecorder) BitOpXor(ctx, destKey any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpXor", reflect.TypeOf((*MockPipeliner)(nil).BitOpXor), varargs...)
}

// BitPos mocks base method.
func (m *MockPipeliner) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, bit}
	for _, a := range pos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitPos", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitPos indicates an expected call of BitPos.
func (mr *MockPipelinerMockRecorder) BitPos(ctx, key, bit any, pos ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, bit}, pos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockPipeliner)(nil).BitPos), varargs...)
}

// BitPosSpan mocks base method.
func (m *MockPipeliner) BitPosSpan(ctx context.Context, key string, bit int8, start, end int64, span string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitPosSpan", ctx, key, bit, start, end, span)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitPosSpan indicates an expected call of BitPosSpan.
func (mr *MockPipelinerMockRecorder) BitPosSpan(ctx, key, bit, start, end, span any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPosSpan", reflect.TypeOf((*MockPipeliner)(nil).BitPosSpan), ctx, key, bit, start, end, span)
}

// CFAdd mocks base method.
func (m *MockPipeliner) CFAdd(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFAdd", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFAdd indicates an expected call of CFAdd.
func (mr *MockPipelinerMockRecorder) CFAdd(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFAdd", reflect.TypeOf((*MockPipeliner)(nil).CFAdd), ctx, key, element)
}

// CFAddNX mocks base method.
func (m *MockPipeliner) CFAddNX(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFAddNX", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFAddNX indicates an expected call of CFAddNX.
func (mr *MockPipelinerMockRecorder) CFAddNX(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFAddNX", reflect.TypeOf((*MockPipeliner)(nil).CFAddNX), ctx, key, element)
}

// CFCount mocks base method.
func (m *MockPipeliner) CFCount(ctx context.Context, key string, element any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFCount", ctx, key, element)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// CFCount indicates an expected call of CFCount.
func (mr *MockPipelinerMockRecorder) CFCount(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFCount", reflect.TypeOf((*MockPipeliner)(nil).CFCount), ctx, key, element)
}

// CFDel mocks base method.
func (m *MockPipeliner) CFDel(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFDel", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFDel indicates an expected call of CFDel.
func (mr *MockPipelinerMockRecorder) CFDel(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFDel", reflect.TypeOf((*MockPipeliner)(nil).CFDel), ctx, key, element)
}

// CFExists mocks base method.
func (m *MockPipeliner) CFExists(ctx context.Context, key string, element any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFExists", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// CFExists indicates an expected call of CFExists.
func (mr *MockPipelinerMockRecorder) CFExists(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFExists", reflect.TypeOf((*MockPipeliner)(nil).CFExists), ctx, key, element)
}

// CFInfo mocks base method.
func (m *MockPipeliner) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFInfo", ctx, key)
	ret0, _ := ret[0].(*redis.CFInfoCmd)
	return ret0
}

// CFInfo indicates an expected call of CFInfo.
func (mr *MockPipelinerMockRecorder) CFInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInfo", reflect.TypeOf((*MockPipeliner)(nil).CFInfo), ctx, key)
}

// CFInsert mocks base method.
func (m *MockPipeliner) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFInsert", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// CFInsert indicates an expected call of CFInsert.
func (mr *MockPipelinerMockRecorder) CFInsert(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInsert", reflect.TypeOf((*MockPipeliner)(nil).CFInsert), varargs...)
}

// CFInsertNX mocks base method.
func (m *MockPipeliner) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFInsertNX", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CFInsertNX indicates an expected call of CFInsertNX.
func (mr *MockPipelinerMockRecorder) CFInsertNX(ctx, key, options any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFInsertNX", reflect.TypeOf((*MockPipeliner)(nil).CFInsertNX), varargs...)
}

// CFLoadChunk mocks base method.
func (m *MockPipeliner) CFLoadChunk(ctx context.Context, key string, iterator int64, data any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFLoadChunk", ctx, key, iterator, data)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFLoadChunk indicates an expected call of CFLoadChunk.
func (mr *MockPipelinerMockRecorder) CFLoadChunk(ctx, key, iterator, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFLoadChunk", reflect.TypeOf((*MockPipeliner)(nil).CFLoadChunk), ctx, key, iterator, data)
}

// CFMExists mocks base method.
func (m *MockPipeliner) CFMExists(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CFMExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// CFMExists indicates an expected call of CFMExists.
func (mr *MockPipelinerMockRecorder) CFMExists(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFMExists", reflect.TypeOf((*MockPipeliner)(nil).CFMExists), varargs...)
}

// CFReserve mocks base method.
func (m *MockPipeliner) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserve", ctx, key, capacity)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserve indicates an expected call of CFReserve.
func (mr *MockPipelinerMockRecorder) CFReserve(ctx, key, capacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserve", reflect.TypeOf((*MockPipeliner)(nil).CFReserve), ctx, key, capacity)
}

// CFReserveBucketSize mocks base method.
func (m *MockPipeliner) CFReserveBucketSize(ctx context.Context, key string, capacity, bucketsize int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveBucketSize", ctx, key, capacity, bucketsize)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveBucketSize indicates an expected call of CFReserveBucketSize.
func (mr *MockPipelinerMockRecorder) CFReserveBucketSize(ctx, key, capacity, bucketsize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveBucketSize", reflect.TypeOf((*MockPipeliner)(nil).CFReserveBucketSize), ctx, key, capacity, bucketsize)
}

// CFReserveExpansion mocks base method.
func (m *MockPipeliner) CFReserveExpansion(ctx context.Context, key string, capacity, expansion int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveExpansion", ctx, key, capacity, expansion)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveExpansion indicates an expected call of CFReserveExpansion.
func (mr *MockPipelinerMockRecorder) CFReserveExpansion(ctx, key, capacity, expansion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveExpansion", reflect.TypeOf((*MockPipeliner)(nil).CFReserveExpansion), ctx, key, capacity, expansion)
}

// CFReserveMaxIterations mocks base method.
func (m *MockPipeliner) CFReserveMaxIterations(ctx context.Context, key string, capacity, maxiterations int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveMaxIterations", ctx, key, capacity, maxiterations)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveMaxIterations indicates an expected call of CFReserveMaxIterations.
func (mr *MockPipelinerMockRecorder) CFReserveMaxIterations(ctx, key, capacity, maxiterations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveMaxIterations", reflect.TypeOf((*MockPipeliner)(nil).CFReserveMaxIterations), ctx, key, capacity, maxiterations)
}

// CFReserveWithArgs mocks base method.
func (m *MockPipeliner) CFReserveWithArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFReserveWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CFReserveWithArgs indicates an expected call of CFReserveWithArgs.
func (mr *MockPipelinerMockRecorder) CFReserveWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFReserveWithArgs", reflect.TypeOf((*MockPipeliner)(nil).CFReserveWithArgs), ctx, key, options)
}

// CFScanDump mocks base method.
func (m *MockPipeliner) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFScanDump", ctx, key, iterator)
	ret0, _ := ret[0].(*redis.ScanDumpCmd)
	return ret0
}

// CFScanDump indicates an expected call of CFScanDump.
func (mr *MockPipelinerMockRecorder) CFScanDump(ctx, key, iterator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFScanDump", reflect.TypeOf((*MockPipeliner)(nil).CFScanDump), ctx, key, iterator)
}

// CMSIncrBy mocks base method.
func (m *MockPipeliner) CMSIncrBy(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSIncrBy", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CMSIncrBy indicates an expected call of CMSIncrBy.
func (mr *MockPipelinerMockRecorder) CMSIncrBy(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSIncrBy", reflect.TypeOf((*MockPipeliner)(nil).CMSIncrBy), varargs...)
}

// CMSInfo mocks base method.
func (m *MockPipeliner) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInfo", ctx, key)
	ret0, _ := ret[0].(*redis.CMSInfoCmd)
	return ret0
}

// CMSInfo indicates an expected call of CMSInfo.
func (mr *MockPipelinerMockRecorder) CMSInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInfo", reflect.TypeOf((*MockPipeliner)(nil).CMSInfo), ctx, key)
}

// CMSInitByDim mocks base method.
func (m *MockPipeliner) CMSInitByDim(ctx context.Context, key string, width, height int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInitByDim", ctx, key, width, height)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSInitByDim indicates an expected call of CMSInitByDim.
func (mr *MockPipelinerMockRecorder) CMSInitByDim(ctx, key, width, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInitByDim", reflect.TypeOf((*MockPipeliner)(nil).CMSInitByDim), ctx, key, width, height)
}

// CMSInitByProb mocks base method.
func (m *MockPipeliner) CMSInitByProb(ctx context.Context, key string, errorRate, probability float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSInitByProb", ctx, key, errorRate, probability)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSInitByProb indicates an expected call of CMSInitByProb.
func (mr *MockPipelinerMockRecorder) CMSInitByProb(ctx, key, errorRate, probability any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSInitByProb", reflect.TypeOf((*MockPipeliner)(nil).CMSInitByProb), ctx, key, errorRate, probability)
}

// CMSMerge mocks base method.
func (m *MockPipeliner) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey}
	for _, a := range sourceKeys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSMerge indicates an expected call of CMSMerge.
func (mr *MockPipelinerMockRecorder) CMSMerge(ctx, destKey any, sourceKeys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey}, sourceKeys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSMerge", reflect.TypeOf((*MockPipeliner)(nil).CMSMerge), varargs...)
}

// CMSMergeWithWeight mocks base method.
func (m *MockPipeliner) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMSMergeWithWeight", ctx, destKey, sourceKeys)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// CMSMergeWithWeight indicates an expected call of CMSMergeWithWeight.
func (mr *MockPipelinerMockRecorder) CMSMergeWithWeight(ctx, destKey, sourceKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSMergeWithWeight", reflect.TypeOf((*MockPipeliner)(nil).CMSMergeWithWeight), ctx, destKey, sourceKeys)
}

// CMSQuery mocks base method.
func (m *MockPipeliner) CMSQuery(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CMSQuery", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// CMSQuery indicates an expected call of CMSQuery.
func (mr *MockPipelinerMockRecorder) CMSQuery(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMSQuery", reflect.TypeOf((*MockPipeliner)(nil).CMSQuery), varargs...)
}

// ClientGetName mocks base method.
func (m *MockPipeliner) ClientGetName(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientGetName", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientGetName indicates an expected call of ClientGetName.
func (mr *MockPipelinerMockRecorder) ClientGetName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientGetName", reflect.TypeOf((*MockPipeliner)(nil).ClientGetName), ctx)
}

// ClientID mocks base method.
func (m *MockPipeliner) ClientID(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientID", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientID indicates an expected call of ClientID.
func (mr *MockPipelinerMockRecorder) ClientID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientID", reflect.TypeOf((*MockPipeliner)(nil).ClientID), ctx)
}

// ClientInfo mocks base method.
func (m *MockPipeliner) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientInfo", ctx)
	ret0, _ := ret[0].(*redis.ClientInfoCmd)
	return ret0
}

// ClientInfo indicates an expected call of ClientInfo.
func (mr *MockPipelinerMockRecorder) ClientInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientInfo", reflect.TypeOf((*MockPipeliner)(nil).ClientInfo), ctx)
}

// ClientKill mocks base method.
func (m *MockPipeliner) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientKill", ctx, ipPort)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClientKill indicates an expected call of ClientKill.
func (mr *MockPipelinerMockRecorder) ClientKill(ctx, ipPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKill", reflect.TypeOf((*MockPipeliner)(nil).ClientKill), ctx, ipPort)
}

// ClientKillByFilter mocks base method.
func (m *MockPipeliner) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClientKillByFilter", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientKillByFilter indicates an expected call of ClientKillByFilter.
func (mr *MockPipelinerMockRecorder) ClientKillByFilter(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKillByFilter", reflect.TypeOf((*MockPipeliner)(nil).ClientKillByFilter), varargs...)
}

// ClientList mocks base method.
func (m *MockPipeliner) ClientList(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientList", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientList indicates an expected call of ClientList.
func (mr *MockPipelinerMockRecorder) ClientList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientList", reflect.TypeOf((*MockPipeliner)(nil).ClientList), ctx)
}

// ClientPause mocks base method.
func (m *MockPipeliner) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientPause", ctx, dur)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientPause indicates an expected call of ClientPause.
func (mr *MockPipelinerMockRecorder) ClientPause(ctx, dur any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientPause", reflect.TypeOf((*MockPipeliner)(nil).ClientPause), ctx, dur)
}

// ClientSetInfo mocks base method.
func (m *MockPipeliner) ClientSetInfo(ctx context.Context, info redis.LibraryInfo) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSetInfo", ctx, info)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClientSetInfo indicates an expected call of ClientSetInfo.
func (mr *MockPipelinerMockRecorder) ClientSetInfo(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSetInfo", reflect.TypeOf((*MockPipeliner)(nil).ClientSetInfo), ctx, info)
}

// ClientSetName mocks base method.
func (m *MockPipeliner) ClientSetName(ctx context.Context, name string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSetName", ctx, name)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientSetName indicates an expected call of ClientSetName.
func (mr *MockPipelinerMockRecorder) ClientSetName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSetName", reflect.TypeOf((*MockPipeliner)(nil).ClientSetName), ctx, name)
}

// ClientUnblock mocks base method.
func (m *MockPipeliner) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnblock", ctx, id)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientUnblock indicates an expected call of ClientUnblock.
func (mr *MockPipelinerMockRecorder) ClientUnblock(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnblock", reflect.TypeOf((*MockPipeliner)(nil).ClientUnblock), ctx, id)
}

// ClientUnblockWithError mocks base method.
func (m *MockPipeliner) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnblockWithError", ctx, id)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientUnblockWithError indicates an expected call of ClientUnblockWithError.
func (mr *MockPipelinerMockRecorder) ClientUnblockWithError(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnblockWithError", reflect.TypeOf((*MockPipeliner)(nil).ClientUnblockWithError), ctx, id)
}

// ClientUnpause mocks base method.
func (m *MockPipeliner) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientUnpause", ctx)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientUnpause indicates an expected call of ClientUnpause.
func (mr *MockPipelinerMockRecorder) ClientUnpause(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientUnpause", reflect.TypeOf((*MockPipeliner)(nil).ClientUnpause), ctx)
}

// ClusterAddSlots mocks base method.
func (m *MockPipeliner) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterAddSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlots indicates an expected call of ClusterAddSlots.
func (mr *MockPipelinerMockRecorder) ClusterAddSlots(ctx any, slots ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, slots...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlots", reflect.TypeOf((*MockPipeliner)(nil).ClusterAddSlots), varargs...)
}

// ClusterAddSlotsRange mocks base method.
func (m *MockPipeliner) ClusterAddSlotsRange(ctx context.Context, min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAddSlotsRange", ctx, min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlotsRange indicates an expected call of ClusterAddSlotsRange.
func (mr *MockPipelinerMockRecorder) ClusterAddSlotsRange(ctx, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlotsRange", reflect.TypeOf((*MockPipeliner)(nil).ClusterAddSlotsRange), ctx, min, max)
}

// ClusterCountFailureReports mocks base method.
func (m *MockPipeliner) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountFailureReports", ctx, nodeID)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountFailureReports indicates an expected call of ClusterCountFailureReports.
func (mr *MockPipelinerMockRecorder) ClusterCountFailureReports(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountFailureReports", reflect.TypeOf((*MockPipeliner)(nil).ClusterCountFailureReports), ctx, nodeID)
}

// ClusterCountKeysInSlot mocks base method.
func (m *MockPipeliner) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountKeysInSlot", ctx, slot)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountKeysInSlot indicates an expected call of ClusterCountKeysInSlot.
func (mr *MockPipelinerMockRecorder) ClusterCountKeysInSlot(ctx, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountKeysInSlot", reflect.TypeOf((*MockPipeliner)(nil).ClusterCountKeysInSlot), ctx, slot)
}

// ClusterDelSlots mocks base method.
func (m *MockPipeliner) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterDelSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlots indicates an expected call of ClusterDelSlots.
func (mr *MockPipelinerMockRecorder) ClusterDelSlots(ctx any, slots ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, slots...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlots", reflect.TypeOf((*MockPipeliner)(nil).ClusterDelSlots), varargs...)
}

// ClusterDelSlotsRange mocks base method.
func (m *MockPipeliner) ClusterDelSlotsRange(ctx context.Context, min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelSlotsRange", ctx, min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlotsRange indicates an expected call of ClusterDelSlotsRange.
func (mr *MockPipelinerMockRecorder) ClusterDelSlotsRange(ctx, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlotsRange", reflect.TypeOf((*MockPipeliner)(nil).ClusterDelSlotsRange), ctx, min, max)
}

// ClusterFailover mocks base method.
func (m *MockPipeliner) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterFailover", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterFailover indicates an expected call of ClusterFailover.
func (mr *MockPipelinerMockRecorder) ClusterFailover(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterFailover", reflect.TypeOf((*MockPipeliner)(nil).ClusterFailover), ctx)
}

// ClusterForget mocks base method.
func (m *MockPipeliner) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterForget", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterForget indicates an expected call of ClusterForget.
func (mr *MockPipelinerMockRecorder) ClusterForget(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterForget", reflect.TypeOf((*MockPipeliner)(nil).ClusterForget), ctx, nodeID)
}

// ClusterGetKeysInSlot mocks base method.
func (m *MockPipeliner) ClusterGetKeysInSlot(ctx context.Context, slot, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterGetKeysInSlot", ctx, slot, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterGetKeysInSlot indicates an expected call of ClusterGetKeysInSlot.
func (mr *MockPipelinerMockRecorder) ClusterGetKeysInSlot(ctx, slot, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGetKeysInSlot", reflect.TypeOf((*MockPipeliner)(nil).ClusterGetKeysInSlot), ctx, slot, count)
}

// ClusterInfo mocks base method.
func (m *MockPipeliner) ClusterInfo(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockPipelinerMockRecorder) ClusterInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockPipeliner)(nil).ClusterInfo), ctx)
}

// ClusterKeySlot mocks base method.
func (m *MockPipeliner) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterKeySlot", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterKeySlot indicates an expected call of ClusterKeySlot.
func (mr *MockPipelinerMockRecorder) ClusterKeySlot(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterKeySlot", reflect.TypeOf((*MockPipeliner)(nil).ClusterKeySlot), ctx, key)
}

// ClusterLinks mocks base method.
func (m *MockPipeliner) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterLinks", ctx)
	ret0, _ := ret[0].(*redis.ClusterLinksCmd)
	return ret0
}

// ClusterLinks indicates an expected call of ClusterLinks.
func (mr *MockPipelinerMockRecorder) ClusterLinks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterLinks", reflect.TypeOf((*MockPipeliner)(nil).ClusterLinks), ctx)
}

// ClusterMeet mocks base method.
func (m *MockPipeliner) ClusterMeet(ctx context.Context, host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMeet", ctx, host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterMeet indicates an expected call of ClusterMeet.
func (mr *MockPipelinerMockRecorder) ClusterMeet(ctx, host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMeet", reflect.TypeOf((*MockPipeliner)(nil).ClusterMeet), ctx, host, port)
}

// ClusterMyID mocks base method.
func (m *MockPipeliner) ClusterMyID(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMyID", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterMyID indicates an expected call of ClusterMyID.
func (mr *MockPipelinerMockRecorder) ClusterMyID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMyID", reflect.TypeOf((*MockPipeliner)(nil).ClusterMyID), ctx)
}

// ClusterMyShardID mocks base method.
func (m *MockPipeliner) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMyShardID", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterMyShardID indicates an expected call of ClusterMyShardID.
func (mr *MockPipelinerMockRecorder) ClusterMyShardID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMyShardID", reflect.TypeOf((*MockPipeliner)(nil).ClusterMyShardID), ctx)
}

// ClusterNodes mocks base method.
func (m *MockPipeliner) ClusterNodes(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterNodes", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterNodes indicates an expected call of ClusterNodes.
func (mr *MockPipelinerMockRecorder) ClusterNodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterNodes", reflect.TypeOf((*MockPipeliner)(nil).ClusterNodes), ctx)
}

// ClusterReplicate mocks base method.
func (m *MockPipeliner) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterReplicate", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterReplicate indicates an expected call of ClusterReplicate.
func (mr *MockPipelinerMockRecorder) ClusterReplicate(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterReplicate", reflect.TypeOf((*MockPipeliner)(nil).ClusterReplicate), ctx, nodeID)
}

// ClusterResetHard mocks base method.
func (m *MockPipeliner) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetHard", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetHard indicates an expected call of ClusterResetHard.
func (mr *MockPipelinerMockRecorder) ClusterResetHard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetHard", reflect.TypeOf((*MockPipeliner)(nil).ClusterResetHard), ctx)
}

// ClusterResetSoft mocks base method.
func (m *MockPipeliner) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetSoft", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetSoft indicates an expected call of ClusterResetSoft.
func (mr *MockPipelinerMockRecorder) ClusterResetSoft(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetSoft", reflect.TypeOf((*MockPipeliner)(nil).ClusterResetSoft), ctx)
}

// ClusterSaveConfig mocks base method.
func (m *MockPipeliner) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSaveConfig", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterSaveConfig indicates an expected call of ClusterSaveConfig.
func (mr *MockPipelinerMockRecorder) ClusterSaveConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSaveConfig", reflect.TypeOf((*MockPipeliner)(nil).ClusterSaveConfig), ctx)
}

// ClusterShards mocks base method.
func (m *MockPipeliner) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterShards", ctx)
	ret0, _ := ret[0].(*redis.ClusterShardsCmd)
	return ret0
}

// ClusterShards indicates an expected call of ClusterShards.
func (mr *MockPipelinerMockRecorder) ClusterShards(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterShards", reflect.TypeOf((*MockPipeliner)(nil).ClusterShards), ctx)
}

// ClusterSlaves mocks base method.
func (m *MockPipeliner) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlaves", ctx, nodeID)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterSlaves indicates an expected call of ClusterSlaves.
func (mr *MockPipelinerMockRecorder) ClusterSlaves(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlaves", reflect.TypeOf((*MockPipeliner)(nil).ClusterSlaves), ctx, nodeID)
}

// ClusterSlots mocks base method.
func (m *MockPipeliner) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlots", ctx)
	ret0, _ := ret[0].(*redis.ClusterSlotsCmd)
	return ret0
}

// ClusterSlots indicates an expected call of ClusterSlots.
func (mr *MockPipelinerMockRecorder) ClusterSlots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlots", reflect.TypeOf((*MockPipeliner)(nil).ClusterSlots), ctx)
}

// Command mocks base method.
func (m *MockPipeliner) Command(ctx context.Context) *redis.CommandsInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", ctx)
	ret0, _ := ret[0].(*redis.CommandsInfoCmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockPipelinerMockRecorder) Command(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockPipeliner)(nil).Command), ctx)
}

// CommandGetKeys mocks base method.
func (m *MockPipeliner) CommandGetKeys(ctx context.Context, commands ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandGetKeys", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// CommandGetKeys indicates an expected call of CommandGetKeys.
func (mr *MockPipelinerMockRecorder) CommandGetKeys(ctx any, commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, commands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetKeys", reflect.TypeOf((*MockPipeliner)(nil).CommandGetKeys), varargs...)
}

// CommandGetKeysAndFlags mocks base method.
func (m *MockPipeliner) CommandGetKeysAndFlags(ctx context.Context, commands ...any) *redis.KeyFlagsCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range commands {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandGetKeysAndFlags", varargs...)
	ret0, _ := ret[0].(*redis.KeyFlagsCmd)
	return ret0
}

// CommandGetKeysAndFlags indicates an expected call of CommandGetKeysAndFlags.
func (mr *MockPipelinerMockRecorder) CommandGetKeysAndFlags(ctx any, commands ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, commands...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandGetKeysAndFlags", reflect.TypeOf((*MockPipeliner)(nil).CommandGetKeysAndFlags), varargs...)
}

// CommandList mocks base method.
func (m *MockPipeliner) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandList", ctx, filter)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// CommandList indicates an expected call of CommandList.
func (mr *MockPipelinerMockRecorder) CommandList(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandList", reflect.TypeOf((*MockPipeliner)(nil).CommandList), ctx, filter)
}

// ConfigGet mocks base method.
func (m *MockPipeliner) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigGet", ctx, parameter)
	ret0, _ := ret[0].(*redis.MapStringStringCmd)
	return ret0
}

// ConfigGet indicates an expected call of ConfigGet.
func (mr *MockPipelinerMockRecorder) ConfigGet(ctx, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigGet", reflect.TypeOf((*MockPipeliner)(nil).ConfigGet), ctx, parameter)
}

// ConfigResetStat mocks base method.
func (m *MockPipeliner) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigResetStat", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigResetStat indicates an expected call of ConfigResetStat.
func (mr *MockPipelinerMockRecorder) ConfigResetStat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigResetStat", reflect.TypeOf((*MockPipeliner)(nil).ConfigResetStat), ctx)
}

// ConfigRewrite mocks base method.
func (m *MockPipeliner) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRewrite", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigRewrite indicates an expected call of ConfigRewrite.
func (mr *MockPipelinerMockRecorder) ConfigRewrite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRewrite", reflect.TypeOf((*MockPipeliner)(nil).ConfigRewrite), ctx)
}

// ConfigSet mocks base method.
func (m *MockPipeliner) ConfigSet(ctx context.Context, parameter, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSet", ctx, parameter, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigSet indicates an expected call of ConfigSet.
func (mr *MockPipelinerMockRecorder) ConfigSet(ctx, parameter, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSet", reflect.TypeOf((*MockPipeliner)(nil).ConfigSet), ctx, parameter, value)
}

// Copy mocks base method.
func (m *MockPipeliner) Copy(ctx context.Context, sourceKey, destKey string, db int, replace bool) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", ctx, sourceKey, destKey, db, replace)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockPipelinerMockRecorder) Copy(ctx, sourceKey, destKey, db, replace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockPipeliner)(nil).Copy), ctx, sourceKey, destKey, db, replace)
}

// DBSize mocks base method.
func (m *MockPipeliner) DBSize(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBSize", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DBSize indicates an expected call of DBSize.
func (mr *MockPipelinerMockRecorder) DBSize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBSize", reflect.TypeOf((*MockPipeliner)(nil).DBSize), ctx)
}

// DebugObject mocks base method.
func (m *MockPipeliner) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugObject", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// DebugObject indicates an expected call of DebugObject.
func (mr *MockPipelinerMockRecorder) DebugObject(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugObject", reflect.TypeOf((*MockPipeliner)(nil).DebugObject), ctx, key)
}

// Decr mocks base method.
func (m *MockPipeliner) Decr(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockPipelinerMockRecorder) Decr(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockPipeliner)(nil).Decr), ctx, key)
}

// DecrBy mocks base method.
func (m *MockPipeliner) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", ctx, key, decrement)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DecrBy indicates an expected call of DecrBy.
func (mr *MockPipelinerMockRecorder) DecrBy(ctx, key, decrement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockPipeliner)(nil).DecrBy), ctx, key, decrement)
}

// Del mocks base method.
func (m *MockPipeliner) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockPipelinerMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockPipeliner)(nil).Del), varargs...)
}

// Discard mocks base method.
func (m *MockPipeliner) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockPipelinerMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockPipeliner)(nil).Discard))
}

// Do mocks base method.
func (m *MockPipeliner) Do(ctx context.Context, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockPipelinerMockRecorder) Do(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockPipeliner)(nil).Do), varargs...)
}

// Dump mocks base method.
func (m *MockPipeliner) Dump(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockPipelinerMockRecorder) Dump(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockPipeliner)(nil).Dump), ctx, key)
}

// Echo mocks base method.
func (m *MockPipeliner) Echo(ctx context.Context, message any) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", ctx, message)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockPipelinerMockRecorder) Echo(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockPipeliner)(nil).Echo), ctx, message)
}

// Eval mocks base method.
func (m *MockPipeliner) Eval(ctx context.Context, script string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Eval", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockPipelinerMockRecorder) Eval(ctx, script, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockPipeliner)(nil).Eval), varargs...)
}

// EvalRO mocks base method.
func (m *MockPipeliner) EvalRO(ctx context.Context, script string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalRO indicates an expected call of EvalRO.
func (mr *MockPipelinerMockRecorder) EvalRO(ctx, script, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalRO", reflect.TypeOf((*MockPipeliner)(nil).EvalRO), varargs...)
}

// EvalSha mocks base method.
func (m *MockPipeliner) EvalSha(ctx context.Context, sha1 string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalSha", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalSha indicates an expected call of EvalSha.
func (mr *MockPipelinerMockRecorder) EvalSha(ctx, sha1, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSha", reflect.TypeOf((*MockPipeliner)(nil).EvalSha), varargs...)
}

// EvalShaRO mocks base method.
func (m *MockPipeliner) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalShaRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalShaRO indicates an expected call of EvalShaRO.
func (mr *MockPipelinerMockRecorder) EvalShaRO(ctx, sha1, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalShaRO", reflect.TypeOf((*MockPipeliner)(nil).EvalShaRO), varargs...)
}

// Exec mocks base method.
func (m *MockPipeliner) Exec(ctx context.Context) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPipelinerMockRecorder) Exec(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPipeliner)(nil).Exec), ctx)
}

// Exists mocks base method.
func (m *MockPipeliner) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockPipelinerMockRecorder) Exists(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPipeliner)(nil).Exists), varargs...)
}

// Expire mocks base method.
func (m *MockPipeliner) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockPipelinerMockRecorder) Expire(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockPipeliner)(nil).Expire), ctx, key, expiration)
}

// ExpireAt mocks base method.
func (m *MockPipeliner) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", ctx, key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireAt indicates an expected call of ExpireAt.
func (mr *MockPipelinerMockRecorder) ExpireAt(ctx, key, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockPipeliner)(nil).ExpireAt), ctx, key, tm)
}

// ExpireGT mocks base method.
func (m *MockPipeliner) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireGT", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireGT indicates an expected call of ExpireGT.
func (mr *MockPipelinerMockRecorder) ExpireGT(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireGT", reflect.TypeOf((*MockPipeliner)(nil).ExpireGT), ctx, key, expiration)
}

// ExpireLT mocks base method.
func (m *MockPipeliner) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireLT", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireLT indicates an expected call of ExpireLT.
func (mr *MockPipelinerMockRecorder) ExpireLT(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireLT", reflect.TypeOf((*MockPipeliner)(nil).ExpireLT), ctx, key, expiration)
}

// ExpireNX mocks base method.
func (m *MockPipeliner) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireNX", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireNX indicates an expected call of ExpireNX.
func (mr *MockPipelinerMockRecorder) ExpireNX(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireNX", reflect.TypeOf((*MockPipeliner)(nil).ExpireNX), ctx, key, expiration)
}

// ExpireTime mocks base method.
func (m *MockPipeliner) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// ExpireTime indicates an expected call of ExpireTime.
func (mr *MockPipelinerMockRecorder) ExpireTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireTime", reflect.TypeOf((*MockPipeliner)(nil).ExpireTime), ctx, key)
}

// ExpireXX mocks base method.
func (m *MockPipeliner) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireXX", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireXX indicates an expected call of ExpireXX.
func (mr *MockPipelinerMockRecorder) ExpireXX(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireXX", reflect.TypeOf((*MockPipeliner)(nil).ExpireXX), ctx, key, expiration)
}

// FCall mocks base method.
func (m *MockPipeliner) FCall(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCall", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCall indicates an expected call of FCall.
func (mr *MockPipelinerMockRecorder) FCall(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCall", reflect.TypeOf((*MockPipeliner)(nil).FCall), varargs...)
}

// FCallRO mocks base method.
func (m *MockPipeliner) FCallRO(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCallRO", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCallRO indicates an expected call of FCallRO.
func (mr *MockPipelinerMockRecorder) FCallRO(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCallRO", reflect.TypeOf((*MockPipeliner)(nil).FCallRO), varargs...)
}

// FCallRo mocks base method.
func (m *MockPipeliner) FCallRo(ctx context.Context, function string, keys []string, args ...any) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, function, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FCallRo", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// FCallRo indicates an expected call of FCallRo.
func (mr *MockPipelinerMockRecorder) FCallRo(ctx, function, keys any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, function, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FCallRo", reflect.TypeOf((*MockPipeliner)(nil).FCallRo), varargs...)
}

// FTAggregate mocks base method.
func (m *MockPipeliner) FTAggregate(ctx context.Context, index, query string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAggregate", ctx, index, query)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// FTAggregate indicates an expected call of FTAggregate.
func (mr *MockPipelinerMockRecorder) FTAggregate(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAggregate", reflect.TypeOf((*MockPipeliner)(nil).FTAggregate), ctx, index, query)
}

// FTAggregateWithArgs mocks base method.
func (m *MockPipeliner) FTAggregateWithArgs(ctx context.Context, index, query string, options *redis.FTAggregateOptions) *redis.AggregateCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAggregateWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.AggregateCmd)
	return ret0
}

// FTAggregateWithArgs indicates an expected call of FTAggregateWithArgs.
func (mr *MockPipelinerMockRecorder) FTAggregateWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAggregateWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTAggregateWithArgs), ctx, index, query, options)
}

// FTAliasAdd mocks base method.
func (m *MockPipeliner) FTAliasAdd(ctx context.Context, index, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasAdd", ctx, index, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasAdd indicates an expected call of FTAliasAdd.
func (mr *MockPipelinerMockRecorder) FTAliasAdd(ctx, index, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasAdd", reflect.TypeOf((*MockPipeliner)(nil).FTAliasAdd), ctx, index, alias)
}

// FTAliasDel mocks base method.
func (m *MockPipeliner) FTAliasDel(ctx context.Context, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasDel", ctx, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasDel indicates an expected call of FTAliasDel.
func (mr *MockPipelinerMockRecorder) FTAliasDel(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasDel", reflect.TypeOf((*MockPipeliner)(nil).FTAliasDel), ctx, alias)
}

// FTAliasUpdate mocks base method.
func (m *MockPipeliner) FTAliasUpdate(ctx context.Context, index, alias string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAliasUpdate", ctx, index, alias)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAliasUpdate indicates an expected call of FTAliasUpdate.
func (mr *MockPipelinerMockRecorder) FTAliasUpdate(ctx, index, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAliasUpdate", reflect.TypeOf((*MockPipeliner)(nil).FTAliasUpdate), ctx, index, alias)
}

// FTAlter mocks base method.
func (m *MockPipeliner) FTAlter(ctx context.Context, index string, skipInitialScan bool, definition []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTAlter", ctx, index, skipInitialScan, definition)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTAlter indicates an expected call of FTAlter.
func (mr *MockPipelinerMockRecorder) FTAlter(ctx, index, skipInitialScan, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTAlter", reflect.TypeOf((*MockPipeliner)(nil).FTAlter), ctx, index, skipInitialScan, definition)
}

// FTConfigGet mocks base method.
func (m *MockPipeliner) FTConfigGet(ctx context.Context, option string) *redis.MapMapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTConfigGet", ctx, option)
	ret0, _ := ret[0].(*redis.MapMapStringInterfaceCmd)
	return ret0
}

// FTConfigGet indicates an expected call of FTConfigGet.
func (mr *MockPipelinerMockRecorder) FTConfigGet(ctx, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTConfigGet", reflect.TypeOf((*MockPipeliner)(nil).FTConfigGet), ctx, option)
}

// FTConfigSet mocks base method.
func (m *MockPipeliner) FTConfigSet(ctx context.Context, option string, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTConfigSet", ctx, option, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTConfigSet indicates an expected call of FTConfigSet.
func (mr *MockPipelinerMockRecorder) FTConfigSet(ctx, option, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTConfigSet", reflect.TypeOf((*MockPipeliner)(nil).FTConfigSet), ctx, option, value)
}

// FTCreate mocks base method.
func (m *MockPipeliner) FTCreate(ctx context.Context, index string, options *redis.FTCreateOptions, schema ...*redis.FieldSchema) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, index, options}
	for _, a := range schema {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTCreate", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTCreate indicates an expected call of FTCreate.
func (mr *MockPipelinerMockRecorder) FTCreate(ctx, index, options any, schema ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, index, options}, schema...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCreate", reflect.TypeOf((*MockPipeliner)(nil).FTCreate), varargs...)
}

// FTCursorDel mocks base method.
func (m *MockPipeliner) FTCursorDel(ctx context.Context, index string, cursorId int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTCursorDel", ctx, index, cursorId)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTCursorDel indicates an expected call of FTCursorDel.
func (mr *MockPipelinerMockRecorder) FTCursorDel(ctx, index, cursorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCursorDel", reflect.TypeOf((*MockPipeliner)(nil).FTCursorDel), ctx, index, cursorId)
}

// FTCursorRead mocks base method.
func (m *MockPipeliner) FTCursorRead(ctx context.Context, index string, cursorId, count int) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTCursorRead", ctx, index, cursorId, count)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// FTCursorRead indicates an expected call of FTCursorRead.
func (mr *MockPipelinerMockRecorder) FTCursorRead(ctx, index, cursorId, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTCursorRead", reflect.TypeOf((*MockPipeliner)(nil).FTCursorRead), ctx, index, cursorId, count)
}

// FTDictAdd mocks base method.
func (m *MockPipeliner) FTDictAdd(ctx context.Context, dict string, term ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dict}
	for _, a := range term {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTDictAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// FTDictAdd indicates an expected call of FTDictAdd.
func (mr *MockPipelinerMockRecorder) FTDictAdd(ctx, dict any, term ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dict}, term...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictAdd", reflect.TypeOf((*MockPipeliner)(nil).FTDictAdd), varargs...)
}

// FTDictDel mocks base method.
func (m *MockPipeliner) FTDictDel(ctx context.Context, dict string, term ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dict}
	for _, a := range term {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FTDictDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// FTDictDel indicates an expected call of FTDictDel.
func (mr *MockPipelinerMockRecorder) FTDictDel(ctx, dict any, term ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dict}, term...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictDel", reflect.TypeOf((*MockPipeliner)(nil).FTDictDel), varargs...)
}

// FTDictDump mocks base method.
func (m *MockPipeliner) FTDictDump(ctx context.Context, dict string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDictDump", ctx, dict)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FTDictDump indicates an expected call of FTDictDump.
func (mr *MockPipelinerMockRecorder) FTDictDump(ctx, dict any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDictDump", reflect.TypeOf((*MockPipeliner)(nil).FTDictDump), ctx, dict)
}

// FTDropIndex mocks base method.
func (m *MockPipeliner) FTDropIndex(ctx context.Context, index string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDropIndex", ctx, index)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTDropIndex indicates an expected call of FTDropIndex.
func (mr *MockPipelinerMockRecorder) FTDropIndex(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDropIndex", reflect.TypeOf((*MockPipeliner)(nil).FTDropIndex), ctx, index)
}

// FTDropIndexWithArgs mocks base method.
func (m *MockPipeliner) FTDropIndexWithArgs(ctx context.Context, index string, options *redis.FTDropIndexOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTDropIndexWithArgs", ctx, index, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTDropIndexWithArgs indicates an expected call of FTDropIndexWithArgs.
func (mr *MockPipelinerMockRecorder) FTDropIndexWithArgs(ctx, index, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTDropIndexWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTDropIndexWithArgs), ctx, index, options)
}

// FTExplain mocks base method.
func (m *MockPipeliner) FTExplain(ctx context.Context, index, query string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTExplain", ctx, index, query)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FTExplain indicates an expected call of FTExplain.
func (mr *MockPipelinerMockRecorder) FTExplain(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTExplain", reflect.TypeOf((*MockPipeliner)(nil).FTExplain), ctx, index, query)
}

// FTExplainWithArgs mocks base method.
func (m *MockPipeliner) FTExplainWithArgs(ctx context.Context, index, query string, options *redis.FTExplainOptions) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTExplainWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FTExplainWithArgs indicates an expected call of FTExplainWithArgs.
func (mr *MockPipelinerMockRecorder) FTExplainWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTExplainWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTExplainWithArgs), ctx, index, query, options)
}

// FTInfo mocks base method.
func (m *MockPipeliner) FTInfo(ctx context.Context, index string) *redis.FTInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTInfo", ctx, index)
	ret0, _ := ret[0].(*redis.FTInfoCmd)
	return ret0
}

// FTInfo indicates an expected call of FTInfo.
func (mr *MockPipelinerMockRecorder) FTInfo(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTInfo", reflect.TypeOf((*MockPipeliner)(nil).FTInfo), ctx, index)
}

// FTSearch mocks base method.
func (m *MockPipeliner) FTSearch(ctx context.Context, index, query string) *redis.FTSearchCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSearch", ctx, index, query)
	ret0, _ := ret[0].(*redis.FTSearchCmd)
	return ret0
}

// FTSearch indicates an expected call of FTSearch.
func (mr *MockPipelinerMockRecorder) FTSearch(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSearch", reflect.TypeOf((*MockPipeliner)(nil).FTSearch), ctx, index, query)
}

// FTSearchWithArgs mocks base method.
func (m *MockPipeliner) FTSearchWithArgs(ctx context.Context, index, query string, options *redis.FTSearchOptions) *redis.FTSearchCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSearchWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.FTSearchCmd)
	return ret0
}

// FTSearchWithArgs indicates an expected call of FTSearchWithArgs.
func (mr *MockPipelinerMockRecorder) FTSearchWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSearchWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTSearchWithArgs), ctx, index, query, options)
}

// FTSpellCheck mocks base method.
func (m *MockPipeliner) FTSpellCheck(ctx context.Context, index, query string) *redis.FTSpellCheckCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSpellCheck", ctx, index, query)
	ret0, _ := ret[0].(*redis.FTSpellCheckCmd)
	return ret0
}

// FTSpellCheck indicates an expected call of FTSpellCheck.
func (mr *MockPipelinerMockRecorder) FTSpellCheck(ctx, index, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSpellCheck", reflect.TypeOf((*MockPipeliner)(nil).FTSpellCheck), ctx, index, query)
}

// FTSpellCheckWithArgs mocks base method.
func (m *MockPipeliner) FTSpellCheckWithArgs(ctx context.Context, index, query string, options *redis.FTSpellCheckOptions) *redis.FTSpellCheckCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSpellCheckWithArgs", ctx, index, query, options)
	ret0, _ := ret[0].(*redis.FTSpellCheckCmd)
	return ret0
}

// FTSpellCheckWithArgs indicates an expected call of FTSpellCheckWithArgs.
func (mr *MockPipelinerMockRecorder) FTSpellCheckWithArgs(ctx, index, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSpellCheckWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTSpellCheckWithArgs), ctx, index, query, options)
}

// FTSynDump mocks base method.
func (m *MockPipeliner) FTSynDump(ctx context.Context, index string) *redis.FTSynDumpCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynDump", ctx, index)
	ret0, _ := ret[0].(*redis.FTSynDumpCmd)
	return ret0
}

// FTSynDump indicates an expected call of FTSynDump.
func (mr *MockPipelinerMockRecorder) FTSynDump(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynDump", reflect.TypeOf((*MockPipeliner)(nil).FTSynDump), ctx, index)
}

// FTSynUpdate mocks base method.
func (m *MockPipeliner) FTSynUpdate(ctx context.Context, index string, synGroupId any, terms []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynUpdate", ctx, index, synGroupId, terms)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTSynUpdate indicates an expected call of FTSynUpdate.
func (mr *MockPipelinerMockRecorder) FTSynUpdate(ctx, index, synGroupId, terms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynUpdate", reflect.TypeOf((*MockPipeliner)(nil).FTSynUpdate), ctx, index, synGroupId, terms)
}

// FTSynUpdateWithArgs mocks base method.
func (m *MockPipeliner) FTSynUpdateWithArgs(ctx context.Context, index string, synGroupId any, options *redis.FTSynUpdateOptions, terms []any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTSynUpdateWithArgs", ctx, index, synGroupId, options, terms)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FTSynUpdateWithArgs indicates an expected call of FTSynUpdateWithArgs.
func (mr *MockPipelinerMockRecorder) FTSynUpdateWithArgs(ctx, index, synGroupId, options, terms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTSynUpdateWithArgs", reflect.TypeOf((*MockPipeliner)(nil).FTSynUpdateWithArgs), ctx, index, synGroupId, options, terms)
}

// FTTagVals mocks base method.
func (m *MockPipeliner) FTTagVals(ctx context.Context, index, field string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FTTagVals", ctx, index, field)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FTTagVals indicates an expected call of FTTagVals.
func (mr *MockPipelinerMockRecorder) FTTagVals(ctx, index, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FTTagVals", reflect.TypeOf((*MockPipeliner)(nil).FTTagVals), ctx, index, field)
}

// FT_List mocks base method.
func (m *MockPipeliner) FT_List(ctx context.Context) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FT_List", ctx)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// FT_List indicates an expected call of FT_List.
func (mr *MockPipelinerMockRecorder) FT_List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FT_List", reflect.TypeOf((*MockPipeliner)(nil).FT_List), ctx)
}

// FlushAll mocks base method.
func (m *MockPipeliner) FlushAll(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockPipelinerMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockPipeliner)(nil).FlushAll), ctx)
}

// FlushAllAsync mocks base method.
func (m *MockPipeliner) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllAsync", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAllAsync indicates an expected call of FlushAllAsync.
func (mr *MockPipelinerMockRecorder) FlushAllAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllAsync", reflect.TypeOf((*MockPipeliner)(nil).FlushAllAsync), ctx)
}

// FlushDB mocks base method.
func (m *MockPipeliner) FlushDB(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDB", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDB indicates an expected call of FlushDB.
func (mr *MockPipelinerMockRecorder) FlushDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDB", reflect.TypeOf((*MockPipeliner)(nil).FlushDB), ctx)
}

// FlushDBAsync mocks base method.
func (m *MockPipeliner) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDBAsync", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDBAsync indicates an expected call of FlushDBAsync.
func (mr *MockPipelinerMockRecorder) FlushDBAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDBAsync", reflect.TypeOf((*MockPipeliner)(nil).FlushDBAsync), ctx)
}

// FunctionDelete mocks base method.
func (m *MockPipeliner) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionDelete", ctx, libName)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionDelete indicates an expected call of FunctionDelete.
func (mr *MockPipelinerMockRecorder) FunctionDelete(ctx, libName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionDelete", reflect.TypeOf((*MockPipeliner)(nil).FunctionDelete), ctx, libName)
}

// FunctionDump mocks base method.
func (m *MockPipeliner) FunctionDump(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionDump", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionDump indicates an expected call of FunctionDump.
func (mr *MockPipelinerMockRecorder) FunctionDump(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionDump", reflect.TypeOf((*MockPipeliner)(nil).FunctionDump), ctx)
}

// FunctionFlush mocks base method.
func (m *MockPipeliner) FunctionFlush(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionFlush", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionFlush indicates an expected call of FunctionFlush.
func (mr *MockPipelinerMockRecorder) FunctionFlush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionFlush", reflect.TypeOf((*MockPipeliner)(nil).FunctionFlush), ctx)
}

// FunctionFlushAsync mocks base method.
func (m *MockPipeliner) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionFlushAsync", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionFlushAsync indicates an expected call of FunctionFlushAsync.
func (mr *MockPipelinerMockRecorder) FunctionFlushAsync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionFlushAsync", reflect.TypeOf((*MockPipeliner)(nil).FunctionFlushAsync), ctx)
}

// FunctionKill mocks base method.
func (m *MockPipeliner) FunctionKill(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionKill", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionKill indicates an expected call of FunctionKill.
func (mr *MockPipelinerMockRecorder) FunctionKill(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionKill", reflect.TypeOf((*MockPipeliner)(nil).FunctionKill), ctx)
}

// FunctionList mocks base method.
func (m *MockPipeliner) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionList", ctx, q)
	ret0, _ := ret[0].(*redis.FunctionListCmd)
	return ret0
}

// FunctionList indicates an expected call of FunctionList.
func (mr *MockPipelinerMockRecorder) FunctionList(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionList", reflect.TypeOf((*MockPipeliner)(nil).FunctionList), ctx, q)
}

// FunctionLoad mocks base method.
func (m *MockPipeliner) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionLoad", ctx, code)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionLoad indicates an expected call of FunctionLoad.
func (mr *MockPipelinerMockRecorder) FunctionLoad(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionLoad", reflect.TypeOf((*MockPipeliner)(nil).FunctionLoad), ctx, code)
}

// FunctionLoadReplace mocks base method.
func (m *MockPipeliner) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionLoadReplace", ctx, code)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionLoadReplace indicates an expected call of FunctionLoadReplace.
func (mr *MockPipelinerMockRecorder) FunctionLoadReplace(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionLoadReplace", reflect.TypeOf((*MockPipeliner)(nil).FunctionLoadReplace), ctx, code)
}

// FunctionRestore mocks base method.
func (m *MockPipeliner) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionRestore", ctx, libDump)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// FunctionRestore indicates an expected call of FunctionRestore.
func (mr *MockPipelinerMockRecorder) FunctionRestore(ctx, libDump any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionRestore", reflect.TypeOf((*MockPipeliner)(nil).FunctionRestore), ctx, libDump)
}

// FunctionStats mocks base method.
func (m *MockPipeliner) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionStats", ctx)
	ret0, _ := ret[0].(*redis.FunctionStatsCmd)
	return ret0
}

// FunctionStats indicates an expected call of FunctionStats.
func (mr *MockPipelinerMockRecorder) FunctionStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionStats", reflect.TypeOf((*MockPipeliner)(nil).FunctionStats), ctx)
}

// GeoAdd mocks base method.
func (m *MockPipeliner) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range geoLocation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoAdd indicates an expected call of GeoAdd.
func (mr *MockPipelinerMockRecorder) GeoAdd(ctx, key any, geoLocation ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, geoLocation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockPipeliner)(nil).GeoAdd), varargs...)
}

// GeoDist mocks base method.
func (m *MockPipeliner) GeoDist(ctx context.Context, key, member1, member2, unit string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", ctx, key, member1, member2, unit)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// GeoDist indicates an expected call of GeoDist.
func (mr *MockPipelinerMockRecorder) GeoDist(ctx, key, member1, member2, unit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockPipeliner)(nil).GeoDist), ctx, key, member1, member2, unit)
}

// GeoHash mocks base method.
func (m *MockPipeliner) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// GeoHash indicates an expected call of GeoHash.
func (mr *MockPipelinerMockRecorder) GeoHash(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockPipeliner)(nil).GeoHash), varargs...)
}

// GeoPos mocks base method.
func (m *MockPipeliner) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].(*redis.GeoPosCmd)
	return ret0
}

// GeoPos indicates an expected call of GeoPos.
func (mr *MockPipelinerMockRecorder) GeoPos(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockPipeliner)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method.
func (m *MockPipeliner) GeoRadius(ctx context.Context, key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", ctx, key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadius indicates an expected call of GeoRadius.
func (mr *MockPipelinerMockRecorder) GeoRadius(ctx, key, longitude, latitude, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockPipeliner)(nil).GeoRadius), ctx, key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method.
func (m *MockPipeliner) GeoRadiusByMember(ctx context.Context, key, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", ctx, key, member, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember.
func (mr *MockPipelinerMockRecorder) GeoRadiusByMember(ctx, key, member, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockPipeliner)(nil).GeoRadiusByMember), ctx, key, member, query)
}

// GeoRadiusByMemberStore mocks base method.
func (m *MockPipeliner) GeoRadiusByMemberStore(ctx context.Context, key, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMemberStore", ctx, key, member, query)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoRadiusByMemberStore indicates an expected call of GeoRadiusByMemberStore.
func (mr *MockPipelinerMockRecorder) GeoRadiusByMemberStore(ctx, key, member, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMemberStore", reflect.TypeOf((*MockPipeliner)(nil).GeoRadiusByMemberStore), ctx, key, member, query)
}

// GeoRadiusStore mocks base method.
func (m *MockPipeliner) GeoRadiusStore(ctx context.Context, key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusStore", ctx, key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoRadiusStore indicates an expected call of GeoRadiusStore.
func (mr *MockPipelinerMockRecorder) GeoRadiusStore(ctx, key, longitude, latitude, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusStore", reflect.TypeOf((*MockPipeliner)(nil).GeoRadiusStore), ctx, key, longitude, latitude, query)
}

// GeoSearch mocks base method.
func (m *MockPipeliner) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearch", ctx, key, q)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// GeoSearch indicates an expected call of GeoSearch.
func (mr *MockPipelinerMockRecorder) GeoSearch(ctx, key, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearch", reflect.TypeOf((*MockPipeliner)(nil).GeoSearch), ctx, key, q)
}

// GeoSearchLocation mocks base method.
func (m *MockPipeliner) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearchLocation", ctx, key, q)
	ret0, _ := ret[0].(*redis.GeoSearchLocationCmd)
	return ret0
}

// GeoSearchLocation indicates an expected call of GeoSearchLocation.
func (mr *MockPipelinerMockRecorder) GeoSearchLocation(ctx, key, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearchLocation", reflect.TypeOf((*MockPipeliner)(nil).GeoSearchLocation), ctx, key, q)
}

// GeoSearchStore mocks base method.
func (m *MockPipeliner) GeoSearchStore(ctx context.Context, key, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoSearchStore", ctx, key, store, q)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoSearchStore indicates an expected call of GeoSearchStore.
func (mr *MockPipelinerMockRecorder) GeoSearchStore(ctx, key, store, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoSearchStore", reflect.TypeOf((*MockPipeliner)(nil).GeoSearchStore), ctx, key, store, q)
}

// Get mocks base method.
func (m *MockPipeliner) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPipelinerMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipeliner)(nil).Get), ctx, key)
}

// GetBit mocks base method.
func (m *MockPipeliner) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", ctx, key, offset)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GetBit indicates an expected call of GetBit.
func (mr *MockPipelinerMockRecorder) GetBit(ctx, key, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockPipeliner)(nil).GetBit), ctx, key, offset)
}

// GetDel mocks base method.
func (m *MockPipeliner) GetDel(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDel", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetDel indicates an expected call of GetDel.
func (mr *MockPipelinerMockRecorder) GetDel(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDel", reflect.TypeOf((*MockPipeliner)(nil).GetDel), ctx, key)
}

// GetEx mocks base method.
func (m *MockPipeliner) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEx", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetEx indicates an expected call of GetEx.
func (mr *MockPipelinerMockRecorder) GetEx(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEx", reflect.TypeOf((*MockPipeliner)(nil).GetEx), ctx, key, expiration)
}

// GetRange mocks base method.
func (m *MockPipeliner) GetRange(ctx context.Context, key string, start, end int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", ctx, key, start, end)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetRange indicates an expected call of GetRange.
func (mr *MockPipelinerMockRecorder) GetRange(ctx, key, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockPipeliner)(nil).GetRange), ctx, key, start, end)
}

// GetSet mocks base method.
func (m *MockPipeliner) GetSet(ctx context.Context, key string, value any) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", ctx, key, value)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetSet indicates an expected call of GetSet.
func (mr *MockPipelinerMockRecorder) GetSet(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockPipeliner)(nil).GetSet), ctx, key, value)
}

// HDel mocks base method.
func (m *MockPipeliner) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockPipelinerMockRecorder) HDel(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockPipeliner)(nil).HDel), varargs...)
}

// HExists mocks base method.
func (m *MockPipeliner) HExists(ctx context.Context, key, field string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", ctx, key, field)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HExists indicates an expected call of HExists.
func (mr *MockPipelinerMockRecorder) HExists(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockPipeliner)(nil).HExists), ctx, key, field)
}

// HExpire mocks base method.
func (m *MockPipeliner) HExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpire", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpire indicates an expected call of HExpire.
func (mr *MockPipelinerMockRecorder) HExpire(ctx, key, expiration any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpire", reflect.TypeOf((*MockPipeliner)(nil).HExpire), varargs...)
}

// HExpireAt mocks base method.
func (m *MockPipeliner) HExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireAt", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireAt indicates an expected call of HExpireAt.
func (mr *MockPipelinerMockRecorder) HExpireAt(ctx, key, tm any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireAt", reflect.TypeOf((*MockPipeliner)(nil).HExpireAt), varargs...)
}

// HExpireAtWithArgs mocks base method.
func (m *MockPipeliner) HExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireAtWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireAtWithArgs indicates an expected call of HExpireAtWithArgs.
func (mr *MockPipelinerMockRecorder) HExpireAtWithArgs(ctx, key, tm, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireAtWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HExpireAtWithArgs), varargs...)
}

// HExpireTime mocks base method.
func (m *MockPipeliner) HExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireTime", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireTime indicates an expected call of HExpireTime.
func (mr *MockPipelinerMockRecorder) HExpireTime(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireTime", reflect.TypeOf((*MockPipeliner)(nil).HExpireTime), varargs...)
}

// HExpireWithArgs mocks base method.
func (m *MockPipeliner) HExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HExpireWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HExpireWithArgs indicates an expected call of HExpireWithArgs.
func (mr *MockPipelinerMockRecorder) HExpireWithArgs(ctx, key, expiration, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExpireWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HExpireWithArgs), varargs...)
}

// HGet mocks base method.
func (m *MockPipeliner) HGet(ctx context.Context, key, field string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// HGet indicates an expected call of HGet.
func (mr *MockPipelinerMockRecorder) HGet(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockPipeliner)(nil).HGet), ctx, key, field)
}

// HGetAll mocks base method.
func (m *MockPipeliner) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringStringCmd)
	return ret0
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockPipelinerMockRecorder) HGetAll(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockPipeliner)(nil).HGetAll), ctx, key)
}

// HGetDel mocks base method.
func (m *MockPipeliner) HGetDel(ctx context.Context, key string, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetDel", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetDel indicates an expected call of HGetDel.
func (mr *MockPipelinerMockRecorder) HGetDel(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetDel", reflect.TypeOf((*MockPipeliner)(nil).HGetDel), varargs...)
}

// HGetEX mocks base method.
func (m *MockPipeliner) HGetEX(ctx context.Context, key string, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetEX", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetEX indicates an expected call of HGetEX.
func (mr *MockPipelinerMockRecorder) HGetEX(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetEX", reflect.TypeOf((*MockPipeliner)(nil).HGetEX), varargs...)
}

// HGetEXWithArgs mocks base method.
func (m *MockPipeliner) HGetEXWithArgs(ctx context.Context, key string, options *redis.HGetEXOptions, fields ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HGetEXWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HGetEXWithArgs indicates an expected call of HGetEXWithArgs.
func (mr *MockPipelinerMockRecorder) HGetEXWithArgs(ctx, key, options any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetEXWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HGetEXWithArgs), varargs...)
}

// HIncrBy mocks base method.
func (m *MockPipeliner) HIncrBy(ctx context.Context, key, field string, incr int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", ctx, key, field, incr)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HIncrBy indicates an expected call of HIncrBy.
func (mr *MockPipelinerMockRecorder) HIncrBy(ctx, key, field, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockPipeliner)(nil).HIncrBy), ctx, key, field, incr)
}

// HIncrByFloat mocks base method.
func (m *MockPipeliner) HIncrByFloat(ctx context.Context, key, field string, incr float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", ctx, key, field, incr)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// HIncrByFloat indicates an expected call of HIncrByFloat.
func (mr *MockPipelinerMockRecorder) HIncrByFloat(ctx, key, field, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockPipeliner)(nil).HIncrByFloat), ctx, key, field, incr)
}

// HKeys mocks base method.
func (m *MockPipeliner) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HKeys indicates an expected call of HKeys.
func (mr *MockPipelinerMockRecorder) HKeys(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockPipeliner)(nil).HKeys), ctx, key)
}

// HLen mocks base method.
func (m *MockPipeliner) HLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HLen indicates an expected call of HLen.
func (mr *MockPipelinerMockRecorder) HLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockPipeliner)(nil).HLen), ctx, key)
}

// HMGet mocks base method.
func (m *MockPipeliner) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// HMGet indicates an expected call of HMGet.
func (mr *MockPipelinerMockRecorder) HMGet(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockPipeliner)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockPipeliner) HMSet(ctx context.Context, key string, values ...any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMSet", varargs...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockPipelinerMockRecorder) HMSet(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockPipeliner)(nil).HMSet), varargs...)
}

// HPExpire mocks base method.
func (m *MockPipeliner) HPExpire(ctx context.Context, key string, expiration time.Duration, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpire", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpire indicates an expected call of HPExpire.
func (mr *MockPipelinerMockRecorder) HPExpire(ctx, key, expiration any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpire", reflect.TypeOf((*MockPipeliner)(nil).HPExpire), varargs...)
}

// HPExpireAt mocks base method.
func (m *MockPipeliner) HPExpireAt(ctx context.Context, key string, tm time.Time, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireAt", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireAt indicates an expected call of HPExpireAt.
func (mr *MockPipelinerMockRecorder) HPExpireAt(ctx, key, tm any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireAt", reflect.TypeOf((*MockPipeliner)(nil).HPExpireAt), varargs...)
}

// HPExpireAtWithArgs mocks base method.
func (m *MockPipeliner) HPExpireAtWithArgs(ctx context.Context, key string, tm time.Time, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, tm, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireAtWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireAtWithArgs indicates an expected call of HPExpireAtWithArgs.
func (mr *MockPipelinerMockRecorder) HPExpireAtWithArgs(ctx, key, tm, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, tm, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireAtWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HPExpireAtWithArgs), varargs...)
}

// HPExpireTime mocks base method.
func (m *MockPipeliner) HPExpireTime(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireTime", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireTime indicates an expected call of HPExpireTime.
func (mr *MockPipelinerMockRecorder) HPExpireTime(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireTime", reflect.TypeOf((*MockPipeliner)(nil).HPExpireTime), varargs...)
}

// HPExpireWithArgs mocks base method.
func (m *MockPipeliner) HPExpireWithArgs(ctx context.Context, key string, expiration time.Duration, expirationArgs redis.HExpireArgs, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, expiration, expirationArgs}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPExpireWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPExpireWithArgs indicates an expected call of HPExpireWithArgs.
func (mr *MockPipelinerMockRecorder) HPExpireWithArgs(ctx, key, expiration, expirationArgs any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, expiration, expirationArgs}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPExpireWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HPExpireWithArgs), varargs...)
}

// HPTTL mocks base method.
func (m *MockPipeliner) HPTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPTTL", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPTTL indicates an expected call of HPTTL.
func (mr *MockPipelinerMockRecorder) HPTTL(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPTTL", reflect.TypeOf((*MockPipeliner)(nil).HPTTL), varargs...)
}

// HPersist mocks base method.
func (m *MockPipeliner) HPersist(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HPersist", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HPersist indicates an expected call of HPersist.
func (mr *MockPipelinerMockRecorder) HPersist(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HPersist", reflect.TypeOf((*MockPipeliner)(nil).HPersist), varargs...)
}

// HRandField mocks base method.
func (m *MockPipeliner) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HRandField", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HRandField indicates an expected call of HRandField.
func (mr *MockPipelinerMockRecorder) HRandField(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HRandField", reflect.TypeOf((*MockPipeliner)(nil).HRandField), ctx, key, count)
}

// HRandFieldWithValues mocks base method.
func (m *MockPipeliner) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HRandFieldWithValues", ctx, key, count)
	ret0, _ := ret[0].(*redis.KeyValueSliceCmd)
	return ret0
}

// HRandFieldWithValues indicates an expected call of HRandFieldWithValues.
func (mr *MockPipelinerMockRecorder) HRandFieldWithValues(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HRandFieldWithValues", reflect.TypeOf((*MockPipeliner)(nil).HRandFieldWithValues), ctx, key, count)
}

// HScan mocks base method.
func (m *MockPipeliner) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// HScan indicates an expected call of HScan.
func (mr *MockPipelinerMockRecorder) HScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockPipeliner)(nil).HScan), ctx, key, cursor, match, count)
}

// HScanNoValues mocks base method.
func (m *MockPipeliner) HScanNoValues(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScanNoValues", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// HScanNoValues indicates an expected call of HScanNoValues.
func (mr *MockPipelinerMockRecorder) HScanNoValues(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScanNoValues", reflect.TypeOf((*MockPipeliner)(nil).HScanNoValues), ctx, key, cursor, match, count)
}

// HSet mocks base method.
func (m *MockPipeliner) HSet(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSet", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockPipelinerMockRecorder) HSet(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockPipeliner)(nil).HSet), varargs...)
}

// HSetEX mocks base method.
func (m *MockPipeliner) HSetEX(ctx context.Context, key string, fieldsAndValues ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fieldsAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSetEX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSetEX indicates an expected call of HSetEX.
func (mr *MockPipelinerMockRecorder) HSetEX(ctx, key any, fieldsAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fieldsAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetEX", reflect.TypeOf((*MockPipeliner)(nil).HSetEX), varargs...)
}

// HSetEXWithArgs mocks base method.
func (m *MockPipeliner) HSetEXWithArgs(ctx context.Context, key string, options *redis.HSetEXOptions, fieldsAndValues ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range fieldsAndValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HSetEXWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HSetEXWithArgs indicates an expected call of HSetEXWithArgs.
func (mr *MockPipelinerMockRecorder) HSetEXWithArgs(ctx, key, options any, fieldsAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, fieldsAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetEXWithArgs", reflect.TypeOf((*MockPipeliner)(nil).HSetEXWithArgs), varargs...)
}

// HSetNX mocks base method.
func (m *MockPipeliner) HSetNX(ctx context.Context, key, field string, value any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", ctx, key, field, value)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HSetNX indicates an expected call of HSetNX.
func (mr *MockPipelinerMockRecorder) HSetNX(ctx, key, field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockPipeliner)(nil).HSetNX), ctx, key, field, value)
}

// HStrLen mocks base method.
func (m *MockPipeliner) HStrLen(ctx context.Context, key, field string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HStrLen", ctx, key, field)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HStrLen indicates an expected call of HStrLen.
func (mr *MockPipelinerMockRecorder) HStrLen(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HStrLen", reflect.TypeOf((*MockPipeliner)(nil).HStrLen), ctx, key, field)
}

// HTTL mocks base method.
func (m *MockPipeliner) HTTL(ctx context.Context, key string, fields ...string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HTTL", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// HTTL indicates an expected call of HTTL.
func (mr *MockPipelinerMockRecorder) HTTL(ctx, key any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTL", reflect.TypeOf((*MockPipeliner)(nil).HTTL), varargs...)
}

// HVals mocks base method.
func (m *MockPipeliner) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HVals indicates an expected call of HVals.
func (mr *MockPipelinerMockRecorder) HVals(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockPipeliner)(nil).HVals), ctx, key)
}

// Hello mocks base method.
func (m *MockPipeliner) Hello(ctx context.Context, ver int, username, password, clientName string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, ver, username, password, clientName)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockPipelinerMockRecorder) Hello(ctx, ver, username, password, clientName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockPipeliner)(nil).Hello), ctx, ver, username, password, clientName)
}

// Incr mocks base method.
func (m *MockPipeliner) Incr(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockPipelinerMockRecorder) Incr(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockPipeliner)(nil).Incr), ctx, key)
}

// IncrBy mocks base method.
func (m *MockPipeliner) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", ctx, key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockPipelinerMockRecorder) IncrBy(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockPipeliner)(nil).IncrBy), ctx, key, value)
}

// IncrByFloat mocks base method.
func (m *MockPipeliner) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", ctx, key, value)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// IncrByFloat indicates an expected call of IncrByFloat.
func (mr *MockPipelinerMockRecorder) IncrByFloat(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockPipeliner)(nil).IncrByFloat), ctx, key, value)
}

// Info mocks base method.
func (m *MockPipeliner) Info(ctx context.Context, section ...string) *redis.StringCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range section {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockPipelinerMockRecorder) Info(ctx any, section ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, section...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPipeliner)(nil).Info), varargs...)
}

// JSONArrAppend mocks base method.
func (m *MockPipeliner) JSONArrAppend(ctx context.Context, key, path string, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrAppend", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrAppend indicates an expected call of JSONArrAppend.
func (mr *MockPipelinerMockRecorder) JSONArrAppend(ctx, key, path any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrAppend", reflect.TypeOf((*MockPipeliner)(nil).JSONArrAppend), varargs...)
}

// JSONArrIndex mocks base method.
func (m *MockPipeliner) JSONArrIndex(ctx context.Context, key, path string, value ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrIndex", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrIndex indicates an expected call of JSONArrIndex.
func (mr *MockPipelinerMockRecorder) JSONArrIndex(ctx, key, path any, value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrIndex", reflect.TypeOf((*MockPipeliner)(nil).JSONArrIndex), varargs...)
}

// JSONArrIndexWithArgs mocks base method.
func (m *MockPipeliner) JSONArrIndexWithArgs(ctx context.Context, key, path string, options *redis.JSONArrIndexArgs, value ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path, options}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrIndexWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrIndexWithArgs indicates an expected call of JSONArrIndexWithArgs.
func (mr *MockPipelinerMockRecorder) JSONArrIndexWithArgs(ctx, key, path, options any, value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path, options}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrIndexWithArgs", reflect.TypeOf((*MockPipeliner)(nil).JSONArrIndexWithArgs), varargs...)
}

// JSONArrInsert mocks base method.
func (m *MockPipeliner) JSONArrInsert(ctx context.Context, key, path string, index int64, values ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, path, index}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONArrInsert", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrInsert indicates an expected call of JSONArrInsert.
func (mr *MockPipelinerMockRecorder) JSONArrInsert(ctx, key, path, index any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, path, index}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrInsert", reflect.TypeOf((*MockPipeliner)(nil).JSONArrInsert), varargs...)
}

// JSONArrLen mocks base method.
func (m *MockPipeliner) JSONArrLen(ctx context.Context, key, path string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrLen indicates an expected call of JSONArrLen.
func (mr *MockPipelinerMockRecorder) JSONArrLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrLen", reflect.TypeOf((*MockPipeliner)(nil).JSONArrLen), ctx, key, path)
}

// JSONArrPop mocks base method.
func (m *MockPipeliner) JSONArrPop(ctx context.Context, key, path string, index int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrPop", ctx, key, path, index)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// JSONArrPop indicates an expected call of JSONArrPop.
func (mr *MockPipelinerMockRecorder) JSONArrPop(ctx, key, path, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrPop", reflect.TypeOf((*MockPipeliner)(nil).JSONArrPop), ctx, key, path, index)
}

// JSONArrTrim mocks base method.
func (m *MockPipeliner) JSONArrTrim(ctx context.Context, key, path string) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrTrim", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrTrim indicates an expected call of JSONArrTrim.
func (mr *MockPipelinerMockRecorder) JSONArrTrim(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrTrim", reflect.TypeOf((*MockPipeliner)(nil).JSONArrTrim), ctx, key, path)
}

// JSONArrTrimWithArgs mocks base method.
func (m *MockPipeliner) JSONArrTrimWithArgs(ctx context.Context, key, path string, options *redis.JSONArrTrimArgs) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONArrTrimWithArgs", ctx, key, path, options)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// JSONArrTrimWithArgs indicates an expected call of JSONArrTrimWithArgs.
func (mr *MockPipelinerMockRecorder) JSONArrTrimWithArgs(ctx, key, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONArrTrimWithArgs", reflect.TypeOf((*MockPipeliner)(nil).JSONArrTrimWithArgs), ctx, key, path, options)
}

// JSONClear mocks base method.
func (m *MockPipeliner) JSONClear(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONClear", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONClear indicates an expected call of JSONClear.
func (mr *MockPipelinerMockRecorder) JSONClear(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONClear", reflect.TypeOf((*MockPipeliner)(nil).JSONClear), ctx, key, path)
}

// JSONDebugMemory mocks base method.
func (m *MockPipeliner) JSONDebugMemory(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONDebugMemory", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONDebugMemory indicates an expected call of JSONDebugMemory.
func (mr *MockPipelinerMockRecorder) JSONDebugMemory(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONDebugMemory", reflect.TypeOf((*MockPipeliner)(nil).JSONDebugMemory), ctx, key, path)
}

// JSONDel mocks base method.
func (m *MockPipeliner) JSONDel(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONDel", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONDel indicates an expected call of JSONDel.
func (mr *MockPipelinerMockRecorder) JSONDel(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONDel", reflect.TypeOf((*MockPipeliner)(nil).JSONDel), ctx, key, path)
}

// JSONForget mocks base method.
func (m *MockPipeliner) JSONForget(ctx context.Context, key, path string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONForget", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// JSONForget indicates an expected call of JSONForget.
func (mr *MockPipelinerMockRecorder) JSONForget(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONForget", reflect.TypeOf((*MockPipeliner)(nil).JSONForget), ctx, key, path)
}

// JSONGet mocks base method.
func (m *MockPipeliner) JSONGet(ctx context.Context, key string, paths ...string) *redis.JSONCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONGet", varargs...)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONGet indicates an expected call of JSONGet.
func (mr *MockPipelinerMockRecorder) JSONGet(ctx, key any, paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, paths...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONGet", reflect.TypeOf((*MockPipeliner)(nil).JSONGet), varargs...)
}

// JSONGetWithArgs mocks base method.
func (m *MockPipeliner) JSONGetWithArgs(ctx context.Context, key string, options *redis.JSONGetArgs, paths ...string) *redis.JSONCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, options}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONGetWithArgs", varargs...)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONGetWithArgs indicates an expected call of JSONGetWithArgs.
func (mr *MockPipelinerMockRecorder) JSONGetWithArgs(ctx, key, options any, paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, options}, paths...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONGetWithArgs", reflect.TypeOf((*MockPipeliner)(nil).JSONGetWithArgs), varargs...)
}

// JSONMGet mocks base method.
func (m *MockPipeliner) JSONMGet(ctx context.Context, path string, keys ...string) *redis.JSONSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, path}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONMGet", varargs...)
	ret0, _ := ret[0].(*redis.JSONSliceCmd)
	return ret0
}

// JSONMGet indicates an expected call of JSONMGet.
func (mr *MockPipelinerMockRecorder) JSONMGet(ctx, path any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, path}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMGet", reflect.TypeOf((*MockPipeliner)(nil).JSONMGet), varargs...)
}

// JSONMSet mocks base method.
func (m *MockPipeliner) JSONMSet(ctx context.Context, params ...any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONMSet", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMSet indicates an expected call of JSONMSet.
func (mr *MockPipelinerMockRecorder) JSONMSet(ctx any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMSet", reflect.TypeOf((*MockPipeliner)(nil).JSONMSet), varargs...)
}

// JSONMSetArgs mocks base method.
func (m *MockPipeliner) JSONMSetArgs(ctx context.Context, docs []redis.JSONSetArgs) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMSetArgs", ctx, docs)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMSetArgs indicates an expected call of JSONMSetArgs.
func (mr *MockPipelinerMockRecorder) JSONMSetArgs(ctx, docs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMSetArgs", reflect.TypeOf((*MockPipeliner)(nil).JSONMSetArgs), ctx, docs)
}

// JSONMerge mocks base method.
func (m *MockPipeliner) JSONMerge(ctx context.Context, key, path, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMerge", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONMerge indicates an expected call of JSONMerge.
func (mr *MockPipelinerMockRecorder) JSONMerge(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMerge", reflect.TypeOf((*MockPipeliner)(nil).JSONMerge), ctx, key, path, value)
}

// JSONNumIncrBy mocks base method.
func (m *MockPipeliner) JSONNumIncrBy(ctx context.Context, key, path string, value float64) *redis.JSONCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONNumIncrBy", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.JSONCmd)
	return ret0
}

// JSONNumIncrBy indicates an expected call of JSONNumIncrBy.
func (mr *MockPipelinerMockRecorder) JSONNumIncrBy(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONNumIncrBy", reflect.TypeOf((*MockPipeliner)(nil).JSONNumIncrBy), ctx, key, path, value)
}

// JSONObjKeys mocks base method.
func (m *MockPipeliner) JSONObjKeys(ctx context.Context, key, path string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONObjKeys", ctx, key, path)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// JSONObjKeys indicates an expected call of JSONObjKeys.
func (mr *MockPipelinerMockRecorder) JSONObjKeys(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONObjKeys", reflect.TypeOf((*MockPipeliner)(nil).JSONObjKeys), ctx, key, path)
}

// JSONObjLen mocks base method.
func (m *MockPipeliner) JSONObjLen(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONObjLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONObjLen indicates an expected call of JSONObjLen.
func (mr *MockPipelinerMockRecorder) JSONObjLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONObjLen", reflect.TypeOf((*MockPipeliner)(nil).JSONObjLen), ctx, key, path)
}

// JSONSet mocks base method.
func (m *MockPipeliner) JSONSet(ctx context.Context, key, path string, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONSet", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONSet indicates an expected call of JSONSet.
func (mr *MockPipelinerMockRecorder) JSONSet(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONSet", reflect.TypeOf((*MockPipeliner)(nil).JSONSet), ctx, key, path, value)
}

// JSONSetMode mocks base method.
func (m *MockPipeliner) JSONSetMode(ctx context.Context, key, path string, value any, mode string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONSetMode", ctx, key, path, value, mode)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// JSONSetMode indicates an expected call of JSONSetMode.
func (mr *MockPipelinerMockRecorder) JSONSetMode(ctx, key, path, value, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONSetMode", reflect.TypeOf((*MockPipeliner)(nil).JSONSetMode), ctx, key, path, value, mode)
}

// JSONStrAppend mocks base method.
func (m *MockPipeliner) JSONStrAppend(ctx context.Context, key, path, value string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONStrAppend", ctx, key, path, value)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONStrAppend indicates an expected call of JSONStrAppend.
func (mr *MockPipelinerMockRecorder) JSONStrAppend(ctx, key, path, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONStrAppend", reflect.TypeOf((*MockPipeliner)(nil).JSONStrAppend), ctx, key, path, value)
}

// JSONStrLen mocks base method.
func (m *MockPipeliner) JSONStrLen(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONStrLen", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONStrLen indicates an expected call of JSONStrLen.
func (mr *MockPipelinerMockRecorder) JSONStrLen(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONStrLen", reflect.TypeOf((*MockPipeliner)(nil).JSONStrLen), ctx, key, path)
}

// JSONToggle mocks base method.
func (m *MockPipeliner) JSONToggle(ctx context.Context, key, path string) *redis.IntPointerSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONToggle", ctx, key, path)
	ret0, _ := ret[0].(*redis.IntPointerSliceCmd)
	return ret0
}

// JSONToggle indicates an expected call of JSONToggle.
func (mr *MockPipelinerMockRecorder) JSONToggle(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONToggle", reflect.TypeOf((*MockPipeliner)(nil).JSONToggle), ctx, key, path)
}

// JSONType mocks base method.
func (m *MockPipeliner) JSONType(ctx context.Context, key, path string) *redis.JSONSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONType", ctx, key, path)
	ret0, _ := ret[0].(*redis.JSONSliceCmd)
	return ret0
}

// JSONType indicates an expected call of JSONType.
func (mr *MockPipelinerMockRecorder) JSONType(ctx, key, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONType", reflect.TypeOf((*MockPipeliner)(nil).JSONType), ctx, key, path)
}

// Keys mocks base method.
func (m *MockPipeliner) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockPipelinerMockRecorder) Keys(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockPipeliner)(nil).Keys), ctx, pattern)
}

// LCS mocks base method.
func (m *MockPipeliner) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LCS", ctx, q)
	ret0, _ := ret[0].(*redis.LCSCmd)
	return ret0
}

// LCS indicates an expected call of LCS.
func (mr *MockPipelinerMockRecorder) LCS(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LCS", reflect.TypeOf((*MockPipeliner)(nil).LCS), ctx, q)
}

// LIndex mocks base method.
func (m *MockPipeliner) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", ctx, key, index)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LIndex indicates an expected call of LIndex.
func (mr *MockPipelinerMockRecorder) LIndex(ctx, key, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockPipeliner)(nil).LIndex), ctx, key, index)
}

// LInsert mocks base method.
func (m *MockPipeliner) LInsert(ctx context.Context, key, op string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsert", ctx, key, op, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsert indicates an expected call of LInsert.
func (mr *MockPipelinerMockRecorder) LInsert(ctx, key, op, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsert", reflect.TypeOf((*MockPipeliner)(nil).LInsert), ctx, key, op, pivot, value)
}

// LInsertAfter mocks base method.
func (m *MockPipeliner) LInsertAfter(ctx context.Context, key string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertAfter", ctx, key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertAfter indicates an expected call of LInsertAfter.
func (mr *MockPipelinerMockRecorder) LInsertAfter(ctx, key, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertAfter", reflect.TypeOf((*MockPipeliner)(nil).LInsertAfter), ctx, key, pivot, value)
}

// LInsertBefore mocks base method.
func (m *MockPipeliner) LInsertBefore(ctx context.Context, key string, pivot, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertBefore", ctx, key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertBefore indicates an expected call of LInsertBefore.
func (mr *MockPipelinerMockRecorder) LInsertBefore(ctx, key, pivot, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertBefore", reflect.TypeOf((*MockPipeliner)(nil).LInsertBefore), ctx, key, pivot, value)
}

// LLen mocks base method.
func (m *MockPipeliner) LLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LLen indicates an expected call of LLen.
func (mr *MockPipelinerMockRecorder) LLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockPipeliner)(nil).LLen), ctx, key)
}

// LMPop mocks base method.
func (m *MockPipeliner) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, direction, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LMPop", varargs...)
	ret0, _ := ret[0].(*redis.KeyValuesCmd)
	return ret0
}

// LMPop indicates an expected call of LMPop.
func (mr *MockPipelinerMockRecorder) LMPop(ctx, direction, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, direction, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LMPop", reflect.TypeOf((*MockPipeliner)(nil).LMPop), varargs...)
}

// LMove mocks base method.
func (m *MockPipeliner) LMove(ctx context.Context, source, destination, srcpos, destpos string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LMove", ctx, source, destination, srcpos, destpos)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LMove indicates an expected call of LMove.
func (mr *MockPipelinerMockRecorder) LMove(ctx, source, destination, srcpos, destpos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LMove", reflect.TypeOf((*MockPipeliner)(nil).LMove), ctx, source, destination, srcpos, destpos)
}

// LPop mocks base method.
func (m *MockPipeliner) LPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LPop indicates an expected call of LPop.
func (mr *MockPipelinerMockRecorder) LPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockPipeliner)(nil).LPop), ctx, key)
}

// LPopCount mocks base method.
func (m *MockPipeliner) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPopCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// LPopCount indicates an expected call of LPopCount.
func (mr *MockPipelinerMockRecorder) LPopCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPopCount", reflect.TypeOf((*MockPipeliner)(nil).LPopCount), ctx, key, count)
}

// LPos mocks base method.
func (m *MockPipeliner) LPos(ctx context.Context, key, value string, args redis.LPosArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPos", ctx, key, value, args)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPos indicates an expected call of LPos.
func (mr *MockPipelinerMockRecorder) LPos(ctx, key, value, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPos", reflect.TypeOf((*MockPipeliner)(nil).LPos), ctx, key, value, args)
}

// LPosCount mocks base method.
func (m *MockPipeliner) LPosCount(ctx context.Context, key, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPosCount", ctx, key, value, count, args)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// LPosCount indicates an expected call of LPosCount.
func (mr *MockPipelinerMockRecorder) LPosCount(ctx, key, value, count, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPosCount", reflect.TypeOf((*MockPipeliner)(nil).LPosCount), ctx, key, value, count, args)
}

// LPush mocks base method.
func (m *MockPipeliner) LPush(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockPipelinerMockRecorder) LPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockPipeliner)(nil).LPush), varargs...)
}

// LPushX mocks base method.
func (m *MockPipeliner) LPushX(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPushX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPushX indicates an expected call of LPushX.
func (mr *MockPipelinerMockRecorder) LPushX(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockPipeliner)(nil).LPushX), varargs...)
}

// LRange mocks base method.
func (m *MockPipeliner) LRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// LRange indicates an expected call of LRange.
func (mr *MockPipelinerMockRecorder) LRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockPipeliner)(nil).LRange), ctx, key, start, stop)
}

// LRem mocks base method.
func (m *MockPipeliner) LRem(ctx context.Context, key string, count int64, value any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", ctx, key, count, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LRem indicates an expected call of LRem.
func (mr *MockPipelinerMockRecorder) LRem(ctx, key, count, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockPipeliner)(nil).LRem), ctx, key, count, value)
}

// LSet mocks base method.
func (m *MockPipeliner) LSet(ctx context.Context, key string, index int64, value any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", ctx, key, index, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LSet indicates an expected call of LSet.
func (mr *MockPipelinerMockRecorder) LSet(ctx, key, index, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockPipeliner)(nil).LSet), ctx, key, index, value)
}

// LTrim mocks base method.
func (m *MockPipeliner) LTrim(ctx context.Context, key string, start, stop int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LTrim indicates an expected call of LTrim.
func (mr *MockPipelinerMockRecorder) LTrim(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockPipeliner)(nil).LTrim), ctx, key, start, stop)
}

// LastSave mocks base method.
func (m *MockPipeliner) LastSave(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSave", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LastSave indicates an expected call of LastSave.
func (mr *MockPipelinerMockRecorder) LastSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSave", reflect.TypeOf((*MockPipeliner)(nil).LastSave), ctx)
}

// Len mocks base method.
func (m *MockPipeliner) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockPipelinerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPipeliner)(nil).Len))
}

// MGet mocks base method.
func (m *MockPipeliner) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// MGet indicates an expected call of MGet.
func (mr *MockPipelinerMockRecorder) MGet(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockPipeliner)(nil).MGet), varargs...)
}

// MSet mocks base method.
func (m *MockPipeliner) MSet(ctx context.Context, values ...any) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockPipelinerMockRecorder) MSet(ctx any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockPipeliner)(nil).MSet), varargs...)
}

// MSetNX mocks base method.
func (m *MockPipeliner) MSetNX(ctx context.Context, values ...any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSetNX", varargs...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// MSetNX indicates an expected call of MSetNX.
func (mr *MockPipelinerMockRecorder) MSetNX(ctx any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetNX", reflect.TypeOf((*MockPipeliner)(nil).MSetNX), varargs...)
}

// MemoryUsage mocks base method.
func (m *MockPipeliner) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range samples {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryUsage", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// MemoryUsage indicates an expected call of MemoryUsage.
func (mr *MockPipelinerMockRecorder) MemoryUsage(ctx, key any, samples ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, samples...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUsage", reflect.TypeOf((*MockPipeliner)(nil).MemoryUsage), varargs...)
}

// Migrate mocks base method.
func (m *MockPipeliner) Migrate(ctx context.Context, host, port, key string, db int, timeout time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, host, port, key, db, timeout)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockPipelinerMockRecorder) Migrate(ctx, host, port, key, db, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockPipeliner)(nil).Migrate), ctx, host, port, key, db, timeout)
}

// ModuleLoadex mocks base method.
func (m *MockPipeliner) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleLoadex", ctx, conf)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ModuleLoadex indicates an expected call of ModuleLoadex.
func (mr *MockPipelinerMockRecorder) ModuleLoadex(ctx, conf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleLoadex", reflect.TypeOf((*MockPipeliner)(nil).ModuleLoadex), ctx, conf)
}

// Move mocks base method.
func (m *MockPipeliner) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, key, db)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockPipelinerMockRecorder) Move(ctx, key, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockPipeliner)(nil).Move), ctx, key, db)
}

// ObjectEncoding mocks base method.
func (m *MockPipeliner) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEncoding", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ObjectEncoding indicates an expected call of ObjectEncoding.
func (mr *MockPipelinerMockRecorder) ObjectEncoding(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEncoding", reflect.TypeOf((*MockPipeliner)(nil).ObjectEncoding), ctx, key)
}

// ObjectFreq mocks base method.
func (m *MockPipeliner) ObjectFreq(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectFreq", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ObjectFreq indicates an expected call of ObjectFreq.
func (mr *MockPipelinerMockRecorder) ObjectFreq(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectFreq", reflect.TypeOf((*MockPipeliner)(nil).ObjectFreq), ctx, key)
}

// ObjectIdleTime mocks base method.
func (m *MockPipeliner) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectIdleTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// ObjectIdleTime indicates an expected call of ObjectIdleTime.
func (mr *MockPipelinerMockRecorder) ObjectIdleTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectIdleTime", reflect.TypeOf((*MockPipeliner)(nil).ObjectIdleTime), ctx, key)
}

// ObjectRefCount mocks base method.
func (m *MockPipeliner) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRefCount", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ObjectRefCount indicates an expected call of ObjectRefCount.
func (mr *MockPipelinerMockRecorder) ObjectRefCount(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRefCount", reflect.TypeOf((*MockPipeliner)(nil).ObjectRefCount), ctx, key)
}

// PExpire mocks base method.
func (m *MockPipeliner) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpire", ctx, key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpire indicates an expected call of PExpire.
func (mr *MockPipelinerMockRecorder) PExpire(ctx, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpire", reflect.TypeOf((*MockPipeliner)(nil).PExpire), ctx, key, expiration)
}

// PExpireAt mocks base method.
func (m *MockPipeliner) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireAt", ctx, key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpireAt indicates an expected call of PExpireAt.
func (mr *MockPipelinerMockRecorder) PExpireAt(ctx, key, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireAt", reflect.TypeOf((*MockPipeliner)(nil).PExpireAt), ctx, key, tm)
}

// PExpireTime mocks base method.
func (m *MockPipeliner) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireTime", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// PExpireTime indicates an expected call of PExpireTime.
func (mr *MockPipelinerMockRecorder) PExpireTime(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireTime", reflect.TypeOf((*MockPipeliner)(nil).PExpireTime), ctx, key)
}

// PFAdd mocks base method.
func (m *MockPipeliner) PFAdd(ctx context.Context, key string, els ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range els {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFAdd indicates an expected call of PFAdd.
func (mr *MockPipelinerMockRecorder) PFAdd(ctx, key any, els ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, els...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFAdd", reflect.TypeOf((*MockPipeliner)(nil).PFAdd), varargs...)
}

// PFCount mocks base method.
func (m *MockPipeliner) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFCount", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFCount indicates an expected call of PFCount.
func (mr *MockPipelinerMockRecorder) PFCount(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFCount", reflect.TypeOf((*MockPipeliner)(nil).PFCount), varargs...)
}

// PFMerge mocks base method.
func (m *MockPipeliner) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// PFMerge indicates an expected call of PFMerge.
func (mr *MockPipelinerMockRecorder) PFMerge(ctx, dest any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFMerge", reflect.TypeOf((*MockPipeliner)(nil).PFMerge), varargs...)
}

// PTTL mocks base method.
func (m *MockPipeliner) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTTL", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// PTTL indicates an expected call of PTTL.
func (mr *MockPipelinerMockRecorder) PTTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTTL", reflect.TypeOf((*MockPipeliner)(nil).PTTL), ctx, key)
}

// Persist mocks base method.
func (m *MockPipeliner) Persist(ctx context.Context, key string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, key)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockPipelinerMockRecorder) Persist(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockPipeliner)(nil).Persist), ctx, key)
}

// Ping mocks base method.
func (m *MockPipeliner) Ping(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPipelinerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPipeliner)(nil).Ping), ctx)
}

// Pipeline mocks base method.
func (m *MockPipeliner) Pipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockPipelinerMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockPipeliner)(nil).Pipeline))
}

// Pipelined mocks base method.
func (m *MockPipeliner) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipelined", ctx, fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipelined indicates an expected call of Pipelined.
func (mr *MockPipelinerMockRecorder) Pipelined(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipelined", reflect.TypeOf((*MockPipeliner)(nil).Pipelined), ctx, fn)
}

// Process mocks base method.
func (m *MockPipeliner) Process(ctx context.Context, cmd redis.Cmder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockPipelinerMockRecorder) Process(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockPipeliner)(nil).Process), ctx, cmd)
}

// PubSubChannels mocks base method.
func (m *MockPipeliner) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubChannels", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// PubSubChannels indicates an expected call of PubSubChannels.
func (mr *MockPipelinerMockRecorder) PubSubChannels(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubChannels", reflect.TypeOf((*MockPipeliner)(nil).PubSubChannels), ctx, pattern)
}

// PubSubNumPat mocks base method.
func (m *MockPipeliner) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubNumPat", ctx)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PubSubNumPat indicates an expected call of PubSubNumPat.
func (mr *MockPipelinerMockRecorder) PubSubNumPat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumPat", reflect.TypeOf((*MockPipeliner)(nil).PubSubNumPat), ctx)
}

// PubSubNumSub mocks base method.
func (m *MockPipeliner) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubNumSub", varargs...)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// PubSubNumSub indicates an expected call of PubSubNumSub.
func (mr *MockPipelinerMockRecorder) PubSubNumSub(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumSub", reflect.TypeOf((*MockPipeliner)(nil).PubSubNumSub), varargs...)
}

// PubSubShardChannels mocks base method.
func (m *MockPipeliner) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubShardChannels", ctx, pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// PubSubShardChannels indicates an expected call of PubSubShardChannels.
func (mr *MockPipelinerMockRecorder) PubSubShardChannels(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubShardChannels", reflect.TypeOf((*MockPipeliner)(nil).PubSubShardChannels), ctx, pattern)
}

// PubSubShardNumSub mocks base method.
func (m *MockPipeliner) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubShardNumSub", varargs...)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// PubSubShardNumSub indicates an expected call of PubSubShardNumSub.
func (mr *MockPipelinerMockRecorder) PubSubShardNumSub(ctx any, channels ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubShardNumSub", reflect.TypeOf((*MockPipeliner)(nil).PubSubShardNumSub), varargs...)
}

// Publish mocks base method.
func (m *MockPipeliner) Publish(ctx context.Context, channel string, message any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPipelinerMockRecorder) Publish(ctx, channel, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPipeliner)(nil).Publish), ctx, channel, message)
}

// Quit mocks base method.
func (m *MockPipeliner) Quit(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockPipelinerMockRecorder) Quit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockPipeliner)(nil).Quit), ctx)
}

// RPop mocks base method.
func (m *MockPipeliner) RPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPop indicates an expected call of RPop.
func (mr *MockPipelinerMockRecorder) RPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockPipeliner)(nil).RPop), ctx, key)
}

// RPopCount mocks base method.
func (m *MockPipeliner) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// RPopCount indicates an expected call of RPopCount.
func (mr *MockPipelinerMockRecorder) RPopCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopCount", reflect.TypeOf((*MockPipeliner)(nil).RPopCount), ctx, key, count)
}

// RPopLPush mocks base method.
func (m *MockPipeliner) RPopLPush(ctx context.Context, source, destination string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", ctx, source, destination)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPopLPush indicates an expected call of RPopLPush.
func (mr *MockPipelinerMockRecorder) RPopLPush(ctx, source, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockPipeliner)(nil).RPopLPush), ctx, source, destination)
}

// RPush mocks base method.
func (m *MockPipeliner) RPush(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPush indicates an expected call of RPush.
func (mr *MockPipelinerMockRecorder) RPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockPipeliner)(nil).RPush), varargs...)
}

// RPushX mocks base method.
func (m *MockPipeliner) RPushX(ctx context.Context, key string, values ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPushX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPushX indicates an expected call of RPushX.
func (mr *MockPipelinerMockRecorder) RPushX(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockPipeliner)(nil).RPushX), varargs...)
}

// RandomKey mocks base method.
func (m *MockPipeliner) RandomKey(ctx context.Context) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey", ctx)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RandomKey indicates an expected call of RandomKey.
func (mr *MockPipelinerMockRecorder) RandomKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockPipeliner)(nil).RandomKey), ctx)
}

// ReadOnly mocks base method.
func (m *MockPipeliner) ReadOnly(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnly", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadOnly indicates an expected call of ReadOnly.
func (mr *MockPipelinerMockRecorder) ReadOnly(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnly", reflect.TypeOf((*MockPipeliner)(nil).ReadOnly), ctx)
}

// ReadWrite mocks base method.
func (m *MockPipeliner) ReadWrite(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWrite", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadWrite indicates an expected call of ReadWrite.
func (mr *MockPipelinerMockRecorder) ReadWrite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWrite", reflect.TypeOf((*MockPipeliner)(nil).ReadWrite), ctx)
}

// Rename mocks base method.
func (m *MockPipeliner) Rename(ctx context.Context, key, newkey string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, key, newkey)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockPipelinerMockRecorder) Rename(ctx, key, newkey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockPipeliner)(nil).Rename), ctx, key, newkey)
}

// RenameNX mocks base method.
func (m *MockPipeliner) RenameNX(ctx context.Context, key, newkey string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNX", ctx, key, newkey)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// RenameNX indicates an expected call of RenameNX.
func (mr *MockPipelinerMockRecorder) RenameNX(ctx, key, newkey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNX", reflect.TypeOf((*MockPipeliner)(nil).RenameNX), ctx, key, newkey)
}

// Restore mocks base method.
func (m *MockPipeliner) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockPipelinerMockRecorder) Restore(ctx, key, ttl, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPipeliner)(nil).Restore), ctx, key, ttl, value)
}

// RestoreReplace mocks base method.
func (m *MockPipeliner) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreReplace", ctx, key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// RestoreReplace indicates an expected call of RestoreReplace.
func (mr *MockPipelinerMockRecorder) RestoreReplace(ctx, key, ttl, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReplace", reflect.TypeOf((*MockPipeliner)(nil).RestoreReplace), ctx, key, ttl, value)
}

// SAdd mocks base method.
func (m *MockPipeliner) SAdd(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockPipelinerMockRecorder) SAdd(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockPipeliner)(nil).SAdd), varargs...)
}

// SCard mocks base method.
func (m *MockPipeliner) SCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SCard indicates an expected call of SCard.
func (mr *MockPipelinerMockRecorder) SCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockPipeliner)(nil).SCard), ctx, key)
}

// SDiff mocks base method.
func (m *MockPipeliner) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SDiff indicates an expected call of SDiff.
func (mr *MockPipelinerMockRecorder) SDiff(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockPipeliner)(nil).SDiff), varargs...)
}

// SDiffStore mocks base method.
func (m *MockPipeliner) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SDiffStore indicates an expected call of SDiffStore.
func (mr *MockPipelinerMockRecorder) SDiffStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockPipeliner)(nil).SDiffStore), varargs...)
}

// SInter mocks base method.
func (m *MockPipeliner) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SInter indicates an expected call of SInter.
func (mr *MockPipelinerMockRecorder) SInter(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockPipeliner)(nil).SInter), varargs...)
}

// SInterCard mocks base method.
func (m *MockPipeliner) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, limit}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterCard", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SInterCard indicates an expected call of SInterCard.
func (mr *MockPipelinerMockRecorder) SInterCard(ctx, limit any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, limit}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterCard", reflect.TypeOf((*MockPipeliner)(nil).SInterCard), varargs...)
}

// SInterStore mocks base method.
func (m *MockPipeliner) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SInterStore indicates an expected call of SInterStore.
func (mr *MockPipelinerMockRecorder) SInterStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockPipeliner)(nil).SInterStore), varargs...)
}

// SIsMember mocks base method.
func (m *MockPipeliner) SIsMember(ctx context.Context, key string, member any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", ctx, key, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SIsMember indicates an expected call of SIsMember.
func (mr *MockPipelinerMockRecorder) SIsMember(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockPipeliner)(nil).SIsMember), ctx, key, member)
}

// SMIsMember mocks base method.
func (m *MockPipeliner) SMIsMember(ctx context.Context, key string, members ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SMIsMember", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// SMIsMember indicates an expected call of SMIsMember.
func (mr *MockPipelinerMockRecorder) SMIsMember(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMIsMember", reflect.TypeOf((*MockPipeliner)(nil).SMIsMember), varargs...)
}

// SMembers mocks base method.
func (m *MockPipeliner) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SMembers indicates an expected call of SMembers.
func (mr *MockPipelinerMockRecorder) SMembers(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockPipeliner)(nil).SMembers), ctx, key)
}

// SMembersMap mocks base method.
func (m *MockPipeliner) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembersMap", ctx, key)
	ret0, _ := ret[0].(*redis.StringStructMapCmd)
	return ret0
}

// SMembersMap indicates an expected call of SMembersMap.
func (mr *MockPipelinerMockRecorder) SMembersMap(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembersMap", reflect.TypeOf((*MockPipeliner)(nil).SMembersMap), ctx, key)
}

// SMove mocks base method.
func (m *MockPipeliner) SMove(ctx context.Context, source, destination string, member any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", ctx, source, destination, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SMove indicates an expected call of SMove.
func (mr *MockPipelinerMockRecorder) SMove(ctx, source, destination, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockPipeliner)(nil).SMove), ctx, source, destination, member)
}

// SPop mocks base method.
func (m *MockPipeliner) SPop(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SPop indicates an expected call of SPop.
func (mr *MockPipelinerMockRecorder) SPop(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockPipeliner)(nil).SPop), ctx, key)
}

// SPopN mocks base method.
func (m *MockPipeliner) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPopN", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SPopN indicates an expected call of SPopN.
func (mr *MockPipelinerMockRecorder) SPopN(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPopN", reflect.TypeOf((*MockPipeliner)(nil).SPopN), ctx, key, count)
}

// SPublish mocks base method.
func (m *MockPipeliner) SPublish(ctx context.Context, channel string, message any) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPublish", ctx, channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SPublish indicates an expected call of SPublish.
func (mr *MockPipelinerMockRecorder) SPublish(ctx, channel, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPublish", reflect.TypeOf((*MockPipeliner)(nil).SPublish), ctx, channel, message)
}

// SRandMember mocks base method.
func (m *MockPipeliner) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SRandMember indicates an expected call of SRandMember.
func (mr *MockPipelinerMockRecorder) SRandMember(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockPipeliner)(nil).SRandMember), ctx, key)
}

// SRandMemberN mocks base method.
func (m *MockPipeliner) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMemberN", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SRandMemberN indicates an expected call of SRandMemberN.
func (mr *MockPipelinerMockRecorder) SRandMemberN(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMemberN", reflect.TypeOf((*MockPipeliner)(nil).SRandMemberN), ctx, key, count)
}

// SRem mocks base method.
func (m *MockPipeliner) SRem(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SRem indicates an expected call of SRem.
func (mr *MockPipelinerMockRecorder) SRem(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockPipeliner)(nil).SRem), varargs...)
}

// SScan mocks base method.
func (m *MockPipeliner) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// SScan indicates an expected call of SScan.
func (mr *MockPipelinerMockRecorder) SScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SScan", reflect.TypeOf((*MockPipeliner)(nil).SScan), ctx, key, cursor, match, count)
}

// SUnion mocks base method.
func (m *MockPipeliner) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SUnion indicates an expected call of SUnion.
func (mr *MockPipelinerMockRecorder) SUnion(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockPipeliner)(nil).SUnion), varargs...)
}

// SUnionStore mocks base method.
func (m *MockPipeliner) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SUnionStore indicates an expected call of SUnionStore.
func (mr *MockPipelinerMockRecorder) SUnionStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockPipeliner)(nil).SUnionStore), varargs...)
}

// Save mocks base method.
func (m *MockPipeliner) Save(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPipelinerMockRecorder) Save(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPipeliner)(nil).Save), ctx)
}

// Scan mocks base method.
func (m *MockPipeliner) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockPipelinerMockRecorder) Scan(ctx, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockPipeliner)(nil).Scan), ctx, cursor, match, count)
}

// ScanType mocks base method.
func (m *MockPipeliner) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanType", ctx, cursor, match, count, keyType)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// ScanType indicates an expected call of ScanType.
func (mr *MockPipelinerMockRecorder) ScanType(ctx, cursor, match, count, keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockPipeliner)(nil).ScanType), ctx, cursor, match, count, keyType)
}

// ScriptExists mocks base method.
func (m *MockPipeliner) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range hashes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScriptExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// ScriptExists indicates an expected call of ScriptExists.
func (mr *MockPipelinerMockRecorder) ScriptExists(ctx any, hashes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, hashes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptExists", reflect.TypeOf((*MockPipeliner)(nil).ScriptExists), varargs...)
}

// ScriptFlush mocks base method.
func (m *MockPipeliner) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptFlush", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptFlush indicates an expected call of ScriptFlush.
func (mr *MockPipelinerMockRecorder) ScriptFlush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptFlush", reflect.TypeOf((*MockPipeliner)(nil).ScriptFlush), ctx)
}

// ScriptKill mocks base method.
func (m *MockPipeliner) ScriptKill(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptKill", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptKill indicates an expected call of ScriptKill.
func (mr *MockPipelinerMockRecorder) ScriptKill(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptKill", reflect.TypeOf((*MockPipeliner)(nil).ScriptKill), ctx)
}

// ScriptLoad mocks base method.
func (m *MockPipeliner) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptLoad", ctx, script)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ScriptLoad indicates an expected call of ScriptLoad.
func (mr *MockPipelinerMockRecorder) ScriptLoad(ctx, script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptLoad", reflect.TypeOf((*MockPipeliner)(nil).ScriptLoad), ctx, script)
}

// Select mocks base method.
func (m *MockPipeliner) Select(ctx context.Context, index int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, index)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockPipelinerMockRecorder) Select(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPipeliner)(nil).Select), ctx, index)
}

// Set mocks base method.
func (m *MockPipeliner) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPipelinerMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPipeliner)(nil).Set), ctx, key, value, expiration)
}

// SetArgs mocks base method.
func (m *MockPipeliner) SetArgs(ctx context.Context, key string, value any, a redis.SetArgs) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArgs", ctx, key, value, a)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockPipelinerMockRecorder) SetArgs(ctx, key, value, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockPipeliner)(nil).SetArgs), ctx, key, value, a)
}

// SetBit mocks base method.
func (m *MockPipeliner) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", ctx, key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetBit indicates an expected call of SetBit.
func (mr *MockPipelinerMockRecorder) SetBit(ctx, key, offset, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockPipeliner)(nil).SetBit), ctx, key, offset, value)
}

// SetEx mocks base method.
func (m *MockPipeliner) SetEx(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockPipelinerMockRecorder) SetEx(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockPipeliner)(nil).SetEx), ctx, key, value, expiration)
}

// SetNX mocks base method.
func (m *MockPipeliner) SetNX(ctx context.Context, key string, value any, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetNX indicates an expected call of SetNX.
func (mr *MockPipelinerMockRecorder) SetNX(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockPipeliner)(nil).SetNX), ctx, key, value, expiration)
}

// SetRange mocks base method.
func (m *MockPipeliner) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRange", ctx, key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetRange indicates an expected call of SetRange.
func (mr *MockPipelinerMockRecorder) SetRange(ctx, key, offset, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRange", reflect.TypeOf((*MockPipeliner)(nil).SetRange), ctx, key, offset, value)
}

// SetXX mocks base method.
func (m *MockPipeliner) SetXX(ctx context.Context, key string, value any, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXX", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetXX indicates an expected call of SetXX.
func (mr *MockPipelinerMockRecorder) SetXX(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXX", reflect.TypeOf((*MockPipeliner)(nil).SetXX), ctx, key, value, expiration)
}

// Shutdown mocks base method.
func (m *MockPipeliner) Shutdown(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPipelinerMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockPipeliner)(nil).Shutdown), ctx)
}

// ShutdownNoSave mocks base method.
func (m *MockPipeliner) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownNoSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownNoSave indicates an expected call of ShutdownNoSave.
func (mr *MockPipelinerMockRecorder) ShutdownNoSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownNoSave", reflect.TypeOf((*MockPipeliner)(nil).ShutdownNoSave), ctx)
}

// ShutdownSave mocks base method.
func (m *MockPipeliner) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownSave", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownSave indicates an expected call of ShutdownSave.
func (mr *MockPipelinerMockRecorder) ShutdownSave(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownSave", reflect.TypeOf((*MockPipeliner)(nil).ShutdownSave), ctx)
}

// SlaveOf mocks base method.
func (m *MockPipeliner) SlaveOf(ctx context.Context, host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlaveOf", ctx, host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SlaveOf indicates an expected call of SlaveOf.
func (mr *MockPipelinerMockRecorder) SlaveOf(ctx, host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlaveOf", reflect.TypeOf((*MockPipeliner)(nil).SlaveOf), ctx, host, port)
}

// SlowLogGet mocks base method.
func (m *MockPipeliner) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlowLogGet", ctx, num)
	ret0, _ := ret[0].(*redis.SlowLogCmd)
	return ret0
}

// SlowLogGet indicates an expected call of SlowLogGet.
func (mr *MockPipelinerMockRecorder) SlowLogGet(ctx, num any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlowLogGet", reflect.TypeOf((*MockPipeliner)(nil).SlowLogGet), ctx, num)
}

// Sort mocks base method.
func (m *MockPipeliner) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", ctx, key, sort)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockPipelinerMockRecorder) Sort(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockPipeliner)(nil).Sort), ctx, key, sort)
}

// SortInterfaces mocks base method.
func (m *MockPipeliner) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortInterfaces", ctx, key, sort)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// SortInterfaces indicates an expected call of SortInterfaces.
func (mr *MockPipelinerMockRecorder) SortInterfaces(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortInterfaces", reflect.TypeOf((*MockPipeliner)(nil).SortInterfaces), ctx, key, sort)
}

// SortRO mocks base method.
func (m *MockPipeliner) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortRO", ctx, key, sort)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SortRO indicates an expected call of SortRO.
func (mr *MockPipelinerMockRecorder) SortRO(ctx, key, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortRO", reflect.TypeOf((*MockPipeliner)(nil).SortRO), ctx, key, sort)
}

// SortStore mocks base method.
func (m *MockPipeliner) SortStore(ctx context.Context, key, store string, sort *redis.Sort) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortStore", ctx, key, store, sort)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SortStore indicates an expected call of SortStore.
func (mr *MockPipelinerMockRecorder) SortStore(ctx, key, store, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortStore", reflect.TypeOf((*MockPipeliner)(nil).SortStore), ctx, key, store, sort)
}

// StrLen mocks base method.
func (m *MockPipeliner) StrLen(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrLen", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// StrLen indicates an expected call of StrLen.
func (mr *MockPipelinerMockRecorder) StrLen(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrLen", reflect.TypeOf((*MockPipeliner)(nil).StrLen), ctx, key)
}

// SwapDB mocks base method.
func (m *MockPipeliner) SwapDB(ctx context.Context, index1, index2 int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapDB", ctx, index1, index2)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SwapDB indicates an expected call of SwapDB.
func (mr *MockPipelinerMockRecorder) SwapDB(ctx, index1, index2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapDB", reflect.TypeOf((*MockPipeliner)(nil).SwapDB), ctx, index1, index2)
}

// TDigestAdd mocks base method.
func (m *MockPipeliner) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestAdd", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestAdd indicates an expected call of TDigestAdd.
func (mr *MockPipelinerMockRecorder) TDigestAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestAdd", reflect.TypeOf((*MockPipeliner)(nil).TDigestAdd), varargs...)
}

// TDigestByRank mocks base method.
func (m *MockPipeliner) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range rank {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestByRank", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestByRank indicates an expected call of TDigestByRank.
func (mr *MockPipelinerMockRecorder) TDigestByRank(ctx, key any, rank ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, rank...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestByRank", reflect.TypeOf((*MockPipeliner)(nil).TDigestByRank), varargs...)
}

// TDigestByRevRank mocks base method.
func (m *MockPipeliner) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range rank {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestByRevRank", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestByRevRank indicates an expected call of TDigestByRevRank.
func (mr *MockPipelinerMockRecorder) TDigestByRevRank(ctx, key any, rank ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, rank...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestByRevRank", reflect.TypeOf((*MockPipeliner)(nil).TDigestByRevRank), varargs...)
}

// TDigestCDF mocks base method.
func (m *MockPipeliner) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestCDF", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestCDF indicates an expected call of TDigestCDF.
func (mr *MockPipelinerMockRecorder) TDigestCDF(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCDF", reflect.TypeOf((*MockPipeliner)(nil).TDigestCDF), varargs...)
}

// TDigestCreate mocks base method.
func (m *MockPipeliner) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestCreate", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestCreate indicates an expected call of TDigestCreate.
func (mr *MockPipelinerMockRecorder) TDigestCreate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCreate", reflect.TypeOf((*MockPipeliner)(nil).TDigestCreate), ctx, key)
}

// TDigestCreateWithCompression mocks base method.
func (m *MockPipeliner) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestCreateWithCompression", ctx, key, compression)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestCreateWithCompression indicates an expected call of TDigestCreateWithCompression.
func (mr *MockPipelinerMockRecorder) TDigestCreateWithCompression(ctx, key, compression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestCreateWithCompression", reflect.TypeOf((*MockPipeliner)(nil).TDigestCreateWithCompression), ctx, key, compression)
}

// TDigestInfo mocks base method.
func (m *MockPipeliner) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestInfo", ctx, key)
	ret0, _ := ret[0].(*redis.TDigestInfoCmd)
	return ret0
}

// TDigestInfo indicates an expected call of TDigestInfo.
func (mr *MockPipelinerMockRecorder) TDigestInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestInfo", reflect.TypeOf((*MockPipeliner)(nil).TDigestInfo), ctx, key)
}

// TDigestMax mocks base method.
func (m *MockPipeliner) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestMax", ctx, key)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestMax indicates an expected call of TDigestMax.
func (mr *MockPipelinerMockRecorder) TDigestMax(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMax", reflect.TypeOf((*MockPipeliner)(nil).TDigestMax), ctx, key)
}

// TDigestMerge mocks base method.
func (m *MockPipeliner) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destKey, options}
	for _, a := range sourceKeys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestMerge indicates an expected call of TDigestMerge.
func (mr *MockPipelinerMockRecorder) TDigestMerge(ctx, destKey, options any, sourceKeys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destKey, options}, sourceKeys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMerge", reflect.TypeOf((*MockPipeliner)(nil).TDigestMerge), varargs...)
}

// TDigestMin mocks base method.
func (m *MockPipeliner) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestMin", ctx, key)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestMin indicates an expected call of TDigestMin.
func (mr *MockPipelinerMockRecorder) TDigestMin(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestMin", reflect.TypeOf((*MockPipeliner)(nil).TDigestMin), ctx, key)
}

// TDigestQuantile mocks base method.
func (m *MockPipeliner) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestQuantile", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// TDigestQuantile indicates an expected call of TDigestQuantile.
func (mr *MockPipelinerMockRecorder) TDigestQuantile(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestQuantile", reflect.TypeOf((*MockPipeliner)(nil).TDigestQuantile), varargs...)
}

// TDigestRank mocks base method.
func (m *MockPipeliner) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestRank", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TDigestRank indicates an expected call of TDigestRank.
func (mr *MockPipelinerMockRecorder) TDigestRank(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestRank", reflect.TypeOf((*MockPipeliner)(nil).TDigestRank), varargs...)
}

// TDigestReset mocks base method.
func (m *MockPipeliner) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestReset", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TDigestReset indicates an expected call of TDigestReset.
func (mr *MockPipelinerMockRecorder) TDigestReset(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestReset", reflect.TypeOf((*MockPipeliner)(nil).TDigestReset), ctx, key)
}

// TDigestRevRank mocks base method.
func (m *MockPipeliner) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TDigestRevRank", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TDigestRevRank indicates an expected call of TDigestRevRank.
func (mr *MockPipelinerMockRecorder) TDigestRevRank(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestRevRank", reflect.TypeOf((*MockPipeliner)(nil).TDigestRevRank), varargs...)
}

// TDigestTrimmedMean mocks base method.
func (m *MockPipeliner) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile, highCutQuantile float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TDigestTrimmedMean", ctx, key, lowCutQuantile, highCutQuantile)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// TDigestTrimmedMean indicates an expected call of TDigestTrimmedMean.
func (mr *MockPipelinerMockRecorder) TDigestTrimmedMean(ctx, key, lowCutQuantile, highCutQuantile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TDigestTrimmedMean", reflect.TypeOf((*MockPipeliner)(nil).TDigestTrimmedMean), ctx, key, lowCutQuantile, highCutQuantile)
}

// TSAdd mocks base method.
func (m *MockPipeliner) TSAdd(ctx context.Context, key string, timestamp any, value float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAdd", ctx, key, timestamp, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSAdd indicates an expected call of TSAdd.
func (mr *MockPipelinerMockRecorder) TSAdd(ctx, key, timestamp, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAdd", reflect.TypeOf((*MockPipeliner)(nil).TSAdd), ctx, key, timestamp, value)
}

// TSAddWithArgs mocks base method.
func (m *MockPipeliner) TSAddWithArgs(ctx context.Context, key string, timestamp any, value float64, options *redis.TSOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAddWithArgs", ctx, key, timestamp, value, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSAddWithArgs indicates an expected call of TSAddWithArgs.
func (mr *MockPipelinerMockRecorder) TSAddWithArgs(ctx, key, timestamp, value, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAddWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSAddWithArgs), ctx, key, timestamp, value, options)
}

// TSAlter mocks base method.
func (m *MockPipeliner) TSAlter(ctx context.Context, key string, options *redis.TSAlterOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSAlter", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSAlter indicates an expected call of TSAlter.
func (mr *MockPipelinerMockRecorder) TSAlter(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSAlter", reflect.TypeOf((*MockPipeliner)(nil).TSAlter), ctx, key, options)
}

// TSCreate mocks base method.
func (m *MockPipeliner) TSCreate(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreate", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreate indicates an expected call of TSCreate.
func (mr *MockPipelinerMockRecorder) TSCreate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreate", reflect.TypeOf((*MockPipeliner)(nil).TSCreate), ctx, key)
}

// TSCreateRule mocks base method.
func (m *MockPipeliner) TSCreateRule(ctx context.Context, sourceKey, destKey string, aggregator redis.Aggregator, bucketDuration int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateRule", ctx, sourceKey, destKey, aggregator, bucketDuration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateRule indicates an expected call of TSCreateRule.
func (mr *MockPipelinerMockRecorder) TSCreateRule(ctx, sourceKey, destKey, aggregator, bucketDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateRule", reflect.TypeOf((*MockPipeliner)(nil).TSCreateRule), ctx, sourceKey, destKey, aggregator, bucketDuration)
}

// TSCreateRuleWithArgs mocks base method.
func (m *MockPipeliner) TSCreateRuleWithArgs(ctx context.Context, sourceKey, destKey string, aggregator redis.Aggregator, bucketDuration int, options *redis.TSCreateRuleOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateRuleWithArgs", ctx, sourceKey, destKey, aggregator, bucketDuration, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateRuleWithArgs indicates an expected call of TSCreateRuleWithArgs.
func (mr *MockPipelinerMockRecorder) TSCreateRuleWithArgs(ctx, sourceKey, destKey, aggregator, bucketDuration, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateRuleWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSCreateRuleWithArgs), ctx, sourceKey, destKey, aggregator, bucketDuration, options)
}

// TSCreateWithArgs mocks base method.
func (m *MockPipeliner) TSCreateWithArgs(ctx context.Context, key string, options *redis.TSOptions) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSCreateWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSCreateWithArgs indicates an expected call of TSCreateWithArgs.
func (mr *MockPipelinerMockRecorder) TSCreateWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSCreateWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSCreateWithArgs), ctx, key, options)
}

// TSDecrBy mocks base method.
func (m *MockPipeliner) TSDecrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDecrBy", ctx, Key, timestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDecrBy indicates an expected call of TSDecrBy.
func (mr *MockPipelinerMockRecorder) TSDecrBy(ctx, Key, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDecrBy", reflect.TypeOf((*MockPipeliner)(nil).TSDecrBy), ctx, Key, timestamp)
}

// TSDecrByWithArgs mocks base method.
func (m *MockPipeliner) TSDecrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDecrByWithArgs", ctx, key, timestamp, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDecrByWithArgs indicates an expected call of TSDecrByWithArgs.
func (mr *MockPipelinerMockRecorder) TSDecrByWithArgs(ctx, key, timestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDecrByWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSDecrByWithArgs), ctx, key, timestamp, options)
}

// TSDel mocks base method.
func (m *MockPipeliner) TSDel(ctx context.Context, Key string, fromTimestamp, toTimestamp int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDel", ctx, Key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSDel indicates an expected call of TSDel.
func (mr *MockPipelinerMockRecorder) TSDel(ctx, Key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDel", reflect.TypeOf((*MockPipeliner)(nil).TSDel), ctx, Key, fromTimestamp, toTimestamp)
}

// TSDeleteRule mocks base method.
func (m *MockPipeliner) TSDeleteRule(ctx context.Context, sourceKey, destKey string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDeleteRule", ctx, sourceKey, destKey)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TSDeleteRule indicates an expected call of TSDeleteRule.
func (mr *MockPipelinerMockRecorder) TSDeleteRule(ctx, sourceKey, destKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDeleteRule", reflect.TypeOf((*MockPipeliner)(nil).TSDeleteRule), ctx, sourceKey, destKey)
}

// TSGet mocks base method.
func (m *MockPipeliner) TSGet(ctx context.Context, key string) *redis.TSTimestampValueCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSGet", ctx, key)
	ret0, _ := ret[0].(*redis.TSTimestampValueCmd)
	return ret0
}

// TSGet indicates an expected call of TSGet.
func (mr *MockPipelinerMockRecorder) TSGet(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSGet", reflect.TypeOf((*MockPipeliner)(nil).TSGet), ctx, key)
}

// TSGetWithArgs mocks base method.
func (m *MockPipeliner) TSGetWithArgs(ctx context.Context, key string, options *redis.TSGetOptions) *redis.TSTimestampValueCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSGetWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueCmd)
	return ret0
}

// TSGetWithArgs indicates an expected call of TSGetWithArgs.
func (mr *MockPipelinerMockRecorder) TSGetWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSGetWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSGetWithArgs), ctx, key, options)
}

// TSIncrBy mocks base method.
func (m *MockPipeliner) TSIncrBy(ctx context.Context, Key string, timestamp float64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSIncrBy", ctx, Key, timestamp)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSIncrBy indicates an expected call of TSIncrBy.
func (mr *MockPipelinerMockRecorder) TSIncrBy(ctx, Key, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSIncrBy", reflect.TypeOf((*MockPipeliner)(nil).TSIncrBy), ctx, Key, timestamp)
}

// TSIncrByWithArgs mocks base method.
func (m *MockPipeliner) TSIncrByWithArgs(ctx context.Context, key string, timestamp float64, options *redis.TSIncrDecrOptions) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSIncrByWithArgs", ctx, key, timestamp, options)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// TSIncrByWithArgs indicates an expected call of TSIncrByWithArgs.
func (mr *MockPipelinerMockRecorder) TSIncrByWithArgs(ctx, key, timestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSIncrByWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSIncrByWithArgs), ctx, key, timestamp, options)
}

// TSInfo mocks base method.
func (m *MockPipeliner) TSInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSInfo", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// TSInfo indicates an expected call of TSInfo.
func (mr *MockPipelinerMockRecorder) TSInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSInfo", reflect.TypeOf((*MockPipeliner)(nil).TSInfo), ctx, key)
}

// TSInfoWithArgs mocks base method.
func (m *MockPipeliner) TSInfoWithArgs(ctx context.Context, key string, options *redis.TSInfoOptions) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSInfoWithArgs", ctx, key, options)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// TSInfoWithArgs indicates an expected call of TSInfoWithArgs.
func (mr *MockPipelinerMockRecorder) TSInfoWithArgs(ctx, key, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSInfoWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSInfoWithArgs), ctx, key, options)
}

// TSMAdd mocks base method.
func (m *MockPipeliner) TSMAdd(ctx context.Context, ktvSlices [][]any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMAdd", ctx, ktvSlices)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TSMAdd indicates an expected call of TSMAdd.
func (mr *MockPipelinerMockRecorder) TSMAdd(ctx, ktvSlices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMAdd", reflect.TypeOf((*MockPipeliner)(nil).TSMAdd), ctx, ktvSlices)
}

// TSMGet mocks base method.
func (m *MockPipeliner) TSMGet(ctx context.Context, filters []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMGet", ctx, filters)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMGet indicates an expected call of TSMGet.
func (mr *MockPipelinerMockRecorder) TSMGet(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMGet", reflect.TypeOf((*MockPipeliner)(nil).TSMGet), ctx, filters)
}

// TSMGetWithArgs mocks base method.
func (m *MockPipeliner) TSMGetWithArgs(ctx context.Context, filters []string, options *redis.TSMGetOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMGetWithArgs", ctx, filters, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMGetWithArgs indicates an expected call of TSMGetWithArgs.
func (mr *MockPipelinerMockRecorder) TSMGetWithArgs(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMGetWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSMGetWithArgs), ctx, filters, options)
}

// TSMRange mocks base method.
func (m *MockPipeliner) TSMRange(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRange", ctx, fromTimestamp, toTimestamp, filterExpr)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRange indicates an expected call of TSMRange.
func (mr *MockPipelinerMockRecorder) TSMRange(ctx, fromTimestamp, toTimestamp, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRange", reflect.TypeOf((*MockPipeliner)(nil).TSMRange), ctx, fromTimestamp, toTimestamp, filterExpr)
}

// TSMRangeWithArgs mocks base method.
func (m *MockPipeliner) TSMRangeWithArgs(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string, options *redis.TSMRangeOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRangeWithArgs indicates an expected call of TSMRangeWithArgs.
func (mr *MockPipelinerMockRecorder) TSMRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRangeWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSMRangeWithArgs), ctx, fromTimestamp, toTimestamp, filterExpr, options)
}

// TSMRevRange mocks base method.
func (m *MockPipeliner) TSMRevRange(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRevRange", ctx, fromTimestamp, toTimestamp, filterExpr)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRevRange indicates an expected call of TSMRevRange.
func (mr *MockPipelinerMockRecorder) TSMRevRange(ctx, fromTimestamp, toTimestamp, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRevRange", reflect.TypeOf((*MockPipeliner)(nil).TSMRevRange), ctx, fromTimestamp, toTimestamp, filterExpr)
}

// TSMRevRangeWithArgs mocks base method.
func (m *MockPipeliner) TSMRevRangeWithArgs(ctx context.Context, fromTimestamp, toTimestamp int, filterExpr []string, options *redis.TSMRevRangeOptions) *redis.MapStringSliceInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSMRevRangeWithArgs", ctx, fromTimestamp, toTimestamp, filterExpr, options)
	ret0, _ := ret[0].(*redis.MapStringSliceInterfaceCmd)
	return ret0
}

// TSMRevRangeWithArgs indicates an expected call of TSMRevRangeWithArgs.
func (mr *MockPipelinerMockRecorder) TSMRevRangeWithArgs(ctx, fromTimestamp, toTimestamp, filterExpr, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSMRevRangeWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSMRevRangeWithArgs), ctx, fromTimestamp, toTimestamp, filterExpr, options)
}

// TSQueryIndex mocks base method.
func (m *MockPipeliner) TSQueryIndex(ctx context.Context, filterExpr []string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSQueryIndex", ctx, filterExpr)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TSQueryIndex indicates an expected call of TSQueryIndex.
func (mr *MockPipelinerMockRecorder) TSQueryIndex(ctx, filterExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSQueryIndex", reflect.TypeOf((*MockPipeliner)(nil).TSQueryIndex), ctx, filterExpr)
}

// TSRange mocks base method.
func (m *MockPipeliner) TSRange(ctx context.Context, key string, fromTimestamp, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRange", ctx, key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRange indicates an expected call of TSRange.
func (mr *MockPipelinerMockRecorder) TSRange(ctx, key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRange", reflect.TypeOf((*MockPipeliner)(nil).TSRange), ctx, key, fromTimestamp, toTimestamp)
}

// TSRangeWithArgs mocks base method.
func (m *MockPipeliner) TSRangeWithArgs(ctx context.Context, key string, fromTimestamp, toTimestamp int, options *redis.TSRangeOptions) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRangeWithArgs indicates an expected call of TSRangeWithArgs.
func (mr *MockPipelinerMockRecorder) TSRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRangeWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSRangeWithArgs), ctx, key, fromTimestamp, toTimestamp, options)
}

// TSRevRange mocks base method.
func (m *MockPipeliner) TSRevRange(ctx context.Context, key string, fromTimestamp, toTimestamp int) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRevRange", ctx, key, fromTimestamp, toTimestamp)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRevRange indicates an expected call of TSRevRange.
func (mr *MockPipelinerMockRecorder) TSRevRange(ctx, key, fromTimestamp, toTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRevRange", reflect.TypeOf((*MockPipeliner)(nil).TSRevRange), ctx, key, fromTimestamp, toTimestamp)
}

// TSRevRangeWithArgs mocks base method.
func (m *MockPipeliner) TSRevRangeWithArgs(ctx context.Context, key string, fromTimestamp, toTimestamp int, options *redis.TSRevRangeOptions) *redis.TSTimestampValueSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSRevRangeWithArgs", ctx, key, fromTimestamp, toTimestamp, options)
	ret0, _ := ret[0].(*redis.TSTimestampValueSliceCmd)
	return ret0
}

// TSRevRangeWithArgs indicates an expected call of TSRevRangeWithArgs.
func (mr *MockPipelinerMockRecorder) TSRevRangeWithArgs(ctx, key, fromTimestamp, toTimestamp, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSRevRangeWithArgs", reflect.TypeOf((*MockPipeliner)(nil).TSRevRangeWithArgs), ctx, key, fromTimestamp, toTimestamp, options)
}

// TTL mocks base method.
func (m *MockPipeliner) TTL(ctx context.Context, key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockPipelinerMockRecorder) TTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockPipeliner)(nil).TTL), ctx, key)
}

// Time mocks base method.
func (m *MockPipeliner) Time(ctx context.Context) *redis.TimeCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time", ctx)
	ret0, _ := ret[0].(*redis.TimeCmd)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockPipelinerMockRecorder) Time(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockPipeliner)(nil).Time), ctx)
}

// TopKAdd mocks base method.
func (m *MockPipeliner) TopKAdd(ctx context.Context, key string, elements ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKAdd", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKAdd indicates an expected call of TopKAdd.
func (mr *MockPipelinerMockRecorder) TopKAdd(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKAdd", reflect.TypeOf((*MockPipeliner)(nil).TopKAdd), varargs...)
}

// TopKCount mocks base method.
func (m *MockPipeliner) TopKCount(ctx context.Context, key string, elements ...any) *redis.IntSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKCount", varargs...)
	ret0, _ := ret[0].(*redis.IntSliceCmd)
	return ret0
}

// TopKCount indicates an expected call of TopKCount.
func (mr *MockPipelinerMockRecorder) TopKCount(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKCount", reflect.TypeOf((*MockPipeliner)(nil).TopKCount), varargs...)
}

// TopKIncrBy mocks base method.
func (m *MockPipeliner) TopKIncrBy(ctx context.Context, key string, elements ...any) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKIncrBy", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKIncrBy indicates an expected call of TopKIncrBy.
func (mr *MockPipelinerMockRecorder) TopKIncrBy(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKIncrBy", reflect.TypeOf((*MockPipeliner)(nil).TopKIncrBy), varargs...)
}

// TopKInfo mocks base method.
func (m *MockPipeliner) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKInfo", ctx, key)
	ret0, _ := ret[0].(*redis.TopKInfoCmd)
	return ret0
}

// TopKInfo indicates an expected call of TopKInfo.
func (mr *MockPipelinerMockRecorder) TopKInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKInfo", reflect.TypeOf((*MockPipeliner)(nil).TopKInfo), ctx, key)
}

// TopKList mocks base method.
func (m *MockPipeliner) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKList", ctx, key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// TopKList indicates an expected call of TopKList.
func (mr *MockPipelinerMockRecorder) TopKList(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKList", reflect.TypeOf((*MockPipeliner)(nil).TopKList), ctx, key)
}

// TopKListWithCount mocks base method.
func (m *MockPipeliner) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKListWithCount", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringIntCmd)
	return ret0
}

// TopKListWithCount indicates an expected call of TopKListWithCount.
func (mr *MockPipelinerMockRecorder) TopKListWithCount(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKListWithCount", reflect.TypeOf((*MockPipeliner)(nil).TopKListWithCount), ctx, key)
}

// TopKQuery mocks base method.
func (m *MockPipeliner) TopKQuery(ctx context.Context, key string, elements ...any) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range elements {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopKQuery", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// TopKQuery indicates an expected call of TopKQuery.
func (mr *MockPipelinerMockRecorder) TopKQuery(ctx, key any, elements ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, elements...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKQuery", reflect.TypeOf((*MockPipeliner)(nil).TopKQuery), varargs...)
}

// TopKReserve mocks base method.
func (m *MockPipeliner) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKReserve", ctx, key, k)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TopKReserve indicates an expected call of TopKReserve.
func (mr *MockPipelinerMockRecorder) TopKReserve(ctx, key, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKReserve", reflect.TypeOf((*MockPipeliner)(nil).TopKReserve), ctx, key, k)
}

// TopKReserveWithOptions mocks base method.
func (m *MockPipeliner) TopKReserveWithOptions(ctx context.Context, key string, k, width, depth int64, decay float64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopKReserveWithOptions", ctx, key, k, width, depth, decay)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// TopKReserveWithOptions indicates an expected call of TopKReserveWithOptions.
func (mr *MockPipelinerMockRecorder) TopKReserveWithOptions(ctx, key, k, width, depth, decay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopKReserveWithOptions", reflect.TypeOf((*MockPipeliner)(nil).TopKReserveWithOptions), ctx, key, k, width, depth, decay)
}

// Touch mocks base method.
func (m *MockPipeliner) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Touch", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockPipelinerMockRecorder) Touch(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockPipeliner)(nil).Touch), varargs...)
}

// TxPipeline mocks base method.
func (m *MockPipeliner) TxPipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// TxPipeline indicates an expected call of TxPipeline.
func (mr *MockPipelinerMockRecorder) TxPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipeline", reflect.TypeOf((*MockPipeliner)(nil).TxPipeline))
}

// TxPipelined mocks base method.
func (m *MockPipeliner) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipelined", ctx, fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxPipelined indicates an expected call of TxPipelined.
func (mr *MockPipelinerMockRecorder) TxPipelined(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipelined", reflect.TypeOf((*MockPipeliner)(nil).TxPipelined), ctx, fn)
}

// Type mocks base method.
func (m *MockPipeliner) Type(ctx context.Context, key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", ctx, key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPipelinerMockRecorder) Type(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPipeliner)(nil).Type), ctx, key)
}

// Unlink mocks base method.
func (m *MockPipeliner) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockPipelinerMockRecorder) Unlink(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockPipeliner)(nil).Unlink), varargs...)
}

// VAdd mocks base method.
func (m *MockPipeliner) VAdd(ctx context.Context, key, element string, val redis.Vector) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VAdd", ctx, key, element, val)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VAdd indicates an expected call of VAdd.
func (mr *MockPipelinerMockRecorder) VAdd(ctx, key, element, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VAdd", reflect.TypeOf((*MockPipeliner)(nil).VAdd), ctx, key, element, val)
}

// VAddWithArgs mocks base method.
func (m *MockPipeliner) VAddWithArgs(ctx context.Context, key, element string, val redis.Vector, addArgs *redis.VAddArgs) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VAddWithArgs", ctx, key, element, val, addArgs)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VAddWithArgs indicates an expected call of VAddWithArgs.
func (mr *MockPipelinerMockRecorder) VAddWithArgs(ctx, key, element, val, addArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VAddWithArgs", reflect.TypeOf((*MockPipeliner)(nil).VAddWithArgs), ctx, key, element, val, addArgs)
}

// VCard mocks base method.
func (m *MockPipeliner) VCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// VCard indicates an expected call of VCard.
func (mr *MockPipelinerMockRecorder) VCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VCard", reflect.TypeOf((*MockPipeliner)(nil).VCard), ctx, key)
}

// VClearAttributes mocks base method.
func (m *MockPipeliner) VClearAttributes(ctx context.Context, key, element string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VClearAttributes", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VClearAttributes indicates an expected call of VClearAttributes.
func (mr *MockPipelinerMockRecorder) VClearAttributes(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VClearAttributes", reflect.TypeOf((*MockPipeliner)(nil).VClearAttributes), ctx, key, element)
}

// VDim mocks base method.
func (m *MockPipeliner) VDim(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VDim", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// VDim indicates an expected call of VDim.
func (mr *MockPipelinerMockRecorder) VDim(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VDim", reflect.TypeOf((*MockPipeliner)(nil).VDim), ctx, key)
}

// VEmb mocks base method.
func (m *MockPipeliner) VEmb(ctx context.Context, key, element string, raw bool) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VEmb", ctx, key, element, raw)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// VEmb indicates an expected call of VEmb.
func (mr *MockPipelinerMockRecorder) VEmb(ctx, key, element, raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VEmb", reflect.TypeOf((*MockPipeliner)(nil).VEmb), ctx, key, element, raw)
}

// VGetAttr mocks base method.
func (m *MockPipeliner) VGetAttr(ctx context.Context, key, element string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGetAttr", ctx, key, element)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// VGetAttr indicates an expected call of VGetAttr.
func (mr *MockPipelinerMockRecorder) VGetAttr(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGetAttr", reflect.TypeOf((*MockPipeliner)(nil).VGetAttr), ctx, key, element)
}

// VInfo mocks base method.
func (m *MockPipeliner) VInfo(ctx context.Context, key string) *redis.MapStringInterfaceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VInfo", ctx, key)
	ret0, _ := ret[0].(*redis.MapStringInterfaceCmd)
	return ret0
}

// VInfo indicates an expected call of VInfo.
func (mr *MockPipelinerMockRecorder) VInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VInfo", reflect.TypeOf((*MockPipeliner)(nil).VInfo), ctx, key)
}

// VLinks mocks base method.
func (m *MockPipeliner) VLinks(ctx context.Context, key, element string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VLinks", ctx, key, element)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VLinks indicates an expected call of VLinks.
func (mr *MockPipelinerMockRecorder) VLinks(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VLinks", reflect.TypeOf((*MockPipeliner)(nil).VLinks), ctx, key, element)
}

// VLinksWithScores mocks base method.
func (m *MockPipeliner) VLinksWithScores(ctx context.Context, key, element string) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VLinksWithScores", ctx, key, element)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VLinksWithScores indicates an expected call of VLinksWithScores.
func (mr *MockPipelinerMockRecorder) VLinksWithScores(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VLinksWithScores", reflect.TypeOf((*MockPipeliner)(nil).VLinksWithScores), ctx, key, element)
}

// VRandMember mocks base method.
func (m *MockPipeliner) VRandMember(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRandMember", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// VRandMember indicates an expected call of VRandMember.
func (mr *MockPipelinerMockRecorder) VRandMember(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRandMember", reflect.TypeOf((*MockPipeliner)(nil).VRandMember), ctx, key)
}

// VRandMemberCount mocks base method.
func (m *MockPipeliner) VRandMemberCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRandMemberCount", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VRandMemberCount indicates an expected call of VRandMemberCount.
func (mr *MockPipelinerMockRecorder) VRandMemberCount(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRandMemberCount", reflect.TypeOf((*MockPipeliner)(nil).VRandMemberCount), ctx, key, count)
}

// VRem mocks base method.
func (m *MockPipeliner) VRem(ctx context.Context, key, element string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRem", ctx, key, element)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VRem indicates an expected call of VRem.
func (mr *MockPipelinerMockRecorder) VRem(ctx, key, element any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRem", reflect.TypeOf((*MockPipeliner)(nil).VRem), ctx, key, element)
}

// VSetAttr mocks base method.
func (m *MockPipeliner) VSetAttr(ctx context.Context, key, element string, attr any) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSetAttr", ctx, key, element, attr)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// VSetAttr indicates an expected call of VSetAttr.
func (mr *MockPipelinerMockRecorder) VSetAttr(ctx, key, element, attr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSetAttr", reflect.TypeOf((*MockPipeliner)(nil).VSetAttr), ctx, key, element, attr)
}

// VSim mocks base method.
func (m *MockPipeliner) VSim(ctx context.Context, key string, val redis.Vector) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSim", ctx, key, val)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VSim indicates an expected call of VSim.
func (mr *MockPipelinerMockRecorder) VSim(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSim", reflect.TypeOf((*MockPipeliner)(nil).VSim), ctx, key, val)
}

// VSimWithArgs mocks base method.
func (m *MockPipeliner) VSimWithArgs(ctx context.Context, key string, val redis.Vector, args *redis.VSimArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithArgs", ctx, key, val, args)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// VSimWithArgs indicates an expected call of VSimWithArgs.
func (mr *MockPipelinerMockRecorder) VSimWithArgs(ctx, key, val, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithArgs", reflect.TypeOf((*MockPipeliner)(nil).VSimWithArgs), ctx, key, val, args)
}

// VSimWithArgsWithScores mocks base method.
func (m *MockPipeliner) VSimWithArgsWithScores(ctx context.Context, key string, val redis.Vector, args *redis.VSimArgs) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithArgsWithScores", ctx, key, val, args)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VSimWithArgsWithScores indicates an expected call of VSimWithArgsWithScores.
func (mr *MockPipelinerMockRecorder) VSimWithArgsWithScores(ctx, key, val, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithArgsWithScores", reflect.TypeOf((*MockPipeliner)(nil).VSimWithArgsWithScores), ctx, key, val, args)
}

// VSimWithScores mocks base method.
func (m *MockPipeliner) VSimWithScores(ctx context.Context, key string, val redis.Vector) *redis.VectorScoreSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSimWithScores", ctx, key, val)
	ret0, _ := ret[0].(*redis.VectorScoreSliceCmd)
	return ret0
}

// VSimWithScores indicates an expected call of VSimWithScores.
func (mr *MockPipelinerMockRecorder) VSimWithScores(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSimWithScores", reflect.TypeOf((*MockPipeliner)(nil).VSimWithScores), ctx, key, val)
}

// XAck mocks base method.
func (m *MockPipeliner) XAck(ctx context.Context, stream, group string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stream, group}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XAck", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XAck indicates an expected call of XAck.
func (mr *MockPipelinerMockRecorder) XAck(ctx, stream, group any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stream, group}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAck", reflect.TypeOf((*MockPipeliner)(nil).XAck), varargs...)
}

// XAdd mocks base method.
func (m *MockPipeliner) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAdd", ctx, a)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// XAdd indicates an expected call of XAdd.
func (mr *MockPipelinerMockRecorder) XAdd(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAdd", reflect.TypeOf((*MockPipeliner)(nil).XAdd), ctx, a)
}

// XAutoClaim mocks base method.
func (m *MockPipeliner) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAutoClaim", ctx, a)
	ret0, _ := ret[0].(*redis.XAutoClaimCmd)
	return ret0
}

// XAutoClaim indicates an expected call of XAutoClaim.
func (mr *MockPipelinerMockRecorder) XAutoClaim(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAutoClaim", reflect.TypeOf((*MockPipeliner)(nil).XAutoClaim), ctx, a)
}

// XAutoClaimJustID mocks base method.
func (m *MockPipeliner) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAutoClaimJustID", ctx, a)
	ret0, _ := ret[0].(*redis.XAutoClaimJustIDCmd)
	return ret0
}

// XAutoClaimJustID indicates an expected call of XAutoClaimJustID.
func (mr *MockPipelinerMockRecorder) XAutoClaimJustID(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAutoClaimJustID", reflect.TypeOf((*MockPipeliner)(nil).XAutoClaimJustID), ctx, a)
}

// XClaim mocks base method.
func (m *MockPipeliner) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaim", ctx, a)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XClaim indicates an expected call of XClaim.
func (mr *MockPipelinerMockRecorder) XClaim(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaim", reflect.TypeOf((*MockPipeliner)(nil).XClaim), ctx, a)
}

// XClaimJustID mocks base method.
func (m *MockPipeliner) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaimJustID", ctx, a)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// XClaimJustID indicates an expected call of XClaimJustID.
func (mr *MockPipelinerMockRecorder) XClaimJustID(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaimJustID", reflect.TypeOf((*MockPipeliner)(nil).XClaimJustID), ctx, a)
}

// XDel mocks base method.
func (m *MockPipeliner) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, stream}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XDel indicates an expected call of XDel.
func (mr *MockPipelinerMockRecorder) XDel(ctx, stream any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, stream}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XDel", reflect.TypeOf((*MockPipeliner)(nil).XDel), varargs...)
}

// XGroupCreate mocks base method.
func (m *MockPipeliner) XGroupCreate(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreate", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreate indicates an expected call of XGroupCreate.
func (mr *MockPipelinerMockRecorder) XGroupCreate(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreate", reflect.TypeOf((*MockPipeliner)(nil).XGroupCreate), ctx, stream, group, start)
}

// XGroupCreateConsumer mocks base method.
func (m *MockPipeliner) XGroupCreateConsumer(ctx context.Context, stream, group, consumer string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreateConsumer", ctx, stream, group, consumer)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupCreateConsumer indicates an expected call of XGroupCreateConsumer.
func (mr *MockPipelinerMockRecorder) XGroupCreateConsumer(ctx, stream, group, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreateConsumer", reflect.TypeOf((*MockPipeliner)(nil).XGroupCreateConsumer), ctx, stream, group, consumer)
}

// XGroupCreateMkStream mocks base method.
func (m *MockPipeliner) XGroupCreateMkStream(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreateMkStream", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreateMkStream indicates an expected call of XGroupCreateMkStream.
func (mr *MockPipelinerMockRecorder) XGroupCreateMkStream(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreateMkStream", reflect.TypeOf((*MockPipeliner)(nil).XGroupCreateMkStream), ctx, stream, group, start)
}

// XGroupDelConsumer mocks base method.
func (m *MockPipeliner) XGroupDelConsumer(ctx context.Context, stream, group, consumer string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDelConsumer", ctx, stream, group, consumer)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDelConsumer indicates an expected call of XGroupDelConsumer.
func (mr *MockPipelinerMockRecorder) XGroupDelConsumer(ctx, stream, group, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDelConsumer", reflect.TypeOf((*MockPipeliner)(nil).XGroupDelConsumer), ctx, stream, group, consumer)
}

// XGroupDestroy mocks base method.
func (m *MockPipeliner) XGroupDestroy(ctx context.Context, stream, group string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDestroy", ctx, stream, group)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDestroy indicates an expected call of XGroupDestroy.
func (mr *MockPipelinerMockRecorder) XGroupDestroy(ctx, stream, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDestroy", reflect.TypeOf((*MockPipeliner)(nil).XGroupDestroy), ctx, stream, group)
}

// XGroupSetID mocks base method.
func (m *MockPipeliner) XGroupSetID(ctx context.Context, stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupSetID", ctx, stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupSetID indicates an expected call of XGroupSetID.
func (mr *MockPipelinerMockRecorder) XGroupSetID(ctx, stream, group, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupSetID", reflect.TypeOf((*MockPipeliner)(nil).XGroupSetID), ctx, stream, group, start)
}

// XInfoConsumers mocks base method.
func (m *MockPipeliner) XInfoConsumers(ctx context.Context, key, group string) *redis.XInfoConsumersCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoConsumers", ctx, key, group)
	ret0, _ := ret[0].(*redis.XInfoConsumersCmd)
	return ret0
}

// XInfoConsumers indicates an expected call of XInfoConsumers.
func (mr *MockPipelinerMockRecorder) XInfoConsumers(ctx, key, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoConsumers", reflect.TypeOf((*MockPipeliner)(nil).XInfoConsumers), ctx, key, group)
}

// XInfoGroups mocks base method.
func (m *MockPipeliner) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoGroups", ctx, key)
	ret0, _ := ret[0].(*redis.XInfoGroupsCmd)
	return ret0
}

// XInfoGroups indicates an expected call of XInfoGroups.
func (mr *MockPipelinerMockRecorder) XInfoGroups(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoGroups", reflect.TypeOf((*MockPipeliner)(nil).XInfoGroups), ctx, key)
}

// XInfoStream mocks base method.
func (m *MockPipeliner) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoStream", ctx, key)
	ret0, _ := ret[0].(*redis.XInfoStreamCmd)
	return ret0
}

// XInfoStream indicates an expected call of XInfoStream.
func (mr *MockPipelinerMockRecorder) XInfoStream(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoStream", reflect.TypeOf((*MockPipeliner)(nil).XInfoStream), ctx, key)
}

// XInfoStreamFull mocks base method.
func (m *MockPipeliner) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XInfoStreamFull", ctx, key, count)
	ret0, _ := ret[0].(*redis.XInfoStreamFullCmd)
	return ret0
}

// XInfoStreamFull indicates an expected call of XInfoStreamFull.
func (mr *MockPipelinerMockRecorder) XInfoStreamFull(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XInfoStreamFull", reflect.TypeOf((*MockPipeliner)(nil).XInfoStreamFull), ctx, key, count)
}

// XLen mocks base method.
func (m *MockPipeliner) XLen(ctx context.Context, stream string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XLen", ctx, stream)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XLen indicates an expected call of XLen.
func (mr *MockPipelinerMockRecorder) XLen(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XLen", reflect.TypeOf((*MockPipeliner)(nil).XLen), ctx, stream)
}

// XPending mocks base method.
func (m *MockPipeliner) XPending(ctx context.Context, stream, group string) *redis.XPendingCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPending", ctx, stream, group)
	ret0, _ := ret[0].(*redis.XPendingCmd)
	return ret0
}

// XPending indicates an expected call of XPending.
func (mr *MockPipelinerMockRecorder) XPending(ctx, stream, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPending", reflect.TypeOf((*MockPipeliner)(nil).XPending), ctx, stream, group)
}

// XPendingExt mocks base method.
func (m *MockPipeliner) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPendingExt", ctx, a)
	ret0, _ := ret[0].(*redis.XPendingExtCmd)
	return ret0
}

// XPendingExt indicates an expected call of XPendingExt.
func (mr *MockPipelinerMockRecorder) XPendingExt(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPendingExt", reflect.TypeOf((*MockPipeliner)(nil).XPendingExt), ctx, a)
}

// XRange mocks base method.
func (m *MockPipeliner) XRange(ctx context.Context, stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRange", ctx, stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRange indicates an expected call of XRange.
func (mr *MockPipelinerMockRecorder) XRange(ctx, stream, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRange", reflect.TypeOf((*MockPipeliner)(nil).XRange), ctx, stream, start, stop)
}

// XRangeN mocks base method.
func (m *MockPipeliner) XRangeN(ctx context.Context, stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRangeN", ctx, stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRangeN indicates an expected call of XRangeN.
func (mr *MockPipelinerMockRecorder) XRangeN(ctx, stream, start, stop, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRangeN", reflect.TypeOf((*MockPipeliner)(nil).XRangeN), ctx, stream, start, stop, count)
}

// XRead mocks base method.
func (m *MockPipeliner) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRead", ctx, a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XRead indicates an expected call of XRead.
func (mr *MockPipelinerMockRecorder) XRead(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRead", reflect.TypeOf((*MockPipeliner)(nil).XRead), ctx, a)
}

// XReadGroup mocks base method.
func (m *MockPipeliner) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XReadGroup", ctx, a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadGroup indicates an expected call of XReadGroup.
func (mr *MockPipelinerMockRecorder) XReadGroup(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadGroup", reflect.TypeOf((*MockPipeliner)(nil).XReadGroup), ctx, a)
}

// XReadStreams mocks base method.
func (m *MockPipeliner) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range streams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XReadStreams", varargs...)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadStreams indicates an expected call of XReadStreams.
func (mr *MockPipelinerMockRecorder) XReadStreams(ctx any, streams ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, streams...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadStreams", reflect.TypeOf((*MockPipeliner)(nil).XReadStreams), varargs...)
}

// XRevRange mocks base method.
func (m *MockPipeliner) XRevRange(ctx context.Context, stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRange", ctx, stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRange indicates an expected call of XRevRange.
func (mr *MockPipelinerMockRecorder) XRevRange(ctx, stream, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRange", reflect.TypeOf((*MockPipeliner)(nil).XRevRange), ctx, stream, start, stop)
}

// XRevRangeN mocks base method.
func (m *MockPipeliner) XRevRangeN(ctx context.Context, stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRangeN", ctx, stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRangeN indicates an expected call of XRevRangeN.
func (mr *MockPipelinerMockRecorder) XRevRangeN(ctx, stream, start, stop, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRangeN", reflect.TypeOf((*MockPipeliner)(nil).XRevRangeN), ctx, stream, start, stop, count)
}

// XTrimMaxLen mocks base method.
func (m *MockPipeliner) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMaxLen", ctx, key, maxLen)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMaxLen indicates an expected call of XTrimMaxLen.
func (mr *MockPipelinerMockRecorder) XTrimMaxLen(ctx, key, maxLen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMaxLen", reflect.TypeOf((*MockPipeliner)(nil).XTrimMaxLen), ctx, key, maxLen)
}

// XTrimMaxLenApprox mocks base method.
func (m *MockPipeliner) XTrimMaxLenApprox(ctx context.Context, key string, maxLen, limit int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMaxLenApprox", ctx, key, maxLen, limit)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMaxLenApprox indicates an expected call of XTrimMaxLenApprox.
func (mr *MockPipelinerMockRecorder) XTrimMaxLenApprox(ctx, key, maxLen, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMaxLenApprox", reflect.TypeOf((*MockPipeliner)(nil).XTrimMaxLenApprox), ctx, key, maxLen, limit)
}

// XTrimMinID mocks base method.
func (m *MockPipeliner) XTrimMinID(ctx context.Context, key, minID string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMinID", ctx, key, minID)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMinID indicates an expected call of XTrimMinID.
func (mr *MockPipelinerMockRecorder) XTrimMinID(ctx, key, minID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMinID", reflect.TypeOf((*MockPipeliner)(nil).XTrimMinID), ctx, key, minID)
}

// XTrimMinIDApprox mocks base method.
func (m *MockPipeliner) XTrimMinIDApprox(ctx context.Context, key, minID string, limit int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimMinIDApprox", ctx, key, minID, limit)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimMinIDApprox indicates an expected call of XTrimMinIDApprox.
func (mr *MockPipelinerMockRecorder) XTrimMinIDApprox(ctx, key, minID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimMinIDApprox", reflect.TypeOf((*MockPipeliner)(nil).XTrimMinIDApprox), ctx, key, minID, limit)
}

// ZAdd mocks base method.
func (m *MockPipeliner) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockPipelinerMockRecorder) ZAdd(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockPipeliner)(nil).ZAdd), varargs...)
}

// ZAddArgs mocks base method.
func (m *MockPipeliner) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddArgs", ctx, key, args)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddArgs indicates an expected call of ZAddArgs.
func (mr *MockPipelinerMockRecorder) ZAddArgs(ctx, key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddArgs", reflect.TypeOf((*MockPipeliner)(nil).ZAddArgs), ctx, key, args)
}

// ZAddArgsIncr mocks base method.
func (m *MockPipeliner) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAddArgsIncr", ctx, key, args)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZAddArgsIncr indicates an expected call of ZAddArgsIncr.
func (mr *MockPipelinerMockRecorder) ZAddArgsIncr(ctx, key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddArgsIncr", reflect.TypeOf((*MockPipeliner)(nil).ZAddArgsIncr), ctx, key, args)
}

// ZAddGT mocks base method.
func (m *MockPipeliner) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddGT", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddGT indicates an expected call of ZAddGT.
func (mr *MockPipelinerMockRecorder) ZAddGT(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddGT", reflect.TypeOf((*MockPipeliner)(nil).ZAddGT), varargs...)
}

// ZAddLT mocks base method.
func (m *MockPipeliner) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddLT", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddLT indicates an expected call of ZAddLT.
func (mr *MockPipelinerMockRecorder) ZAddLT(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddLT", reflect.TypeOf((*MockPipeliner)(nil).ZAddLT), varargs...)
}

// ZAddNX mocks base method.
func (m *MockPipeliner) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddNX indicates an expected call of ZAddNX.
func (mr *MockPipelinerMockRecorder) ZAddNX(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockPipeliner)(nil).ZAddNX), varargs...)
}

// ZAddXX mocks base method.
func (m *MockPipeliner) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddXX indicates an expected call of ZAddXX.
func (mr *MockPipelinerMockRecorder) ZAddXX(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockPipeliner)(nil).ZAddXX), varargs...)
}

// ZCard mocks base method.
func (m *MockPipeliner) ZCard(ctx context.Context, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", ctx, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCard indicates an expected call of ZCard.
func (mr *MockPipelinerMockRecorder) ZCard(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockPipeliner)(nil).ZCard), ctx, key)
}

// ZCount mocks base method.
func (m *MockPipeliner) ZCount(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCount indicates an expected call of ZCount.
func (mr *MockPipelinerMockRecorder) ZCount(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockPipeliner)(nil).ZCount), ctx, key, min, max)
}

// ZDiff mocks base method.
func (m *MockPipeliner) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiff", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZDiff indicates an expected call of ZDiff.
func (mr *MockPipelinerMockRecorder) ZDiff(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiff", reflect.TypeOf((*MockPipeliner)(nil).ZDiff), varargs...)
}

// ZDiffStore mocks base method.
func (m *MockPipeliner) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiffStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZDiffStore indicates an expected call of ZDiffStore.
func (mr *MockPipelinerMockRecorder) ZDiffStore(ctx, destination any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiffStore", reflect.TypeOf((*MockPipeliner)(nil).ZDiffStore), varargs...)
}

// ZDiffWithScores mocks base method.
func (m *MockPipeliner) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZDiffWithScores", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZDiffWithScores indicates an expected call of ZDiffWithScores.
func (mr *MockPipelinerMockRecorder) ZDiffWithScores(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDiffWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZDiffWithScores), varargs...)
}

// ZIncrBy mocks base method.
func (m *MockPipeliner) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", ctx, key, increment, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncrBy indicates an expected call of ZIncrBy.
func (mr *MockPipelinerMockRecorder) ZIncrBy(ctx, key, increment, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockPipeliner)(nil).ZIncrBy), ctx, key, increment, member)
}

// ZInter mocks base method.
func (m *MockPipeliner) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInter", ctx, store)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZInter indicates an expected call of ZInter.
func (mr *MockPipelinerMockRecorder) ZInter(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInter", reflect.TypeOf((*MockPipeliner)(nil).ZInter), ctx, store)
}

// ZInterCard mocks base method.
func (m *MockPipeliner) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, limit}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZInterCard", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZInterCard indicates an expected call of ZInterCard.
func (mr *MockPipelinerMockRecorder) ZInterCard(ctx, limit any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, limit}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterCard", reflect.TypeOf((*MockPipeliner)(nil).ZInterCard), varargs...)
}

// ZInterStore mocks base method.
func (m *MockPipeliner) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInterStore", ctx, destination, store)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZInterStore indicates an expected call of ZInterStore.
func (mr *MockPipelinerMockRecorder) ZInterStore(ctx, destination, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterStore", reflect.TypeOf((*MockPipeliner)(nil).ZInterStore), ctx, destination, store)
}

// ZInterWithScores mocks base method.
func (m *MockPipeliner) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZInterWithScores", ctx, store)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZInterWithScores indicates an expected call of ZInterWithScores.
func (mr *MockPipelinerMockRecorder) ZInterWithScores(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZInterWithScores), ctx, store)
}

// ZLexCount mocks base method.
func (m *MockPipeliner) ZLexCount(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZLexCount", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZLexCount indicates an expected call of ZLexCount.
func (mr *MockPipelinerMockRecorder) ZLexCount(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZLexCount", reflect.TypeOf((*MockPipeliner)(nil).ZLexCount), ctx, key, min, max)
}

// ZMPop mocks base method.
func (m *MockPipeliner) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, order, count}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZMPop", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceWithKeyCmd)
	return ret0
}

// ZMPop indicates an expected call of ZMPop.
func (mr *MockPipelinerMockRecorder) ZMPop(ctx, order, count any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, order, count}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZMPop", reflect.TypeOf((*MockPipeliner)(nil).ZMPop), varargs...)
}

// ZMScore mocks base method.
func (m *MockPipeliner) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZMScore", varargs...)
	ret0, _ := ret[0].(*redis.FloatSliceCmd)
	return ret0
}

// ZMScore indicates an expected call of ZMScore.
func (mr *MockPipelinerMockRecorder) ZMScore(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZMScore", reflect.TypeOf((*MockPipeliner)(nil).ZMScore), varargs...)
}

// ZPopMax mocks base method.
func (m *MockPipeliner) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMax indicates an expected call of ZPopMax.
func (mr *MockPipelinerMockRecorder) ZPopMax(ctx, key any, count ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMax", reflect.TypeOf((*MockPipeliner)(nil).ZPopMax), varargs...)
}

// ZPopMin mocks base method.
func (m *MockPipeliner) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMin indicates an expected call of ZPopMin.
func (mr *MockPipelinerMockRecorder) ZPopMin(ctx, key any, count ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMin", reflect.TypeOf((*MockPipeliner)(nil).ZPopMin), varargs...)
}

// ZRandMember mocks base method.
func (m *MockPipeliner) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRandMember", ctx, key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRandMember indicates an expected call of ZRandMember.
func (mr *MockPipelinerMockRecorder) ZRandMember(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRandMember", reflect.TypeOf((*MockPipeliner)(nil).ZRandMember), ctx, key, count)
}

// ZRandMemberWithScores mocks base method.
func (m *MockPipeliner) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRandMemberWithScores", ctx, key, count)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRandMemberWithScores indicates an expected call of ZRandMemberWithScores.
func (mr *MockPipelinerMockRecorder) ZRandMemberWithScores(ctx, key, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRandMemberWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRandMemberWithScores), ctx, key, count)
}

// ZRange mocks base method.
func (m *MockPipeliner) ZRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRange indicates an expected call of ZRange.
func (mr *MockPipelinerMockRecorder) ZRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockPipeliner)(nil).ZRange), ctx, key, start, stop)
}

// ZRangeArgs mocks base method.
func (m *MockPipeliner) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeArgs", ctx, z)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeArgs indicates an expected call of ZRangeArgs.
func (mr *MockPipelinerMockRecorder) ZRangeArgs(ctx, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeArgs", reflect.TypeOf((*MockPipeliner)(nil).ZRangeArgs), ctx, z)
}

// ZRangeArgsWithScores mocks base method.
func (m *MockPipeliner) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeArgsWithScores", ctx, z)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeArgsWithScores indicates an expected call of ZRangeArgsWithScores.
func (mr *MockPipelinerMockRecorder) ZRangeArgsWithScores(ctx, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeArgsWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRangeArgsWithScores), ctx, z)
}

// ZRangeByLex mocks base method.
func (m *MockPipeliner) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByLex", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByLex indicates an expected call of ZRangeByLex.
func (mr *MockPipelinerMockRecorder) ZRangeByLex(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByLex", reflect.TypeOf((*MockPipeliner)(nil).ZRangeByLex), ctx, key, opt)
}

// ZRangeByScore mocks base method.
func (m *MockPipeliner) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByScore indicates an expected call of ZRangeByScore.
func (mr *MockPipelinerMockRecorder) ZRangeByScore(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockPipeliner)(nil).ZRangeByScore), ctx, key, opt)
}

// ZRangeByScoreWithScores mocks base method.
func (m *MockPipeliner) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScoreWithScores", ctx, key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores.
func (mr *MockPipelinerMockRecorder) ZRangeByScoreWithScores(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRangeByScoreWithScores), ctx, key, opt)
}

// ZRangeStore mocks base method.
func (m *MockPipeliner) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeStore", ctx, dst, z)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRangeStore indicates an expected call of ZRangeStore.
func (mr *MockPipelinerMockRecorder) ZRangeStore(ctx, dst, z any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeStore", reflect.TypeOf((*MockPipeliner)(nil).ZRangeStore), ctx, dst, z)
}

// ZRangeWithScores mocks base method.
func (m *MockPipeliner) ZRangeWithScores(ctx context.Context, key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeWithScores", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores.
func (mr *MockPipelinerMockRecorder) ZRangeWithScores(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRangeWithScores), ctx, key, start, stop)
}

// ZRank mocks base method.
func (m *MockPipeliner) ZRank(ctx context.Context, key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", ctx, key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRank indicates an expected call of ZRank.
func (mr *MockPipelinerMockRecorder) ZRank(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockPipeliner)(nil).ZRank), ctx, key, member)
}

// ZRankWithScore mocks base method.
func (m *MockPipeliner) ZRankWithScore(ctx context.Context, key, member string) *redis.RankWithScoreCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRankWithScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.RankWithScoreCmd)
	return ret0
}

// ZRankWithScore indicates an expected call of ZRankWithScore.
func (mr *MockPipelinerMockRecorder) ZRankWithScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRankWithScore", reflect.TypeOf((*MockPipeliner)(nil).ZRankWithScore), ctx, key, member)
}

// ZRem mocks base method.
func (m *MockPipeliner) ZRem(ctx context.Context, key string, members ...any) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockPipelinerMockRecorder) ZRem(ctx, key any, members ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockPipeliner)(nil).ZRem), varargs...)
}

// ZRemRangeByLex mocks base method.
func (m *MockPipeliner) ZRemRangeByLex(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByLex", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByLex indicates an expected call of ZRemRangeByLex.
func (mr *MockPipelinerMockRecorder) ZRemRangeByLex(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByLex", reflect.TypeOf((*MockPipeliner)(nil).ZRemRangeByLex), ctx, key, min, max)
}

// ZRemRangeByRank mocks base method.
func (m *MockPipeliner) ZRemRangeByRank(ctx context.Context, key string, start, stop int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank.
func (mr *MockPipelinerMockRecorder) ZRemRangeByRank(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockPipeliner)(nil).ZRemRangeByRank), ctx, key, start, stop)
}

// ZRemRangeByScore mocks base method.
func (m *MockPipeliner) ZRemRangeByScore(ctx context.Context, key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", ctx, key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore.
func (mr *MockPipelinerMockRecorder) ZRemRangeByScore(ctx, key, min, max any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockPipeliner)(nil).ZRemRangeByScore), ctx, key, min, max)
}

// ZRevRange mocks base method.
func (m *MockPipeliner) ZRevRange(ctx context.Context, key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRange indicates an expected call of ZRevRange.
func (mr *MockPipelinerMockRecorder) ZRevRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockPipeliner)(nil).ZRevRange), ctx, key, start, stop)
}

// ZRevRangeByLex mocks base method.
func (m *MockPipeliner) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByLex", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByLex indicates an expected call of ZRevRangeByLex.
func (mr *MockPipelinerMockRecorder) ZRevRangeByLex(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByLex", reflect.TypeOf((*MockPipeliner)(nil).ZRevRangeByLex), ctx, key, opt)
}

// ZRevRangeByScore mocks base method.
func (m *MockPipeliner) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", ctx, key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore.
func (mr *MockPipelinerMockRecorder) ZRevRangeByScore(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockPipeliner)(nil).ZRevRangeByScore), ctx, key, opt)
}

// ZRevRangeByScoreWithScores mocks base method.
func (m *MockPipeliner) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScoreWithScores", ctx, key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores.
func (mr *MockPipelinerMockRecorder) ZRevRangeByScoreWithScores(ctx, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRevRangeByScoreWithScores), ctx, key, opt)
}

// ZRevRangeWithScores mocks base method.
func (m *MockPipeliner) ZRevRangeWithScores(ctx context.Context, key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScores", ctx, key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores.
func (mr *MockPipelinerMockRecorder) ZRevRangeWithScores(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZRevRangeWithScores), ctx, key, start, stop)
}

// ZRevRank mocks base method.
func (m *MockPipeliner) ZRevRank(ctx context.Context, key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", ctx, key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRevRank indicates an expected call of ZRevRank.
func (mr *MockPipelinerMockRecorder) ZRevRank(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockPipeliner)(nil).ZRevRank), ctx, key, member)
}

// ZRevRankWithScore mocks base method.
func (m *MockPipeliner) ZRevRankWithScore(ctx context.Context, key, member string) *redis.RankWithScoreCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRankWithScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.RankWithScoreCmd)
	return ret0
}

// ZRevRankWithScore indicates an expected call of ZRevRankWithScore.
func (mr *MockPipelinerMockRecorder) ZRevRankWithScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRankWithScore", reflect.TypeOf((*MockPipeliner)(nil).ZRevRankWithScore), ctx, key, member)
}

// ZScan mocks base method.
func (m *MockPipeliner) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", ctx, key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// ZScan indicates an expected call of ZScan.
func (mr *MockPipelinerMockRecorder) ZScan(ctx, key, cursor, match, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockPipeliner)(nil).ZScan), ctx, key, cursor, match, count)
}

// ZScore mocks base method.
func (m *MockPipeliner) ZScore(ctx context.Context, key, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", ctx, key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZScore indicates an expected call of ZScore.
func (mr *MockPipelinerMockRecorder) ZScore(ctx, key, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockPipeliner)(nil).ZScore), ctx, key, member)
}

// ZUnion mocks base method.
func (m *MockPipeliner) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnion", ctx, store)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZUnion indicates an expected call of ZUnion.
func (mr *MockPipelinerMockRecorder) ZUnion(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnion", reflect.TypeOf((*MockPipeliner)(nil).ZUnion), ctx, store)
}

// ZUnionStore mocks base method.
func (m *MockPipeliner) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnionStore", ctx, dest, store)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZUnionStore indicates an expected call of ZUnionStore.
func (mr *MockPipelinerMockRecorder) ZUnionStore(ctx, dest, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionStore", reflect.TypeOf((*MockPipeliner)(nil).ZUnionStore), ctx, dest, store)
}

// ZUnionWithScores mocks base method.
func (m *MockPipeliner) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZUnionWithScores", ctx, store)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZUnionWithScores indicates an expected call of ZUnionWithScores.
func (mr *MockPipelinerMockRecorder) ZUnionWithScores(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionWithScores", reflect.TypeOf((*MockPipeliner)(nil).ZUnionWithScores), ctx, store)
}
