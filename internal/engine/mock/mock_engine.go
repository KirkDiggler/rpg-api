// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/engine (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_engine.go -package=enginemock github.com/KirkDiggler/rpg-api/internal/engine Engine
//

// Package enginemock is a generated GoMock package.
package enginemock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	engine "github.com/KirkDiggler/rpg-api/internal/engine"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// CalculateAbilityModifier mocks base method.
func (m *MockEngine) CalculateAbilityModifier(score int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateAbilityModifier", score)
	ret0, _ := ret[0].(int32)
	return ret0
}

// CalculateAbilityModifier indicates an expected call of CalculateAbilityModifier.
func (mr *MockEngineMockRecorder) CalculateAbilityModifier(score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateAbilityModifier", reflect.TypeOf((*MockEngine)(nil).CalculateAbilityModifier), score)
}

// CalculateCharacterStats mocks base method.
func (m *MockEngine) CalculateCharacterStats(ctx context.Context, input *engine.CalculateCharacterStatsInput) (*engine.CalculateCharacterStatsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateCharacterStats", ctx, input)
	ret0, _ := ret[0].(*engine.CalculateCharacterStatsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateCharacterStats indicates an expected call of CalculateCharacterStats.
func (mr *MockEngineMockRecorder) CalculateCharacterStats(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateCharacterStats", reflect.TypeOf((*MockEngine)(nil).CalculateCharacterStats), ctx, input)
}

// CalculateProficiencyBonus mocks base method.
func (m *MockEngine) CalculateProficiencyBonus(level int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateProficiencyBonus", level)
	ret0, _ := ret[0].(int32)
	return ret0
}

// CalculateProficiencyBonus indicates an expected call of CalculateProficiencyBonus.
func (mr *MockEngineMockRecorder) CalculateProficiencyBonus(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateProficiencyBonus", reflect.TypeOf((*MockEngine)(nil).CalculateProficiencyBonus), level)
}

// GetAvailableSkills mocks base method.
func (m *MockEngine) GetAvailableSkills(ctx context.Context, input *engine.GetAvailableSkillsInput) (*engine.GetAvailableSkillsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSkills", ctx, input)
	ret0, _ := ret[0].(*engine.GetAvailableSkillsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSkills indicates an expected call of GetAvailableSkills.
func (mr *MockEngineMockRecorder) GetAvailableSkills(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSkills", reflect.TypeOf((*MockEngine)(nil).GetAvailableSkills), ctx, input)
}

// ValidateAbilityScores mocks base method.
func (m *MockEngine) ValidateAbilityScores(ctx context.Context, input *engine.ValidateAbilityScoresInput) (*engine.ValidateAbilityScoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAbilityScores", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateAbilityScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAbilityScores indicates an expected call of ValidateAbilityScores.
func (mr *MockEngineMockRecorder) ValidateAbilityScores(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAbilityScores", reflect.TypeOf((*MockEngine)(nil).ValidateAbilityScores), ctx, input)
}

// ValidateBackgroundChoice mocks base method.
func (m *MockEngine) ValidateBackgroundChoice(ctx context.Context, input *engine.ValidateBackgroundChoiceInput) (*engine.ValidateBackgroundChoiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBackgroundChoice", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateBackgroundChoiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBackgroundChoice indicates an expected call of ValidateBackgroundChoice.
func (mr *MockEngineMockRecorder) ValidateBackgroundChoice(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackgroundChoice", reflect.TypeOf((*MockEngine)(nil).ValidateBackgroundChoice), ctx, input)
}

// ValidateCharacterDraft mocks base method.
func (m *MockEngine) ValidateCharacterDraft(ctx context.Context, input *engine.ValidateCharacterDraftInput) (*engine.ValidateCharacterDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCharacterDraft", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateCharacterDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCharacterDraft indicates an expected call of ValidateCharacterDraft.
func (mr *MockEngineMockRecorder) ValidateCharacterDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCharacterDraft", reflect.TypeOf((*MockEngine)(nil).ValidateCharacterDraft), ctx, input)
}

// ValidateClassChoice mocks base method.
func (m *MockEngine) ValidateClassChoice(ctx context.Context, input *engine.ValidateClassChoiceInput) (*engine.ValidateClassChoiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClassChoice", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateClassChoiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClassChoice indicates an expected call of ValidateClassChoice.
func (mr *MockEngineMockRecorder) ValidateClassChoice(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClassChoice", reflect.TypeOf((*MockEngine)(nil).ValidateClassChoice), ctx, input)
}

// ValidateRaceChoice mocks base method.
func (m *MockEngine) ValidateRaceChoice(ctx context.Context, input *engine.ValidateRaceChoiceInput) (*engine.ValidateRaceChoiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRaceChoice", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateRaceChoiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRaceChoice indicates an expected call of ValidateRaceChoice.
func (mr *MockEngineMockRecorder) ValidateRaceChoice(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRaceChoice", reflect.TypeOf((*MockEngine)(nil).ValidateRaceChoice), ctx, input)
}

// ValidateSkillChoices mocks base method.
func (m *MockEngine) ValidateSkillChoices(ctx context.Context, input *engine.ValidateSkillChoicesInput) (*engine.ValidateSkillChoicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSkillChoices", ctx, input)
	ret0, _ := ret[0].(*engine.ValidateSkillChoicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSkillChoices indicates an expected call of ValidateSkillChoices.
func (mr *MockEngineMockRecorder) ValidateSkillChoices(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSkillChoices", reflect.TypeOf((*MockEngine)(nil).ValidateSkillChoices), ctx, input)
}
