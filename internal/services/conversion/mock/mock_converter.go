// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/services/conversion (interfaces: DraftConverter)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_converter.go -package=conversionmock github.com/KirkDiggler/rpg-api/internal/services/conversion DraftConverter
//

// Package conversionmock is a generated GoMock package.
package conversionmock

import (
	context "context"
	reflect "reflect"

	dnd5e "github.com/KirkDiggler/rpg-api/internal/entities/dnd5e"
	gomock "go.uber.org/mock/gomock"
)

// MockDraftConverter is a mock of DraftConverter interface.
type MockDraftConverter struct {
	ctrl     *gomock.Controller
	recorder *MockDraftConverterMockRecorder
	isgomock struct{}
}

// MockDraftConverterMockRecorder is the mock recorder for MockDraftConverter.
type MockDraftConverterMockRecorder struct {
	mock *MockDraftConverter
}

// NewMockDraftConverter creates a new mock instance.
func NewMockDraftConverter(ctrl *gomock.Controller) *MockDraftConverter {
	mock := &MockDraftConverter{ctrl: ctrl}
	mock.recorder = &MockDraftConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDraftConverter) EXPECT() *MockDraftConverterMockRecorder {
	return m.recorder
}

// FromCharacterDraft mocks base method.
func (m *MockDraftConverter) FromCharacterDraft(draft *dnd5e.CharacterDraft) *dnd5e.CharacterDraftData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromCharacterDraft", draft)
	ret0, _ := ret[0].(*dnd5e.CharacterDraftData)
	return ret0
}

// FromCharacterDraft indicates an expected call of FromCharacterDraft.
func (mr *MockDraftConverterMockRecorder) FromCharacterDraft(draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromCharacterDraft", reflect.TypeOf((*MockDraftConverter)(nil).FromCharacterDraft), draft)
}

// HydrateDraft mocks base method.
func (m *MockDraftConverter) HydrateDraft(ctx context.Context, draft *dnd5e.CharacterDraft) (*dnd5e.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HydrateDraft", ctx, draft)
	ret0, _ := ret[0].(*dnd5e.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HydrateDraft indicates an expected call of HydrateDraft.
func (mr *MockDraftConverterMockRecorder) HydrateDraft(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateDraft", reflect.TypeOf((*MockDraftConverter)(nil).HydrateDraft), ctx, draft)
}

// ToCharacterDraft mocks base method.
func (m *MockDraftConverter) ToCharacterDraft(data *dnd5e.CharacterDraftData) *dnd5e.CharacterDraft {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCharacterDraft", data)
	ret0, _ := ret[0].(*dnd5e.CharacterDraft)
	return ret0
}

// ToCharacterDraft indicates an expected call of ToCharacterDraft.
func (mr *MockDraftConverterMockRecorder) ToCharacterDraft(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCharacterDraft", reflect.TypeOf((*MockDraftConverter)(nil).ToCharacterDraft), data)
}
