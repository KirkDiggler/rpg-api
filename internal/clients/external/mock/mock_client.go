// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/clients/external (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_client.go -package=externalmock github.com/KirkDiggler/rpg-api/internal/clients/external Client
//

// Package externalmock is a generated GoMock package.
package externalmock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	external "github.com/KirkDiggler/rpg-api/internal/clients/external"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetBackgroundData mocks base method.
func (m *MockClient) GetBackgroundData(ctx context.Context, backgroundID string) (*external.BackgroundData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundData", ctx, backgroundID)
	ret0, _ := ret[0].(*external.BackgroundData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgroundData indicates an expected call of GetBackgroundData.
func (mr *MockClientMockRecorder) GetBackgroundData(ctx, backgroundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundData", reflect.TypeOf((*MockClient)(nil).GetBackgroundData), ctx, backgroundID)
}

// GetClassData mocks base method.
func (m *MockClient) GetClassData(ctx context.Context, classID string) (*external.ClassData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassData", ctx, classID)
	ret0, _ := ret[0].(*external.ClassData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassData indicates an expected call of GetClassData.
func (mr *MockClientMockRecorder) GetClassData(ctx, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassData", reflect.TypeOf((*MockClient)(nil).GetClassData), ctx, classID)
}

// GetRaceData mocks base method.
func (m *MockClient) GetRaceData(ctx context.Context, raceID string) (*external.RaceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaceData", ctx, raceID)
	ret0, _ := ret[0].(*external.RaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaceData indicates an expected call of GetRaceData.
func (mr *MockClientMockRecorder) GetRaceData(ctx, raceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaceData", reflect.TypeOf((*MockClient)(nil).GetRaceData), ctx, raceID)
}

// GetSpellData mocks base method.
func (m *MockClient) GetSpellData(ctx context.Context, spellID string) (*external.SpellData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpellData", ctx, spellID)
	ret0, _ := ret[0].(*external.SpellData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpellData indicates an expected call of GetSpellData.
func (mr *MockClientMockRecorder) GetSpellData(ctx, spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpellData", reflect.TypeOf((*MockClient)(nil).GetSpellData), ctx, spellID)
}

// ListAvailableBackgrounds mocks base method.
func (m *MockClient) ListAvailableBackgrounds(ctx context.Context) ([]*external.BackgroundData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableBackgrounds", ctx)
	ret0, _ := ret[0].([]*external.BackgroundData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableBackgrounds indicates an expected call of ListAvailableBackgrounds.
func (mr *MockClientMockRecorder) ListAvailableBackgrounds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableBackgrounds", reflect.TypeOf((*MockClient)(nil).ListAvailableBackgrounds), ctx)
}

// ListAvailableClasses mocks base method.
func (m *MockClient) ListAvailableClasses(ctx context.Context) ([]*external.ClassData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableClasses", ctx)
	ret0, _ := ret[0].([]*external.ClassData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableClasses indicates an expected call of ListAvailableClasses.
func (mr *MockClientMockRecorder) ListAvailableClasses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableClasses", reflect.TypeOf((*MockClient)(nil).ListAvailableClasses), ctx)
}

// ListAvailableRaces mocks base method.
func (m *MockClient) ListAvailableRaces(ctx context.Context) ([]*external.RaceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableRaces", ctx)
	ret0, _ := ret[0].([]*external.RaceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableRaces indicates an expected call of ListAvailableRaces.
func (mr *MockClientMockRecorder) ListAvailableRaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableRaces", reflect.TypeOf((*MockClient)(nil).ListAvailableRaces), ctx)
}

// ListAvailableSpells mocks base method.
func (m *MockClient) ListAvailableSpells(ctx context.Context, input *external.ListSpellsInput) ([]*external.SpellData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSpells", ctx, input)
	ret0, _ := ret[0].([]*external.SpellData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSpells indicates an expected call of ListAvailableSpells.
func (mr *MockClientMockRecorder) ListAvailableSpells(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSpells", reflect.TypeOf((*MockClient)(nil).ListAvailableSpells), ctx, input)
}
