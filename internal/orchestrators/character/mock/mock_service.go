// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/orchestrators/character (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_service.go -package=charactermock github.com/KirkDiggler/rpg-api/internal/orchestrators/character Service
//

// Package charactermock is a generated GoMock package.
package charactermock

import (
	context "context"
	reflect "reflect"

	character "github.com/KirkDiggler/rpg-api/internal/orchestrators/character"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddToInventory mocks base method.
func (m *MockService) AddToInventory(ctx context.Context, input *character.AddToInventoryInput) (*character.AddToInventoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToInventory", ctx, input)
	ret0, _ := ret[0].(*character.AddToInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToInventory indicates an expected call of AddToInventory.
func (mr *MockServiceMockRecorder) AddToInventory(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToInventory", reflect.TypeOf((*MockService)(nil).AddToInventory), ctx, input)
}

// CreateDraft mocks base method.
func (m *MockService) CreateDraft(ctx context.Context, input *character.CreateDraftInput) (*character.CreateDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", ctx, input)
	ret0, _ := ret[0].(*character.CreateDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockServiceMockRecorder) CreateDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockService)(nil).CreateDraft), ctx, input)
}

// DeleteCharacter mocks base method.
func (m *MockService) DeleteCharacter(ctx context.Context, input *character.DeleteCharacterInput) (*character.DeleteCharacterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", ctx, input)
	ret0, _ := ret[0].(*character.DeleteCharacterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockServiceMockRecorder) DeleteCharacter(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockService)(nil).DeleteCharacter), ctx, input)
}

// DeleteDraft mocks base method.
func (m *MockService) DeleteDraft(ctx context.Context, input *character.DeleteDraftInput) (*character.DeleteDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDraft", ctx, input)
	ret0, _ := ret[0].(*character.DeleteDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDraft indicates an expected call of DeleteDraft.
func (mr *MockServiceMockRecorder) DeleteDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraft", reflect.TypeOf((*MockService)(nil).DeleteDraft), ctx, input)
}

// EquipItem mocks base method.
func (m *MockService) EquipItem(ctx context.Context, input *character.EquipItemInput) (*character.EquipItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipItem", ctx, input)
	ret0, _ := ret[0].(*character.EquipItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipItem indicates an expected call of EquipItem.
func (mr *MockServiceMockRecorder) EquipItem(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipItem", reflect.TypeOf((*MockService)(nil).EquipItem), ctx, input)
}

// FinalizeDraft mocks base method.
func (m *MockService) FinalizeDraft(ctx context.Context, input *character.FinalizeDraftInput) (*character.FinalizeDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDraft", ctx, input)
	ret0, _ := ret[0].(*character.FinalizeDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeDraft indicates an expected call of FinalizeDraft.
func (mr *MockServiceMockRecorder) FinalizeDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDraft", reflect.TypeOf((*MockService)(nil).FinalizeDraft), ctx, input)
}

// GetBackgroundDetails mocks base method.
func (m *MockService) GetBackgroundDetails(ctx context.Context, input *character.GetBackgroundDetailsInput) (*character.GetBackgroundDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundDetails", ctx, input)
	ret0, _ := ret[0].(*character.GetBackgroundDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackgroundDetails indicates an expected call of GetBackgroundDetails.
func (mr *MockServiceMockRecorder) GetBackgroundDetails(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundDetails", reflect.TypeOf((*MockService)(nil).GetBackgroundDetails), ctx, input)
}

// GetCharacter mocks base method.
func (m *MockService) GetCharacter(ctx context.Context, input *character.GetCharacterInput) (*character.GetCharacterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, input)
	ret0, _ := ret[0].(*character.GetCharacterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockServiceMockRecorder) GetCharacter(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockService)(nil).GetCharacter), ctx, input)
}

// GetCharacterInventory mocks base method.
func (m *MockService) GetCharacterInventory(ctx context.Context, input *character.GetCharacterInventoryInput) (*character.GetCharacterInventoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterInventory", ctx, input)
	ret0, _ := ret[0].(*character.GetCharacterInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterInventory indicates an expected call of GetCharacterInventory.
func (mr *MockServiceMockRecorder) GetCharacterInventory(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterInventory", reflect.TypeOf((*MockService)(nil).GetCharacterInventory), ctx, input)
}

// GetClassDetails mocks base method.
func (m *MockService) GetClassDetails(ctx context.Context, input *character.GetClassDetailsInput) (*character.GetClassDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassDetails", ctx, input)
	ret0, _ := ret[0].(*character.GetClassDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassDetails indicates an expected call of GetClassDetails.
func (mr *MockServiceMockRecorder) GetClassDetails(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassDetails", reflect.TypeOf((*MockService)(nil).GetClassDetails), ctx, input)
}

// GetDraft mocks base method.
func (m *MockService) GetDraft(ctx context.Context, input *character.GetDraftInput) (*character.GetDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraft", ctx, input)
	ret0, _ := ret[0].(*character.GetDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraft indicates an expected call of GetDraft.
func (mr *MockServiceMockRecorder) GetDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraft", reflect.TypeOf((*MockService)(nil).GetDraft), ctx, input)
}

// GetDraftPreview mocks base method.
func (m *MockService) GetDraftPreview(ctx context.Context, input *character.GetDraftPreviewInput) (*character.GetDraftPreviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraftPreview", ctx, input)
	ret0, _ := ret[0].(*character.GetDraftPreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraftPreview indicates an expected call of GetDraftPreview.
func (mr *MockServiceMockRecorder) GetDraftPreview(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftPreview", reflect.TypeOf((*MockService)(nil).GetDraftPreview), ctx, input)
}

// GetFeature mocks base method.
func (m *MockService) GetFeature(ctx context.Context, input *character.GetFeatureInput) (*character.GetFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", ctx, input)
	ret0, _ := ret[0].(*character.GetFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature.
func (mr *MockServiceMockRecorder) GetFeature(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockService)(nil).GetFeature), ctx, input)
}

// GetRaceDetails mocks base method.
func (m *MockService) GetRaceDetails(ctx context.Context, input *character.GetRaceDetailsInput) (*character.GetRaceDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaceDetails", ctx, input)
	ret0, _ := ret[0].(*character.GetRaceDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaceDetails indicates an expected call of GetRaceDetails.
func (mr *MockServiceMockRecorder) GetRaceDetails(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaceDetails", reflect.TypeOf((*MockService)(nil).GetRaceDetails), ctx, input)
}

// ListBackgrounds mocks base method.
func (m *MockService) ListBackgrounds(ctx context.Context, input *character.ListBackgroundsInput) (*character.ListBackgroundsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackgrounds", ctx, input)
	ret0, _ := ret[0].(*character.ListBackgroundsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackgrounds indicates an expected call of ListBackgrounds.
func (mr *MockServiceMockRecorder) ListBackgrounds(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackgrounds", reflect.TypeOf((*MockService)(nil).ListBackgrounds), ctx, input)
}

// ListCharacters mocks base method.
func (m *MockService) ListCharacters(ctx context.Context, input *character.ListCharactersInput) (*character.ListCharactersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharacters", ctx, input)
	ret0, _ := ret[0].(*character.ListCharactersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockServiceMockRecorder) ListCharacters(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockService)(nil).ListCharacters), ctx, input)
}

// ListChoiceOptions mocks base method.
func (m *MockService) ListChoiceOptions(ctx context.Context, input *character.ListChoiceOptionsInput) (*character.ListChoiceOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChoiceOptions", ctx, input)
	ret0, _ := ret[0].(*character.ListChoiceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChoiceOptions indicates an expected call of ListChoiceOptions.
func (mr *MockServiceMockRecorder) ListChoiceOptions(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChoiceOptions", reflect.TypeOf((*MockService)(nil).ListChoiceOptions), ctx, input)
}

// ListClasses mocks base method.
func (m *MockService) ListClasses(ctx context.Context, input *character.ListClassesInput) (*character.ListClassesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClasses", ctx, input)
	ret0, _ := ret[0].(*character.ListClassesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClasses indicates an expected call of ListClasses.
func (mr *MockServiceMockRecorder) ListClasses(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClasses", reflect.TypeOf((*MockService)(nil).ListClasses), ctx, input)
}

// ListDrafts mocks base method.
func (m *MockService) ListDrafts(ctx context.Context, input *character.ListDraftsInput) (*character.ListDraftsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDrafts", ctx, input)
	ret0, _ := ret[0].(*character.ListDraftsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDrafts indicates an expected call of ListDrafts.
func (mr *MockServiceMockRecorder) ListDrafts(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDrafts", reflect.TypeOf((*MockService)(nil).ListDrafts), ctx, input)
}

// ListEquipmentByType mocks base method.
func (m *MockService) ListEquipmentByType(ctx context.Context, input *character.ListEquipmentByTypeInput) (*character.ListEquipmentByTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentByType", ctx, input)
	ret0, _ := ret[0].(*character.ListEquipmentByTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentByType indicates an expected call of ListEquipmentByType.
func (mr *MockServiceMockRecorder) ListEquipmentByType(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentByType", reflect.TypeOf((*MockService)(nil).ListEquipmentByType), ctx, input)
}

// ListRaces mocks base method.
func (m *MockService) ListRaces(ctx context.Context, input *character.ListRacesInput) (*character.ListRacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRaces", ctx, input)
	ret0, _ := ret[0].(*character.ListRacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRaces indicates an expected call of ListRaces.
func (mr *MockServiceMockRecorder) ListRaces(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRaces", reflect.TypeOf((*MockService)(nil).ListRaces), ctx, input)
}

// ListSpellsByLevel mocks base method.
func (m *MockService) ListSpellsByLevel(ctx context.Context, input *character.ListSpellsByLevelInput) (*character.ListSpellsByLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpellsByLevel", ctx, input)
	ret0, _ := ret[0].(*character.ListSpellsByLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpellsByLevel indicates an expected call of ListSpellsByLevel.
func (mr *MockServiceMockRecorder) ListSpellsByLevel(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpellsByLevel", reflect.TypeOf((*MockService)(nil).ListSpellsByLevel), ctx, input)
}

// RemoveFromInventory mocks base method.
func (m *MockService) RemoveFromInventory(ctx context.Context, input *character.RemoveFromInventoryInput) (*character.RemoveFromInventoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromInventory", ctx, input)
	ret0, _ := ret[0].(*character.RemoveFromInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromInventory indicates an expected call of RemoveFromInventory.
func (mr *MockServiceMockRecorder) RemoveFromInventory(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromInventory", reflect.TypeOf((*MockService)(nil).RemoveFromInventory), ctx, input)
}

// RollAbilityScores mocks base method.
func (m *MockService) RollAbilityScores(ctx context.Context, input *character.RollAbilityScoresInput) (*character.RollAbilityScoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollAbilityScores", ctx, input)
	ret0, _ := ret[0].(*character.RollAbilityScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollAbilityScores indicates an expected call of RollAbilityScores.
func (mr *MockServiceMockRecorder) RollAbilityScores(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollAbilityScores", reflect.TypeOf((*MockService)(nil).RollAbilityScores), ctx, input)
}

// UnequipItem mocks base method.
func (m *MockService) UnequipItem(ctx context.Context, input *character.UnequipItemInput) (*character.UnequipItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnequipItem", ctx, input)
	ret0, _ := ret[0].(*character.UnequipItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnequipItem indicates an expected call of UnequipItem.
func (mr *MockServiceMockRecorder) UnequipItem(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnequipItem", reflect.TypeOf((*MockService)(nil).UnequipItem), ctx, input)
}

// UpdateAbilityScores mocks base method.
func (m *MockService) UpdateAbilityScores(ctx context.Context, input *character.UpdateAbilityScoresInput) (*character.UpdateAbilityScoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAbilityScores", ctx, input)
	ret0, _ := ret[0].(*character.UpdateAbilityScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAbilityScores indicates an expected call of UpdateAbilityScores.
func (mr *MockServiceMockRecorder) UpdateAbilityScores(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAbilityScores", reflect.TypeOf((*MockService)(nil).UpdateAbilityScores), ctx, input)
}

// UpdateBackground mocks base method.
func (m *MockService) UpdateBackground(ctx context.Context, input *character.UpdateBackgroundInput) (*character.UpdateBackgroundOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackground", ctx, input)
	ret0, _ := ret[0].(*character.UpdateBackgroundOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackground indicates an expected call of UpdateBackground.
func (mr *MockServiceMockRecorder) UpdateBackground(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackground", reflect.TypeOf((*MockService)(nil).UpdateBackground), ctx, input)
}

// UpdateChoices mocks base method.
func (m *MockService) UpdateChoices(ctx context.Context, input *character.UpdateChoicesInput) (*character.UpdateChoicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChoices", ctx, input)
	ret0, _ := ret[0].(*character.UpdateChoicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChoices indicates an expected call of UpdateChoices.
func (mr *MockServiceMockRecorder) UpdateChoices(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChoices", reflect.TypeOf((*MockService)(nil).UpdateChoices), ctx, input)
}

// UpdateClass mocks base method.
func (m *MockService) UpdateClass(ctx context.Context, input *character.UpdateClassInput) (*character.UpdateClassOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, input)
	ret0, _ := ret[0].(*character.UpdateClassOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockServiceMockRecorder) UpdateClass(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockService)(nil).UpdateClass), ctx, input)
}

// UpdateName mocks base method.
func (m *MockService) UpdateName(ctx context.Context, input *character.UpdateNameInput) (*character.UpdateNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, input)
	ret0, _ := ret[0].(*character.UpdateNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockServiceMockRecorder) UpdateName(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockService)(nil).UpdateName), ctx, input)
}

// UpdateRace mocks base method.
func (m *MockService) UpdateRace(ctx context.Context, input *character.UpdateRaceInput) (*character.UpdateRaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRace", ctx, input)
	ret0, _ := ret[0].(*character.UpdateRaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRace indicates an expected call of UpdateRace.
func (mr *MockServiceMockRecorder) UpdateRace(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRace", reflect.TypeOf((*MockService)(nil).UpdateRace), ctx, input)
}

// UpdateSkills mocks base method.
func (m *MockService) UpdateSkills(ctx context.Context, input *character.UpdateSkillsInput) (*character.UpdateSkillsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkills", ctx, input)
	ret0, _ := ret[0].(*character.UpdateSkillsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkills indicates an expected call of UpdateSkills.
func (mr *MockServiceMockRecorder) UpdateSkills(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkills", reflect.TypeOf((*MockService)(nil).UpdateSkills), ctx, input)
}

// ValidateDraft mocks base method.
func (m *MockService) ValidateDraft(ctx context.Context, input *character.ValidateDraftInput) (*character.ValidateDraftOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDraft", ctx, input)
	ret0, _ := ret[0].(*character.ValidateDraftOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDraft indicates an expected call of ValidateDraft.
func (mr *MockServiceMockRecorder) ValidateDraft(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDraft", reflect.TypeOf((*MockService)(nil).ValidateDraft), ctx, input)
}
