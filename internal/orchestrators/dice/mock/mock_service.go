// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/orchestrators/dice (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_service.go -package=dicemock github.com/KirkDiggler/rpg-api/internal/orchestrators/dice Service
//

// Package dicemock is a generated GoMock package.
package dicemock

import (
	context "context"
	reflect "reflect"

	dice "github.com/KirkDiggler/rpg-api/internal/orchestrators/dice"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ClearRollSession mocks base method.
func (m *MockService) ClearRollSession(ctx context.Context, input *dice.ClearRollSessionInput) (*dice.ClearRollSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRollSession", ctx, input)
	ret0, _ := ret[0].(*dice.ClearRollSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearRollSession indicates an expected call of ClearRollSession.
func (mr *MockServiceMockRecorder) ClearRollSession(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRollSession", reflect.TypeOf((*MockService)(nil).ClearRollSession), ctx, input)
}

// GetRollSession mocks base method.
func (m *MockService) GetRollSession(ctx context.Context, input *dice.GetRollSessionInput) (*dice.GetRollSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollSession", ctx, input)
	ret0, _ := ret[0].(*dice.GetRollSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollSession indicates an expected call of GetRollSession.
func (mr *MockServiceMockRecorder) GetRollSession(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollSession", reflect.TypeOf((*MockService)(nil).GetRollSession), ctx, input)
}

// RollAbilityScores mocks base method.
func (m *MockService) RollAbilityScores(ctx context.Context, input *dice.RollAbilityScoresInput) (*dice.RollAbilityScoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollAbilityScores", ctx, input)
	ret0, _ := ret[0].(*dice.RollAbilityScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollAbilityScores indicates an expected call of RollAbilityScores.
func (mr *MockServiceMockRecorder) RollAbilityScores(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollAbilityScores", reflect.TypeOf((*MockService)(nil).RollAbilityScores), ctx, input)
}

// RollDice mocks base method.
func (m *MockService) RollDice(ctx context.Context, input *dice.RollDiceInput) (*dice.RollDiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollDice", ctx, input)
	ret0, _ := ret[0].(*dice.RollDiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollDice indicates an expected call of RollDice.
func (mr *MockServiceMockRecorder) RollDice(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollDice", reflect.TypeOf((*MockService)(nil).RollDice), ctx, input)
}
