// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/repositories/character_draft (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_repository.go -package=characterdraftmock github.com/KirkDiggler/rpg-api/internal/repositories/character_draft Repository
//

// Package characterdraftmock is a generated GoMock package.
package characterdraftmock

import (
	context "context"
	reflect "reflect"

	characterdraft "github.com/KirkDiggler/rpg-api/internal/repositories/character_draft"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, input characterdraft.CreateInput) (*characterdraft.CreateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*characterdraft.CreateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, input characterdraft.DeleteInput) (*characterdraft.DeleteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, input)
	ret0, _ := ret[0].(*characterdraft.DeleteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, input)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, input characterdraft.GetInput) (*characterdraft.GetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(*characterdraft.GetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, input)
}

// GetByPlayerID mocks base method.
func (m *MockRepository) GetByPlayerID(ctx context.Context, input characterdraft.GetByPlayerIDInput) (*characterdraft.GetByPlayerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlayerID", ctx, input)
	ret0, _ := ret[0].(*characterdraft.GetByPlayerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlayerID indicates an expected call of GetByPlayerID.
func (mr *MockRepositoryMockRecorder) GetByPlayerID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlayerID", reflect.TypeOf((*MockRepository)(nil).GetByPlayerID), ctx, input)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, input characterdraft.UpdateInput) (*characterdraft.UpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(*characterdraft.UpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, input)
}
