// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-api/internal/repositories/character_draft (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_repository.go -package=characterdraftmock github.com/KirkDiggler/rpg-api/internal/repositories/character_draft Repository
//

// Package characterdraftmock is a generated GoMock package.
package characterdraftmock

import (
	context "context"
	reflect "reflect"

	dnd5e "github.com/KirkDiggler/rpg-api/internal/entities/dnd5e"
	characterdraft "github.com/KirkDiggler/rpg-api/internal/repositories/character_draft"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, draft *dnd5e.CharacterDraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, draft)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// DeleteExpired mocks base method.
func (m *MockRepository) DeleteExpired(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpired", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpired indicates an expected call of DeleteExpired.
func (mr *MockRepositoryMockRecorder) DeleteExpired(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpired", reflect.TypeOf((*MockRepository)(nil).DeleteExpired), ctx)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (*dnd5e.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*dnd5e.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByPlayerID mocks base method.
func (m *MockRepository) GetByPlayerID(ctx context.Context, playerID string) ([]*dnd5e.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlayerID", ctx, playerID)
	ret0, _ := ret[0].([]*dnd5e.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlayerID indicates an expected call of GetByPlayerID.
func (mr *MockRepositoryMockRecorder) GetByPlayerID(ctx, playerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlayerID", reflect.TypeOf((*MockRepository)(nil).GetByPlayerID), ctx, playerID)
}

// GetBySessionID mocks base method.
func (m *MockRepository) GetBySessionID(ctx context.Context, sessionID string) ([]*dnd5e.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySessionID", ctx, sessionID)
	ret0, _ := ret[0].([]*dnd5e.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySessionID indicates an expected call of GetBySessionID.
func (mr *MockRepositoryMockRecorder) GetBySessionID(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySessionID", reflect.TypeOf((*MockRepository)(nil).GetBySessionID), ctx, sessionID)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, opts characterdraft.ListOptions) (*characterdraft.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*characterdraft.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, draft *dnd5e.CharacterDraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, draft)
}
