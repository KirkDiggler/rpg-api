name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/bufbuild/buf/cmd/buf@latest
        go install go.uber.org/mock/mockgen@latest
    
    - name: Generate code
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        make generate
    
    - name: Run tests with coverage
      run: |
        # Run tests excluding generated code, mocks, and cmd
        go test -v -race -coverprofile=coverage.out -covermode=atomic \
          $(go list ./... | grep -v /gen/ | grep -v /mock | grep -v cmd/server)
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Generate coverage badge
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        COLOR="red"
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        fi
        echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
    
    - name: Calculate coverage for changed files
      if: github.event_name == 'pull_request'
      run: |
        # Get list of changed Go files
        CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' | grep '\.go$' | grep -v '_test\.go$' | grep -v '/gen/' | grep -v '/mock/' || true)
        
        if [ -n "$CHANGED_FILES" ]; then
          # Calculate coverage just for changed files
          CHANGED_COVERAGE=0
          TOTAL_STATEMENTS=0
          COVERED_STATEMENTS=0
          
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              # Get coverage for this specific file
              FILE_COV=$(go tool cover -func=coverage.out | grep "^$file" || true)
              if [ -n "$FILE_COV" ]; then
                # Extract covered and total statements
                STATEMENTS=$(echo "$FILE_COV" | awk '{print $(NF-1)}' | sed 's/[()]//g')
                COVERED=$(echo "$STATEMENTS" | cut -d'/' -f1)
                TOTAL=$(echo "$STATEMENTS" | cut -d'/' -f2)
                
                COVERED_STATEMENTS=$((COVERED_STATEMENTS + COVERED))
                TOTAL_STATEMENTS=$((TOTAL_STATEMENTS + TOTAL))
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          if [ $TOTAL_STATEMENTS -gt 0 ]; then
            CHANGED_COVERAGE=$(awk "BEGIN {printf \"%.1f\", ($COVERED_STATEMENTS/$TOTAL_STATEMENTS)*100}")
          fi
          
          echo "CHANGED_COVERAGE=$CHANGED_COVERAGE" >> $GITHUB_ENV
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "CHANGED_COVERAGE=N/A" >> $GITHUB_ENV
          echo "CHANGED_FILES=No Go source files changed" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const color = process.env.COVERAGE_COLOR;
          const changedCoverage = process.env.CHANGED_COVERAGE;
          const changedFiles = process.env.CHANGED_FILES;
          
          let body = `## Test Coverage Report ðŸ“Š
          
          **Overall Coverage:** ![${coverage}%](https://img.shields.io/badge/coverage-${coverage}%25-${color})`;
          
          if (changedCoverage !== 'N/A') {
            const changedColor = parseFloat(changedCoverage) >= 80 ? 'green' : 
                                parseFloat(changedCoverage) >= 60 ? 'yellow' : 'red';
            body += `\n**New Code Coverage:** ![${changedCoverage}%](https://img.shields.io/badge/new_code-${changedCoverage}%25-${changedColor})`;
          }
          
          body += `\n\nView the full coverage report in the artifacts section of this workflow run.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: Update README badge
      if: github.ref == 'refs/heads/main'
      run: |
        # This would typically update a coverage badge in README
        # For now, just echo the coverage
        echo "Coverage: $COVERAGE%"
